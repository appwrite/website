apiVersion: apps/v1
kind: Deployment
metadata:
  name: website
spec:
  replicas: {{ .Values.minReplicas | int }}
  strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
  selector:
    matchLabels:
      app: website
  template:
    metadata:
      labels:
        app: website
    spec:
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{ toYaml . }}
      {{- end }}
      {{- with .Values.imagePullSecret }}
      imagePullSecrets:
        - name: {{ . }}
      {{- end }}
      containers:
        - name: website
          image: "ghcr.io/appwrite/website:{{ .Values.version }}"
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          resources:
            requests:
              cpu: 400m
              memory: 512Mi
            limits:
              memory: 512Mi
        {{- if .Values.env }}
          env:
            {{- range $key, $val := .Values.env }}
            - name: {{ $key }}
              value: "{{ $val }}"
            {{- end }}
        {{- end }}
          ports:
            - containerPort: 3000
          livenessProbe:
            httpGet:
              path: /
              port: 3000
              scheme: HTTP
            periodSeconds: 3
            timeoutSeconds: 3
            failureThreshold: 5
            successThreshold: 1
          readinessProbe:
            httpGet:
              path: /
              port: 3000
              scheme: HTTP
            periodSeconds: 3
            timeoutSeconds: 3
            failureThreshold: 5
            successThreshold: 5

---

apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: 'website'
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: 'website'
  minReplicas: {{ .Values.minReplicas }}
  maxReplicas: {{ .Values.maxReplicas }}
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 80

---

apiVersion: v1
kind: Service
metadata:
  name: website
spec:
  selector:
    app: website
  ports:
    - name: http
      port: 80
      targetPort: 3000

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: website
spec:
  maxUnavailable: {{ .Values.maxUnavailable | int }}
  selector:
    matchLabels:
      app: website
