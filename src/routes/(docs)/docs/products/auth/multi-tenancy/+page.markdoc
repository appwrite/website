---
layout: article
title: Multi-tenancy with Teams
description: Learn how to implement multi-tenancy in your applications using Appwrite Teams.
---

Appwrite Teams provides an effective way to implement multi-tenancy in your applications. Create a team for each tenant to handle multi-tenant apps with built-in data isolation.

{% arrow_link href="/docs/products/auth/teams" %}
Learn more about Teams
{% /arrow_link %}

# What is multi-tenancy?

Multi-tenancy is a design pattern where a single instance of software serves multiple user groups (tenants). With Appwrite Teams, you can:

- Create a team for each tenant in your application
- Control access to resources using team-based permissions
- Define different roles within each tenant
- Scale to unlimited tenants without code changes

# Common use cases

- **SaaS applications**: Organizations that need isolated data and users
- **Collaborative tools**: Projects with different access levels
- **Educational platforms**: Schools with teachers and students
- **Business software**: Companies with department-based access control

# Create teams for tenants

When a new tenant signs up, create a dedicated team that serves as their isolated environment.

{% multicode %}
```client-web
import { Client, Teams, ID } from "appwrite";

const client = new Client()
    .setEndpoint('https://<REGION>.cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>');

const teams = new Teams(client);

// Create team for a new tenant
const tenantTeam = await teams.create(
    'example_corp', // Team ID for tenant
    'Example Corp',   // Tenant name
    ['owner', 'admin', 'member'] // Tenant roles
);
```
```client-flutter
import 'package:appwrite/appwrite.dart';

final client = Client()
    .setEndpoint('https://<REGION>.cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>');

final teams = Teams(client);

// Create team for a new tenant
final tenantTeam = await teams.create(
    teamId: 'example_corp', // Team ID for tenant
    name: 'Example Corp',   // Tenant name
    roles: ['owner', 'admin', 'member'] // Tenant roles
);
```
```client-apple
import Appwrite

let client = Client()
    .setEndpoint("https://<REGION>.cloud.appwrite.io/v1")
    .setProject("<PROJECT_ID>")

let teams = Teams(client)

// Create team for a new tenant
let tenantTeam = try await teams.create(
    teamId: "example_corp", // Team ID for tenant
    name: "Example Corp",   // Tenant name
    roles: ["owner", "admin", "member"] // Tenant roles
)
```
```client-android-kotlin
import io.appwrite.Client
import io.appwrite.ID
import io.appwrite.services.Teams

val client = Client(context)
    .setEndpoint("https://<REGION>.cloud.appwrite.io/v1")
    .setProject("<PROJECT_ID>")

val teams = Teams(client)

// Create team for a new tenant
val tenantTeam = teams.create(
    teamId = "example_corp", // Team ID for tenant
    name = "Example Corp",   // Tenant name
    roles = listOf("owner", "admin", "member") // Tenant roles
)
```
{% /multicode %}

# Add members to tenants

Invite users to join a tenant using team memberships. Each member can be assigned different roles for access control.

{% multicode %}
```client-web
import { Client, Teams } from "appwrite";

const client = new Client()
    .setEndpoint('https://<REGION>.cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>');

const teams = new Teams(client);

// Invite a member to the tenant
const membership = await teams.createMembership(
    'example_corp',      // Team/tenant ID
    ['admin'],           // Member's role in the tenant
    'user@example.com',  // User's email
    undefined,           // userId (optional)
    undefined,           // phone (optional)
    'https://example.com/accept-invite' // Redirect URL after accepting
);
```
```client-flutter
import 'package:appwrite/appwrite.dart';

final client = Client()
    .setEndpoint('https://<REGION>.cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>');

final teams = Teams(client);

// Invite a member to the tenant
final membership = await teams.createMembership(
    teamId: 'example_corp',   // Team/tenant ID
    roles: ['admin'],         // Member's role in the tenant
    email: 'user@example.com', // User's email
    url: 'https://example.com/accept-invite' // Redirect URL after accepting
);
```
```client-apple
import Appwrite

let client = Client()
    .setEndpoint("https://<REGION>.cloud.appwrite.io/v1")
    .setProject("<PROJECT_ID>")

let teams = Teams(client)

// Invite a member to the tenant
let membership = try await teams.createMembership(
    teamId: "example_corp",    // Team/tenant ID
    roles: ["admin"],          // Member's role in the tenant
    email: "user@example.com", // User's email
    url: "https://example.com/accept-invite" // Redirect URL after accepting
)
```
```client-android-kotlin
import io.appwrite.Client
import io.appwrite.services.Teams

val client = Client(context)
    .setEndpoint("https://<REGION>.cloud.appwrite.io/v1")
    .setProject("<PROJECT_ID>")

val teams = Teams(client)

// Invite a member to the tenant
val membership = teams.createMembership(
    teamId = "example_corp",    // Team/tenant ID
    roles = listOf("admin"),    // Member's role in the tenant
    email = "user@example.com", // User's email
    url = "https://example.com/accept-invite" // Redirect URL after accepting
)
```
{% /multicode %}

# Secure resources with team permissions

Control access to documents and resources using team-based permissions. This ensures data isolation between tenants.

{% multicode %}
```client-web
import { Client, Databases, ID, Permission, Role } from "appwrite";

const client = new Client()
    .setEndpoint('https://<REGION>.cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>');

const databases = new Databases(client);

// Create a document that only members of "Example Corp" tenant can access
const document = await databases.createDocument(
    'invoices_db',
    'invoices',
    ID.unique(),
    {
        title: 'Q2 Invoice',
        amount: 2500.00,
        customer: 'Example Customer',
        status: 'pending',
        tenant_id: 'example_corp'
    },
    [
        // All Example Corp team members can read
        Permission.read(Role.team('example_corp')),

        // Only admins can update
        Permission.write(Role.team('example_corp', ['admin']))
    ]
);
```
```client-flutter
import 'package:appwrite/appwrite.dart';

final client = Client()
    .setEndpoint('https://<REGION>.cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>');

final databases = Databases(client);

// Create a document that only members of "Example Corp" tenant can access
final document = await databases.createDocument(
    databaseId: 'invoices_db',
    collectionId: 'invoices',
    documentId: ID.unique(),
    data: {
        'title': 'Q2 Invoice',
        'amount': 2500.00,
        'customer': 'Example Customer',
        'status': 'pending',
        'tenant_id': 'example_corp'
    },
    permissions: [
        // All Example Corp team members can read
        Permission.read(Role.team('example_corp')),

        // Only admins can update
        Permission.write(Role.team('example_corp', ['admin']))
    ]
);
```
```client-apple
import Appwrite

let client = Client()
    .setEndpoint("https://<REGION>.cloud.appwrite.io/v1")
    .setProject("<PROJECT_ID>")

let databases = Databases(client)

// Create a document that only members of "Example Corp" tenant can access
let document = try await databases.createDocument(
    databaseId: "invoices_db",
    collectionId: "invoices",
    documentId: ID.unique(),
    data: [
        "title": "Q2 Invoice",
        "amount": 2500.00,
        "customer": "Example Customer",
        "status": "pending",
        "tenant_id": "example_corp"
    ],
    permissions: [
        // All Example Corp team members can read
        Permission.read(Role.team("example_corp")),

        // Only admins can update
        Permission.write(Role.team("example_corp", ["admin"]))
    ]
)
```
```client-android-kotlin
import io.appwrite.Client
import io.appwrite.ID
import io.appwrite.services.Databases
import io.appwrite.models.Permission
import io.appwrite.models.Role

val client = Client(context)
    .setEndpoint("https://<REGION>.cloud.appwrite.io/v1")
    .setProject("<PROJECT_ID>")

val databases = Databases(client)

// Create a document that only members of "Example Corp" tenant can access
val document = databases.createDocument(
    databaseId = "invoices_db",
    collectionId = "invoices",
    documentId = ID.unique(),
    data = mapOf(
        "title" to "Q2 Invoice",
        "amount" to 2500.00,
        "customer" to "Example Customer",
        "status" to "pending",
        "tenant_id" to "example_corp"
    ),
    permissions = listOf(
        // All Example Corp team members can read
        Permission.read(Role.team("example_corp")),

        // Only admins can update
        Permission.write(Role.team("example_corp", listOf("admin")))
    )
)
```
{% /multicode %}

# Query tenant data

When querying data, users will automatically only see documents they have permission to access based on their team memberships.

{% multicode %}
```client-web
import { Client, Databases, Query } from "appwrite";

const client = new Client()
    .setEndpoint('https://<REGION>.cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>');

const databases = new Databases(client);

// Current user will only see invoices they have access to
const documents = await databases.listDocuments(
    'invoices_db',
    'invoices'
);

// For specific tenant data, you can add a query filter
const tenantDocuments = await databases.listDocuments(
    'invoices_db',
    'invoices',
    [
        Query.equal('tenant_id', 'example_corp')
    ]
);
```
```client-flutter
import 'package:appwrite/appwrite.dart';

final client = Client()
    .setEndpoint('https://<REGION>.cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>');

final databases = Databases(client);

// Current user will only see invoices they have access to
final documents = await databases.listDocuments(
    databaseId: 'invoices_db',
    collectionId: 'invoices',
);

// For specific tenant data, you can add a query filter
final tenantDocuments = await databases.listDocuments(
    databaseId: 'invoices_db',
    collectionId: 'invoices',
    queries: [
        Query.equal('tenant_id', 'example_corp')
    ]
);
```
```client-apple
import Appwrite

let client = Client()
    .setEndpoint("https://<REGION>.cloud.appwrite.io/v1")
    .setProject("<PROJECT_ID>")

let databases = Databases(client)

// Current user will only see invoices they have access to
let documents = try await databases.listDocuments(
    databaseId: "invoices_db",
    collectionId: "invoices"
)

// For specific tenant data, you can add a query filter
let tenantDocuments = try await databases.listDocuments(
    databaseId: "invoices_db",
    collectionId: "invoices",
    queries: [
        Query.equal(key: "tenant_id", value: "example_corp")
    ]
)
```
```client-android-kotlin
import io.appwrite.Client
import io.appwrite.services.Databases
import io.appwrite.Query

val client = Client(context)
    .setEndpoint("https://<REGION>.cloud.appwrite.io/v1")
    .setProject("<PROJECT_ID>")

val databases = Databases(client)

// Current user will only see invoices they have access to
val documents = databases.listDocuments(
    databaseId = "invoices_db",
    collectionId = "invoices"
)

// For specific tenant data, you can add a query filter
val tenantDocuments = databases.listDocuments(
    databaseId = "invoices_db",
    collectionId = "invoices",
    queries = listOf(
        Query.equal("tenant_id", "example_corp")
    )
)
```
{% /multicode %}

{% arrow_link href="/docs/products/auth/team-invites" %}
Learn how to manage team invitations
{% /arrow_link %}
