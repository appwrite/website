---
layout: article
title: Svelte Tutorial
description: This is the description used for SEO.
---
Build an app to track all the side projects you've been meaning to start.

{% section #step-1 step=1 title="Getting started" %}
Head to the [Appwrite Console](https://cloud.appwrite.io/console).

![Create project screen](/images/docs/databases/quick-start/create-project.png)

If this is your first time using Appwrite, create an accout and create your first project.

Then, under **Add a platform**, add a **Web app**. The **Hostname** should be localhost. 

![Add a platform](/images/docs/databases/quick-start/add-platform.png)

You can skip optional steps.

{% /section %}

{% section #step-2 step=2 title="Create SvelteKit app" %}
Create a SvelteKit app with the `npm create` command and select `Skeleton project`

```sh
npm create svelte@latest ideas-tracker && cd ideas-tracker
```
{% /section %}

{% section #step-3 step=3 title="Install dependencies" %}

Install the JavaScript Appwrite SDK.

```sh
npm install appwrite
```

We recommend starting the development server to watch your app update in the browser as you make changes.

```sh
npm run dev -- --open
```
{% /section %}

{% section #step-4 step=4 title="Setting up Appwrite" %}
To use Appwrite in our Svelte app, we'll need to find our project ID. Find your project's ID in the **Settings** page. 

![Settings page in Appwrite Console.](/images/docs/databases/quick-start/project-id.png)

Create a new file `src/lib/appwrite.js` to hold our Appwrite related code.
Add the following code to it, replacing `<YOUR_PROJECT_ID>` with your project ID.

```js
import { Client } from "appwrite";

const client = new Client();
client
  .setEndpoint("https://cloud.appwrite.io/v1")
  .setProject("<YOUR_PROJECT_ID>"); // Replace with your project IDxw

export const account = new Account(client);
export const database = new Database(client);
```
{% /section %}

{% section #step-5 step=5 title="Using Appwrite Authentication" %}
In Svelte, [stores](https://svelte.dev/docs/svelte-store) are a way to share state between components. We'll use a store to keep track of our user's data.

Create a new file `src/lib/stores/user.js` and add the following code to it.

```js
import { writable } from "svelte/store";
import { ID } from "appwrite";
import { goto } from "$app/navigation";
import { account } from "$lib/appwrite";

const store = writable(null);

async function init() {
  try {
    store.set(await account.get());
  } catch (e) {
    store.set(null);
  }
}

async function register(email, password) {
  await account.create(ID.unique(), email, password);
  await login(email, password);
}

async function login(email, password) {
  await account.createEmailSession(email, password);
  await init();
  goto("/"); // Redirect to home page after login
}

async function logout() {
  await account.deleteSession("current");
  store.set(null);
}

export const user = {
  subscribe: store.subscribe, // Expose the store's value with $user
  register,
  login,
  logout,
  init,
};
```
{% /section %}

{% section #step-6 step=6 title="Building a login page" %}

Using this store, we can build a login page.

Create a new file `src/routes/login/+page.svelte` and add the following code to it.

```html
<script>
  import { user } from "$lib/stores/user";

  let email = "";
  let password = "";
</script>

<h1>Login or register</h1>
<form>
  <input type="email" placeholder="Email" bind:value={email} />
  <input type="password" placeholder="Password" bind:value={password} />
  <button type="button" on:click={() => user.login(email, password)}
    >Login</button
  >
  <button type="button" on:click={() => user.register(email, password)}
    >Register</button
  >
</form>

<style>
  form {
    display: grid;
    gap: 0.25rem;
  }
</style>
```
{% /section %}

{% section #step-7 step=7 title="Building a navbar" %}
Create a layout component, used by all pages, to display a navbar. The navbar will show a login button if the user is not logged in, and a logout button if the user is logged in.

In this component, we can call our `user.init()` function to check if the user is logged in when the page loads.

Create a new file `src/routes/+layout.svelte` and add the following code to it.

```html
<script>
  import { ideas } from "$lib/stores/ideas";
  import { user } from "$lib/stores/user";
  import { onMount } from "svelte";

  onMount(async () => {
    user.init();
  });
</script>

<nav>
  <a href="/">Idea Tracker</a>
  {#if $user}
    <div>
      <span>{$user.email}</span>
      <button type="button" on:click={user.logout}>Logout</button>
    </div>
  {:else}
    <a href="/login">Login</a>
  {/if}
</nav>

<slot />

<style>
  :global(*) {
    font-family: sans-serif;
  }

  :global(body) {
    margin: 1rem auto;
    max-width: 30rem;
  }

  nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
</style>
```
{% /section %}

{% section #step-8 step=8 title="Using Appwrite Databases" %}
Create a collection in the Appwrite console to store our ideas.

![Create collection screen](#TODO update me)

Create a new collection with the following attributes:
- userId: String (required)
- title: String (required)
- description: String

Create a new file `src/lib/stores/ideas.js` and add the following code to it.

```js
import { writable } from "svelte/store";
import { ID, Query } from "appwrite";
import { databases } from "$lib/appwrite";

export const IDEAS_DATABASE_ID = "6508783c5dc784d544dd"; // Replace with your database ID
export const IDEAS_COLLECTION_ID = "65087840ab307cb06883"; // Replace with your collection ID

const databases = new Databases(client);

const store = writable([]);

async function init() {
  const response = await databases.listDocuments(
    IDEAS_DATABASE_ID,
    IDEAS_COLLECTION_ID,
    // Use a query to how the latest ideas first
    [Query.orderDesc("$createdAt")]
  );
  store.set(response.documents);
}

async function add(userId, title, description) {
  const response = await databases.createDocument(
    IDEAS_DATABASE_ID,
    IDEAS_COLLECTION_ID,
    ID.unique(),
    {
      userId,
      title,
      description,
    }
  );
  store.update((ideas) => [response, ...ideas]);
}

async function remove(id) {
  await databases.deleteDocument(IDEAS_DATABASE_ID, IDEAS_COLLECTION_ID, id);
  store.update((ideas) => ideas.filter((idea) => idea.$id !== id));
}

export const ideas = {
  subscribe: store.subscribe, // Expose the store's value with $ideas
  init,
  add,
  remove,
};
```
{% /section %}

{% section #step-9 step=9 title="Creating the ideas page" %}

Using this store, we can build a page to submit and view ideas.

Overwrite the contents of `src/routes/+page.svelte` with the following code.

```html
<script>
  import { user } from "$lib/stores/user";
  import { ideas } from "$lib/stores/ideas";

  let title = "";
  let description = "";
</script>

{#if $user}
  <section>
    <h2>Submit Idea</h2>
    <form>
      <input type="text" placeholder="Title" bind:value={title} />
      <textarea placeholder="Description" bind:value={description} />
      <button
        type="button"
        on:click={async () => {
          ideas.add($user.$id, title, description);
          title = "";
          description = "";
        }}>Submit</button
      >
    </form>
  </section>
{:else}
  <section><p>Please login to submit an idea.</p></section>
{/if}
<section>
  <h2>Latest Ideas</h2>
  <ul>
    {#each $ideas as idea}
      <li>
        <strong>{idea.title}</strong>
        <p>{idea.description}</p>
        {#if $user && idea.userId === $user.$id}
          <button type="button" on:click={() => ideas.remove(idea.$id)}
            >Remove</button
          >
        {/if}
      </li>
    {/each}
  </ul>
</section>

<style>
  section {
    margin-bottom: 3rem;
  }
  form {
    display: grid;
    gap: 0.25rem;
  }

  ul {
    list-style: none;
    padding: 0;
  }

  li {
    border-radius: 0.25em;
    background-color: antiquewhite;
    box-shadow: 8px 8px 4px 0 rgba(0, 0, 0, 0.1);
    min-width: 20%;
    padding: 1rem;
    margin-bottom: 1rem;
  }
</style>
```
{% /section %}

{% section #step-10 step=10 title="Checkout what you've built" %}

Run your project with `npm run dev` and open [http://localhost:3000](http://localhost:3000) in your browser.

{% /section %}