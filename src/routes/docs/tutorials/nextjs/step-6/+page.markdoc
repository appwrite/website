---
layout: tutorial
title: Create expense list
description: Fetch user expenses from Appwrite database and display them in a list.
step: 6
---
# Create list API {% #create-list-api %} 
We will create a new API endpoint that will fetch the user expenses from the database. Create a new file `app/api/expense/list/route.js` and add the following code.

```js
// /src/app/api/expense/list/route.js

import { Query } from "appwrite";
import { headers } from "next/headers";
import { NextResponse } from "next/server";

import {
  EXPENSE_COLLECTION_ID,
  EXPENSE_DATABASE_ID,
  account,
  database,
} from "@/config/appwrite";

export async function POST(req) {
  const body = await req.json();
  const { userId } = body;
  const headersList = headers();
  const jwt = headersList.get("jwt");

  if (!userId || !jwt) {
    return new NextResponse("Unauthorized", { status: 401 });
  }
  account.client.setJWT(jwt);

  try {
    const items = await database.listDocuments(
      EXPENSE_DATABASE_ID,
      EXPENSE_COLLECTION_ID,
      [Query.equal("userId", [userId]), Query.orderDesc("$createdAt")]
    );
    return new NextResponse(JSON.stringify({ items: items.documents }));
  } catch (error) {
    console.log(error);
    return new NextResponse("Internal server error", {
      status: 500,
      error: error.message,
    });
  }
}
```

With Appwrite's `listDocuments` method we can fetch the documents from the database. It will create a new API endpoint `http://localhost:3000/api/expense/list` that will return the user expenses.

We are also using Appwrite's `Query` class to filter the documents. We have used the `Query.equal` method to filter the documents by `userId`. We have also used the `Query.orderDesc` method to order the documents by `$createdAt` in descending order.


# Expense list component {% #expense-list-component %}

Let's fetch the user expenses from the database and display them in a list. Open the `app/page.js` file and add the following code.

```js
// /src/app/page.js

"use client";

import React, { useEffect, useState } from "react";
import { useCookie } from "next-cookie";
import toast from "react-hot-toast";
import { useRouter } from "next/navigation";

import ExpenseList from "@/components/ExpenseList";

const Home = (props) => {
  const [expenses, setExpenses] = useState();
  const [popup, setPopup] = useState(null);
  const cookie = useCookie(props.cookie);
  const router = useRouter();
  const jwt = cookie.get("jwt");
  const userId = cookie.get("userid");

  const getExpenses = async () => {
    if (!jwt) {
      router.push("/login");
      return;
    }

    const response = await fetch("/api/expense/list", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        jwt,
      },
      body: JSON.stringify({
        userId,
      }),
    });
    const data = await response.json();
    if (data.error === "Failed to verify JWT. Invalid token: Expired") {
      cookie.remove("jwt");
      cookie.remove("userid");
      toast.error("Session expired, please login again");
      router.push("/login");
    } else {
      setExpenses(data.items);
    }
  };

  useEffect(() => {
    getExpenses();
  }, []);

  const createExpense = async (item) => {
    ...
  }

  return (
    <>
      <ExpenseList
        expenses={expenses}
        setPopup={setPopup}
      />
    </>
  );
};

export default Home;
```

Here is the full code for the `app/page.js` file.

```js
// /src/app/page.js

"use client";

import React, { useEffect, useState } from "react";
import { useCookie } from "next-cookie";
import toast from "react-hot-toast";
import { useRouter } from "next/navigation";

import ExpenseList from "@/components/ExpenseList";
import CreateExpensePopup from "@/components/CreateExpensePopup";

const Home = (props) => {
  const [expenses, setExpenses] = useState();
  const [popup, setPopup] = useState(null);
  const cookie = useCookie(props.cookie);
  const router = useRouter();
  const jwt = cookie.get("jwt");
  const userId = cookie.get("userid");

  const getExpenses = async () => {
    if (!jwt) {
      router.push("/login");
      return;
    }

    const response = await fetch("/api/expense/list", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        jwt,
      },
      body: JSON.stringify({
        userId,
      }),
    });
    const data = await response.json();
    if (data.error === "Failed to verify JWT. Invalid token: Expired") {
      cookie.remove("jwt");
      cookie.remove("userid");
      toast.error("Session expired, please login again");
      router.push("/login");
    } else {
      setExpenses(data.items);
    }
  };

  useEffect(() => {
    getExpenses();
  }, []);

  const createExpense = async (item) => {
    const response = await fetch("/api/expense", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        jwt,
      },
      body: JSON.stringify({
        userId,
        title: item.title,
        amount: item.amount,
        type: item.type,
      }),
    });

    if (response.status === 200) {
      toast.success("Saved successfully");
      setPopup(null);
    }
  };

  return (
    <>
      {popup?.type === "new" && (
        <CreateExpensePopup 
          setPopup={setPopup} 
          createExpense={createExpense} 
        />
      )}
      <div className="container u-flex-vertical u-gap-12 u-cross-center">
        <h1 className="heading-level-1 font-bold">Your expenses</h1>
        <button
          className="button"
          onClick={() => setPopup({ type: "new", data: null })}
        >
          <span className="icon-plus" aria-hidden="true"></span>
          <span className="text">New Expense</span>
        </button>
        <ExpenseList
          expenses={expenses}
          setPopup={setPopup}
        />
      </div>
    </>
  );
};

export default Home;
```

Now we will render the Expenses. Create a new file `components/ExpenseList.js`. This component will receive the `expenses` array and we will map over the array and render the expenses in a list.

```js
// /src/components/ExpenseList.js

import React from "react";

const ExpenseList = ({ expenses, setPopup }) => {
  return (
    <div className="u-padding-block-8 u-width-full-line">
      {expenses?.length > 0 &&
        expenses?.map((expense) => (
          <div
            className="card u-padding-block-16 u-margin-block-start-12"
            key={expense.$id}
          >
            <div className="u-flex u-main-space-between">
              <p className="heading-level-4 u-bold">{expense.title}</p>
              <div className="u-flex u-gap-8">
                <p className="heading-level-5 u-bold">
                  {expense.type === "Paid" && "-"}
                  {expense.type === "Received" && "+"}${expense.amount}
                </p>
                <span
                  className={
                    expense.type === "Paid" ? "tag is-danger" : "tag is-success"
                  }
                >
                  {expense.type}
                </span>
              </div>
            </div>
            <div className="u-flex u-main-space-between">
              <p className="body-text-1">
                {new Date(expense.$createdAt).toLocaleDateString("en-US", {
                  year: "numeric",
                  month: "long",
                  day: "numeric",
                  hour: "2-digit",
                  minute: "2-digit",
                })}
              </p>
              <div className="u-flex u-gap-8">
                <button  className="cursor-pointer">
                  <div className="icon-pencil-alt" />
                </button>
                <button className="cursor-pointer">
                  <div className="icon-trash" />
                </button>
              </div>
            </div>
          </div>
        ))}
    </div>
  );
};

export default ExpenseList;
```

We are also rendering edit and delete buttons. We will add the functionality for these buttons in the next step.