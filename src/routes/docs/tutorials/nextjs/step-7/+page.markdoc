---
layout: tutorial
title: Edit and delete expenses
description: Edit and delete expenses from expense list
step: 7
---

In the expense card we have added two buttons to edit and delete the expense. We will add the functionality to these buttons in this step.

# Edit expense {% #edit-expense %}

First create a API to edit the expense. We will create `PUT` api in the same `app/api/expense/route.js` file. We will use the `updateDocument` method of the `database` service to update the expense document.

```js
// /src/app/api/expense/route.js

import { ID } from "appwrite";
import { headers } from "next/headers";
import { NextResponse } from "next/server";

import {
  EXPENSE_COLLECTION_ID,
  EXPENSE_DATABASE_ID,
  account,
  database,
} from "@/config/appwrite";

// Post - create expense
export async function POST(req) {
  ...
}

// Put - update expense
export async function PUT(req) {
  const body = await req.json();
  const { title, amount, type, docId } = body;
  if (!title || !amount || !type || !docId) {
    return new NextResponse("Missing fields", { status: 401 });
  }

  const headersList = headers();
  const jwt = headersList.get("jwt");

  if (!jwt) {
    return new NextResponse("Unauthorized", { status: 401 });
  }

  account.client.setJWT(jwt);

  try {
    await database.updateDocument(
      EXPENSE_DATABASE_ID,
      EXPENSE_COLLECTION_ID,
      docId,
      {
        title,
        amount,
        type,
      }
    );

    return new NextResponse("Updated successfully", { status: 200 });
  } catch (error) {
    return new NextResponse("Internal server error", {
      status: 500,
      error: error.message,
    });
  }
}
```

When the user clicks on the edit button, we will show the expense popup form with the expense details filled in. The user can then edit the expense and save it.

We will add a click event handler to the edit button in the `ExpenseList` component.

```js
// /src/components/ExpenseList.js

<button
  className="cursor-pointer"
  onClick={() => setPopup({ type: "edit", data: expense })}
>
  <div className="icon-pencil-alt" />
</button>
```

The `setPopup` function is passed as a prop to the `ExpenseList` component from the `ExpenseList` component.

We will also add the `editExpense` function. This function will make a `PUT` request to the `http://localhost:3000/api/expense` endpoint to update the expense.

Edit the `app/page.js` file to add the `editExpense` function.

```js
// /src/app/page.js

"use client";

import React, { useEffect, useState } from "react";
import { useCookie } from "next-cookie";
import { useRouter } from "next/navigation";
import toast from "react-hot-toast";

import ExpenseList from "@/components/ExpenseList";
import EditExpensePopup from "@/components/EditExpensePopup";
import CreateExpensePopup from "@/components/CreateExpensePopup";

const Home = (props) => {
  const [expenses, setExpenses] = useState();
  const [popup, setPopup] = useState(null);
  const router = useRouter();
  const cookie = useCookie(props.cookie);
  const jwt = cookie.get("jwt");
  const userId = cookie.get("userid");

  const getExpenses = async () => {
    ...
  }

  useEffect(() => {
    getExpenses();
  }, []);

  const createExpense = async (item) => {
    ...
  }

  const editExpense = async (item) => {
    const response = await fetch("/api/expense", {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
        jwt,
      },
      body: JSON.stringify(item),
    });

    if (response.status === 200) {
      toast.success("Updated successfully");
      setPopup(null);
      getExpenses(); // get the expenses again
    }
  }

  return (
    <>
      {popup?.type === "edit" && (
        <EditExpensePopup
          docId={popup?.data?.$id}
          title={popup?.data?.title}
          amount={popup?.data?.amount}
          type={popup?.data?.type}
          popup={popup}
          setPopup={setPopup}
          editExpense={editExpense}
        />
      )}
    </>
  )
}
```

Let's create a `EditExpensePopup` component in the `components` folder `components/EditExpensePopup.js`. This component will be used to show the popup form to edit the expense.

```js
// /src/components/EditExpensePopup.js

"use client";

import React from "react";

const EditExpensePopup = ({
  title,
  amount,
  type,
  docId,
  setPopup,
  editExpense,
}) => {
  const handleSubmit = async (e) => {
    e.preventDefault();
    const form = e.target;
    const formData = new FormData(form);

    const item = {
      docId,
      title: formData.get("title"),
      amount: formData.get("amount"),
      type: formData.get("type"),
    };

    if (!item.title) {
      return toast.error("Title is required");
    }
    if (!item.amount) {
      return toast.error("Amount is required");
    }
    if (!item.type) {
      return toast.error("Type is required");
    }

    try {
      await editExpense(item);
    } catch (error) {
      toast.error(error.message);
    }
  };

  return (
    <div className="u-position-fixed u-inset-0 u-width-full-line u-full-screen-height u-flex u-cross-center u-main-center u-z-index-10 lite-bg">
      <div className="card u-max-width-600 u-width-full-line">
        <button
          onClick={() => setPopup(null)}
          className="u-position-absolute u-inset-inline-end-16 u-inset-block-start-16"
        >
          <span className="icon-x-circle" />
        </button>
        <p className="heading-level-3 font-bold u-text-center">
          Update Expense
        </p>
        <form className="u-margin-block-start-12" onSubmit={handleSubmit}>
          <div>
            <label className="label">Title</label>
            <div className="input-text-wrapper">
              <input
                className="input-text"
                placeholder="Title"
                name="title"
                type="text"
                required
                defaultValue={title}
              />
            </div>
          </div>
          <div className="u-margin-block-start-12">
            <label className="label">Amount($)</label>
            <div className="input-text-wrapper">
              <input
                className="input-text"
                placeholder="Title"
                name="amount"
                type="number"
                step="0.01"
                required
                min="0"
                defaultValue={amount}
              />
            </div>
          </div>
          <div className="u-margin-block-start-12">
            <label className="label">Type</label>
            <div className="input-text-wrapper">
              <select name="type" className="input-text" defaultValue={type}>
                <option value="">Select</option>
                <option value="Paid">Paid</option>
                <option value="Received">Received</option>
              </select>
            </div>
          </div>
          <div className="u-margin-block-start-12">
            <button type="submit" className="button">
              Update
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default EditExpensePopup;
```

# Delete expense {% #delete-expense %}

First create a API to delete the expense. We will create `DELETE` api in the same `app/api/expense/route.js` file. We will use the `deleteDocument` method of the `database` service to delete the expense document.

```js
// /src/app/api/expense/route.js

import { ID } from "appwrite";
import { headers } from "next/headers";
import { NextResponse } from "next/server";

import {
  EXPENSE_COLLECTION_ID,
  EXPENSE_DATABASE_ID,
  account,
  database,
} from "@/config/appwrite";

// Post - create expense
export async function Post(req) {
  ...
}

// Put - update expense
export async function PUT(req) {
  ...
}

// Delete - delete expense
export async function DELETE(req) {
  const body = await req.json();
  const { docId } = body;

  if (!docId) {
    return new NextResponse("Missing fields", { status: 401 });
  }

  const headersList = headers();
  const jwt = headersList.get("jwt");

  if (!jwt) {
    return new NextResponse("Unauthorized", { status: 401 });
  }

  account.client.setJWT(jwt);

  try {
    await database.deleteDocument(
      EXPENSE_DATABASE_ID,
      EXPENSE_COLLECTION_ID,
      docId
    );
    return new NextResponse("Deleted successfully", { status: 200 });
  } catch (error) {
    return new NextResponse("Internal server error", {
      status: 500,
      error: error.message,
    });
  }
}
```

When the user clicks on the delete button, we will show a confirmation popup to the user. If the user confirms the delete action, we will delete the expense from the database.

We will add a click event handler to the delete button in the `ExpenseList` component.

```js
// /src/components/ExpenseList.js
<button
  className="cursor-pointer"
  onClick={() => setPopup({ type: "delete", data: expense })}
>
  <div className="icon-trash" />
</button>
```

The `setPopup` function is passed as a prop to the `ExpenseList` component from the `ExpenseList` component. This is the same state that we used to edit the expense.

We will also add the `deleteExpense` function in the `app/page.js` file. This function will make a `DELETE` request to the `/api/expense` endpoint to delete the expense. We are using the `docId` to identify the expense to delete.

```js
// /src/app/page.js

"use client";

import React, { useState } from "react";
import { useCookie } from "next-cookie";
import { useRouter } from "next/navigation";
import toast from "react-hot-toast";

import DeleteExpensePopup from "@/components/DeleteExpensePopup";
import CreateExpensePopup from "@/components/CreateExpensePopup";
import ExpenseList from "@/components/ExpenseList";
import EditExpensePopup from "@/components/EditExpensePopup";

const Home = (props) => {
  const [expenses, setExpenses] = useState();
  const [popup, setPopup] = useState(null);
  const router = useRouter();
  const jwt = cookie.get("jwt");
  const userId = cookie.get("userid");

  const getExpenses = async () => {
    ...
  }

  useEffect(() => {
    getExpenses();
  }, []);

  const createExpense = async (item) => {
    ...
  }

  const editExpense = async (item) => {
    ...
  }

  const deleteExpense = async (docId) => {
    const response = await fetch("/api/expense", {
      method: "DELETE",
      headers: {
        "Content-Type": "application/json",
        jwt,
      },
      body: JSON.stringify({ docId: docId }),
    });

    if (response.status === 200) {
      toast.success("Deleted successfully");
      setPopup(null);
      getExpenses(); // get the expenses again
    }
  };

  return (
    <>
      {popup?.type === "delete" && (
        <DeleteExpensePopup
          popup={popup}
          setPopup={setPopup}
          deleteExpense={deleteExpense}
        />
      )}
    </>
  );
};

export default Home;
```

Let's create a `DeleteExpensePopup` component in the `components` folder `components/DeleteExpensePopup.js`. This component will be used to show the popup form to delete the expense.

```js
// /src/components/DeleteExpensePopup.js

const DeleteExpensePopup = ({ popup, setPopup, deleteExpense }) => {
  return (
    <div className="u-position-fixed u-inset-0 u-width-full-line u-full-screen-height u-flex u-cross-center u-main-center u-z-index-10 lite-bg">
      <div className="card u-max-width-600 u-width-full-line">
        <p className="heading-level-3 font-bold u-text-center">
          Delete Expense
        </p>
        <div className="u-flex u-main-center u-margin-block-start-12 u-gap-12">
          <button
            className="button is-secondary"
            onClick={() => setPopup(null)}
          >
            Cancel
          </button>
          <button
            className="button"
            onClick={() => deleteExpense(popup.data.$id)}
          >
            Delete
          </button>
        </div>
      </div>
    </div>
  );
};

export default DeleteExpensePopup;
```


Here is the full code of `app/page.js` file after edit and delete expense functionality.

```js
// /src/app/page.js

"use client";

import React, { useState } from "react";
import { useCookie } from "next-cookie";
import { useRouter } from "next/navigation";
import toast from "react-hot-toast";

import DeleteExpensePopup from "@/components/DeleteExpensePopup";
import CreateExpensePopup from "@/components/CreateExpensePopup";
import ExpenseList from "@/components/ExpenseList";
import EditExpensePopup from "@/components/EditExpensePopup";

const Home = (props) => {
  const [expenses, setExpenses] = useState();
  const [popup, setPopup] = useState(null);
  const router = useRouter();
  const jwt = cookie.get("jwt");
  const userId = cookie.get("userid");

  const getExpenses = async () => {
    if (!jwt) {
      router.push("/login");
      return;
    }
    const response = await fetch("/api/expense/list", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        jwt,
      },
      body: JSON.stringify({
        userId: userId,
      }),
    });
    const data = await response.json();
    if (data.message === "Failed to verify JWT. Invalid token: Expired") {
      cookie.remove("jwt");
      cookie.remove("userid");
      toast.error("Session expired, please login again");
      router.push("/login");
    } else {
      setExpenses(data.items);
      setTotal(data.total);
    }
  };

  useEffect(() => {
    getExpenses();
  }, []);

  const createExpense = async (title, amount, type) => {
    const response = await fetch("/api/expense", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        jwt,
      },
      body: JSON.stringify({
        userId: userId,
        title: title,
        amount: amount,
        type: type,
      }),
    });

    if (response.status === 200) {
      toast.success("Saved successfully");
      setPopup(null);
      getExpenses();
    }
  };

  const editExpense = async (docId, title, amount, type) => {
    const response = await fetch("/api/expense", {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
        jwt,
      },
      body: JSON.stringify({
        docId: docId,
        title: title,
        amount: amount,
        type: type,
      }),
    });

    if (response.status === 200) {
      toast.success("Updated successfully");
      setPopup(null);
      getExpenses();
    }
  };

  const deleteExpense = async (docId) => {
    const response = await fetch("/api/expense", {
      method: "DELETE",
      headers: {
        "Content-Type": "application/json",
        jwt,
      },
      body: JSON.stringify({ docId: docId }),
    });

    if (response.status === 200) {
      toast.success("Deleted successfully");
      setPopup(null);
      getExpenses(); // get the expenses again
    }
  };

  return (
    <>
      {popup?.type === "new" && (
        <CreateExpensePopup 
          setPopup={setPopup} 
          createExpense={createExpense} 
        />
      )}
      {popup?.type === "edit" && (
        <EditExpensePopup
          docId={popup?.data?.$id}
          title={popup?.data?.title}
          amount={popup?.data?.amount}
          type={popup?.data?.type}
          popup={popup}
          setPopup={setPopup}
          editExpense={editExpense}
        />
      )}
      {popup?.type === "delete" && (
        <DeleteExpensePopup
          popup={popup}
          setPopup={setPopup}
          deleteExpense={deleteExpense}
        />
      )}
      <div className="container u-flex-vertical u-gap-12 u-cross-center">
        <h1 className="heading-level-1 font-bold">Your expenses</h1>
        <button
          className="button"
          onClick={() => setPopup({ type: "new", data: null })}
        >
          <span className="icon-plus" aria-hidden="true"></span>
          <span className="text"> New Expense</span>
        </button>
        <ExpenseList setPopup={setPopup} expenses={expenses} />
      </div>
    </>
  );
};

export default Home;
```