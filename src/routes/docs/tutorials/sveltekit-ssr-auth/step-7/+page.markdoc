---
layout: tutorial
title: OAuth2 authentication with SSR
description: Add authentication to a SvelteKit project using Appwrite.
step: 7
---

To support the OAuth2 flow, we first redirect the user to the OAuth2 provider, and then handle the callback from the OAuth2 provider.

To redirect, add a button to our sign in page that redirects the user to the OAuth2 provider.

```svelte
<!-- src/routes/sigin/+page.svelte -->

<!-- ... existing sign in form -->

<form action="/oauth2" method="post">
  <input type="hidden" name="provider" value="github" />
  <button type="submit">Sign in with GitHub</button>
</form>
```

Add a new server route to handle the redirect.

```js
// src/routes/signin/+page.server.js

// ... existing imports


import { SESSION_COOKIE, createAdminClient } from '$lib/server/appwrite';
import { redirect } from '@sveltejs/kit';

export const actions = {
    // ... existing actions

    oauth2: async (event) => {
        const formData = await event.request.formData();
        const provider = formData.get('provider') ?? 'github';

        const { account } = createAdminClient();
        const redirectURL = account.createOAuth2Token(
            provider, 
            '<YOUR_WEBSITE_DOMAIN>/oauth2',
            '<YOUR_WEBSITE_DOMAIN>/signin'
        );

        throw redirect(url);
    }
};
```

The `createOAuth2Token` method redirects the user to the OAuth2 provider, and then the OAuth2 provider redirects the user back to the `/oauth2` route with the `userId` and `secret` URL query parameters.

Handle the callback and create a session for the user. Create a new server route at `src/routes/oauth2/+server.js`:

```js
// src/routes/oauth2/+server.js

import { SESSION_COOKIE, createAdminClient } from '$lib/server/appwrite';

export async function GET(event) {
	// We should have a `userId` and `secret` query parameters in the URL
	const userId = event.url.searchParams.get('userId') as string;
	const secret = event.url.searchParams.get('secret') as string;

	// Exchange the token `userId` and `secret` for a session
	const { account } = createAdminClient();
	const session = await account.createSession(userId, secret);

	// Redirect to the account page, and set the session cookie
	const headers = new Headers({
		location: '/account',
		'set-cookie': event.cookies.serialize(SESSION_COOKIE, session.secret, {
			sameSite: 'strict',
			expires: new Date(session.expire),
			secure: true,
			path: '/'
		})
	});

	return new Response(null, { status: 302, headers });
}
```
