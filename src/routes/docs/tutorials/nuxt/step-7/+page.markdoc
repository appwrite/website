---
layout: tutorial
title: Create ideas page
description: Add database queries using Appwrite in your Nuxt app.
step: 7
---

# Create ideas page {% #create-ideas-page %}

Using the `useIdeas` composable, we can now get some ideas on the page to read and interact with.
We don't have any to show just yet, so we are going to start with adding a form to create new ones.
The form will only be visible for logged in users.

We begin with adding the `v-model` object in the `<script>` tag on `src/pages/index.vue`.
Unlike the `v-model`on the login form, the properties for the input fields will have `ref` to make them even more reactive to changes.
The difference is that we want to instantly clear the inputs when the user press the submit button.
On the login page, we redirected the user to the home page, so this was not necessary.

Defining our object, we also need to think more closely about what the database is expecting to get.
Not only does it want the title and the description, first it expects a userId.
We can't expect our user to enter that, so we will add the one we have in the user session composable.
This value does not require a `ref` since it is not a part of any other interactions.

```vue
<script>
export default {
  setup() {
    const ideas = useIdeas(); // New variable for the ideas composable
    const user = useUserSession();

    // V-model object
    const addIdeaData = {
      title: ref(""),
      description: ref(""),
    };

    // Event handler to submit form
    const handleAddIdea = async () => {
      // Extract the values from the refs and add userId
      const postIdeaData = {
        userId: user.current.value.userId,
        title: addIdeaData.title.value,
        description: addIdeaData.title.value
      }
      await ideas.add(postIdeaData);
      addIdeaData.title.value = ""; // Clears the title field
      addIdeaData.description.value = ""; // Clears the desciption field
    };

    return {
      addIdeaData,
      handleAddIdea,
      user,
    };
  },
};
</script>
```

Let's remove the header with the secret message we added in step 4 and replace it with a form.
Since the properties for the `v-model` variables are references, we use the `.value` property to get the correct information to show.

```vue
...
  <!-- Section to display for logged in users -->
    <section v-if="user.isLoggedIn.value === true" class="u-margin-32">
      <article class="box">
        <h4 class="heading-level-4">Submit Idea</h4>

        <!-- Form -->
        <form @submit.prevent="handleAddIdea" class="u-margin-block-start-16">
          <ul class="form-list">
            <li class="form-item">

              <!-- Input for title -->
              <label class="label">Title</label>
              <input
                v-model="addIdeaData.title.value"
                type="text"
                placeholder="Title"
              />
            </li>
            <li class="form-item">

              <!-- Input for description -->
              <label class="label">Description</label>
              <textarea
                v-model="addIdeaData.description.value"
                placeholder="Description"
              />
            </li>
            <button class="button" aria-label="Submit idea" type="submit">
              Submit
            </button>
          </ul>
        </form>
      </article>
    </section>

    <!-- Section to display if the user is not logged in -->
    <section v-else><p>Please login to submit an idea.</p></section>
  ...
```

The next step is to get the newly added ideas from the database and show them below the previous sections.
This section is visible to all users.
Since we need the data before any interaction has taken place on the page, like pressing a button, we have to use a function to catch the moment when the page loads.
The built-in `onMounted` function does just that.
Inside it we can call the `init()` function from the ideas composable to get the data.
Add the following to the `setup()`in the `<script>`, just underneath the `useIdeas` variable.

```vue
  setup() {
    <!-- After composable variables -->
    onMounted(() => {
      ideas.init();
    });
    ...
  }
```

Then continue with adding a new section in the template that displays the list of ideas.

```vue
  <!-- Form section -->
  ...
  <!-- New ideas section -->
  <section class="u-margin-32">
    <article class="card">
      <h4 class="heading-level-4">Latest Ideas</h4>
      <ul>
        <li v-for="idea in ideas.current.value">
          <div class="box">
            <h5 class="heading-level-6">{{ idea.title }}</h5>
            <p class="body-text-2">{{ idea.description }}</p>
          </div>
        </li>
      </ul>
    </article>
  </section>
...
```
Great, we can enter new ideas and have look at them!
It probably won't be long before a user will want to delete an idea.
We help the by adding a delete button in the top, right corner of their ideas.
First, we'll add a function to handle the event in the `setup()`.

```vue
setup() {
  ...
  // New eventhandler
  const handleRemoveIdea = async (id) => {
    await ideas.remove(id);
  };

  return {
    ...
    handleRemoveIdea, // Return the added event handler
    ...
  };
};
```

The button is added to the `div` that renders the details of an idea.

```vue
...
<div class="box">
  <h5 class="heading-level-6">{{ idea.title }}</h5>
  <p class="body-text-2">{{ idea.description }}</p>

  <!-- New div with icon button -->
  <div
    class="u-position-absolute u-inset-inline-end-8 u-inset-block-start-8"
  >
    <button
      class="button is-small is-text is-only-icon"
      aria-label="Remove item"
      <!-- Ensuring button is only displayed if a user is logged in and the id's are a match -->
      v-if="
        user.current.value &&
        idea.userId === user.current.value.userId
      "
      type="button"
      @click="handleRemoveIdea(idea.$id)"
    >
      <span class="icon-document-remove" aria-hidden="true" />
    </button>
  </div>
</div>
...
```

Just one last thing before it's all wrapped up -- the layout needs a finishing touch.
At the bottom of the file, under the closing `</script>` tag, add a style with a class to change the background color of the list of cards with a color variable.

```vue
<style>
article.box {
  background-color: hsl(var(--color-neutral-0));
}
</style>
```
