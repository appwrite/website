---
layout: tutorial
title: Create app
description: Create a Nuxt app project and integrate with Appwrite
step: 2
---

# Create Nuxt project {% #create-nuxt-project %}

Create a Nuxt app with the `npx init` command.
The command will install all the necessary dependencies for you.

```sh
npx nuxi@latest init ideas-tracker
```

# Add dependencies {% #add-dependencies %}

Once the project is created, change your current working directory and install the JavaScript Appwrite SDK.

```sh
cd ideas-tracker
npm install appwrite
```

Open the file `nuxt.config.ts`and add links to the stylesheets from the `appwrite.io/pink` to import the design system.
The design system is then ready to be used in all pages and components with auto-import, meaning that you don't have to add import statements to the scripts.

```ts
[nuxt.config.ts]

export default defineNuxtConfig({
  app: {
    head: {
      link: [
        { rel: "stylesheet", href: "https://unpkg.com/@appwrite.io/pink" },
        {
          rel: "stylesheet",
          href: "https://unpkg.com/@appwrite.io/pink-icons",
        },
      ],
    },
  },
  devtools: { enabled: true },
});
```

You can start the development server to watch your app update in the browser as you make your changes.

```sh
npm run dev
```

# File structure {% #file-structure %}

Nuxt relies on an opiniated directory structure to automate tasks and help organize the codebase.
To take advantage of this we need to add the following directories:
- components
- composables
- layouts
- pages

Create the `components` directory for our components.
We will come back to it in step 5 when adding navigation.

Add the `composables/` directory and leave it empty for now, too.
We will use it in step 4 to handle the global states and data fetching for the user authentication.

Next, create the `layouts/` directory and add the file `default.vue`.
Add the following code for the default layout.
As you see it's nearly empty but it is needed for the automatic routing to work properly.

```vue
[src/layouts/default.vue]

<template>
  <div>
    <slot />
  </div>
</template>

<script>
export default {
  layout: "default",
};
</script>
```

The last directory to add is `pages`.
This is where we will keep the content that will render on our pages in the web application.
Each file you put in here will automatically become a route.
Add the file `index.vue` to the `/pages` directory and add the following code.

```vue
[pages/index.vue]

<template>
  <div>
    <h1>Hello, idea tracker!</h1>
  </div>
</template>
```

This is what your directory should look like after adding the new directories and files:

```
[repository tree]

├── .nuxt/
├── components/
├── composables/
├── layouts/
│   └── default.vue
├── pages/
│   ├── index.vue
├── public/
│   └── /favicon.ico
├── server/
│   └── /tsconfig.json
├── .gitignore
├── app.vue
├── nuxt.config.ts
├── package-lock.json
├── package.json
├── README.md
└── tsconfig.json
```

# Render page {% #rener-page %}

If you run the development server now, it will still render the Nuxt Welcome page.
We need to tell our app to use the files we just created instead.
Open `app.vue`in the root directory and replace the content with the following code.
Your page will now be up and running.

```vue
[app.vue]

<template>
  <div>
    <NuxtLayout>
      <NuxtPage />
    </NuxtLayout>
  </div>
</template>
```
