---
layout: tutorial
title: Add authentication
description: Add authentication to your Nuxt application using Appwrite Web SDK
step: 4
---

For our ideas tracker app, we want any visitor to be able to read the ideas that are stored.
On the other hand, we don't want the page spammed with just about anything from anyone just stopping by.
To prevent that, or at least making it a bit more difficult, editing ideas will be available for logged in users only.
With a login function, we can differentiate between users and decide which users have access to which content.

We will build a page with a simple login form and store its related logic in a `useUserSession` composable so it can be reused, starting with the composable.

# User session composable {% #user-session-composable %}

There are a few standard functions involved in handling a user session that is added to the composable.
The user needs to be able to register to an account, login to the account and logout from it.

We are using Appwrite as a backend to handle the user details, so we need to connect to Appwrite by importing the configurations from step 3.
The response from these interactions will be stored as references to get more information about the user in our app.

In your `composable` directory, create the file `useUserSession.js` and add the following code.
Then you can call the  `useUserSession()` function in the pages and components to use the functionality.

```js
// composable/useUserSession.js

import { ID } from "appwrite";
import { ref } from "vue";
import { account } from "/appwrite";

const current = ref(null) // Reference to current user object
const isLoggedIn = ref(null) //Reference to check user status

export const useUserSession = () => {
  const register = async (email, password) => {
    await account.create(ID.unique(), email, password); // Register new user in Appwrite
    await login(email, password); // Login registered user
  };

  const login = async (email, password) => {
    const authUser = await account.createEmailSession(email, password); // Open user session in Appwrite
    current.value = authUser; // Pass user data to current ref
    isLoggedIn.value = true; // Set ref to true
    navigateTo("/");
  };

  const logout = async () => {
    await account.deleteSession("current"); // Delete Appwrite user session
    current.value = null; // Clear current ref
    isLoggedIn.value = false; // Set ref to false
    navigateTo("/");
  };

  return {
    current,
    isLoggedIn,
    login,
    logout,
    register,
  };
};

```
# Login page {% #login-page %}

To get the user input we will build a simple form with the logic from the `useUserSession()` composable.
The form will have two input fields, one for the user's email-address and one for the password.
Underneath will be two buttons for logging in or registering the user.

Create a new file in the `pages` directory called `login.vue`.
This will not only create a new page, it will also add the route `/login` to the url.
In step 5 we will add a loginbutton that will redirect us to this page.
Add the following code to build the form.

```vue
// pages/login.vue

<template>
  <div class="u-max-width-650" style="margin: 0 auto;">
    <section class="card u-margin-32">
      <h2 class="eyebrow-heading-2">Login/Register</h2>
      <form
        class="form u-width-full-line u-max-width-500 u-margin-block-start-16"
        @submit.prevent="handleLogin || handleRegistration"
      >
        <ul class="form-list">
          <!-- Input field e-mail -->
          <li class="form-item">
            <label class="label">Email</label>
            <div class="input-text-wrapper">
              <input
                v-model="userData.email"
                type="email"
                class="input-text"
                placeholder="Email"
                required
              />
            </div>
          </li>
          <!-- Input field e-mail -->
          <li class="form-item">
            <label class="label">Password</label>
            <div class="input-text-wrapper">
              <input
                v-model="userData.password"
                type="password"
                class="input-text"
                placeholder="Password"
                required
              />
            </div>
          </li>
        </ul>
        <ul class="buttons-list u-margin-block-start-16">
          <!-- Login button  -->
          <li class="buttons-list-item">
            <button
              class="button is-small u-margin-inline-start-4"
              aria-label="Login"
              @click="handleLogin"
            >
              Login
            </button>
          </li>
          <!-- Register button  -->
          <li class="buttons-list-item">
            <button
              class="button is-small is-secondary u-margin-inline-start-4"
              aria-label="Register account"
              @click="handleRegistration"
            >
              Register
            </button>
          </li>
        </ul>
      </form>
    </section>
  </div>
</template>

<script>
  export default {
    setup() {
      // Access user composable functions
      const user = useUserSession();

      // Store user input
      const userData = {
        email: "",
        password: "",
      };

      // Login user event handler
      const handleLogin = async () => {
        await user.login(userData.email, userData.password);
      };

      // Register user event handler
      const handleRegistration = async () => {
        await user.register(userData.email, userData.password);
      };

      return {
        handleLogin,
        handleRegistration,
        userData,
      };
    },
  };
</script>
```

Go to the browser and add `/login` to the url to check out the new page.
