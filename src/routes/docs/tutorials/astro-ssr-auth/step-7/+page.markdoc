---
layout: tutorial
title: Adding OAuth2 authentication with SSR
description: Add authentication to a Astro project using Appwrite.
step: 7
---

To support the OAuth2 flow, we first redirect the user to the OAuth2 provider, and then handle the callback from the OAuth2 provider.

To redirect, add a button to our sign in page that redirects the user to the OAuth2 provider.

```Astro
<!-- src/pages/sigin.astro -->

<!-- ... existing sign in form -->

<form action="/oauth2" method="post">
  <input type="hidden" name="provider" value="github" />
  <button type="submit">Sign in with GitHub</button>
</form>
```

Add a new POST route to handle the redirect.

```js
// src/pages/oauth.ts
import type { APIRoute } from "astro";
import { createAppwriteClient } from "../server/appwrite";

export const POST: APIRoute = async ({ request, redirect, url }) => {
  // Create the Appwrite client
  const { account } = createAppwriteClient(request);

  // Create an OAuth2 token
  const redirectUrl = await account.createOAuth2Token(
	'github',
    `${url.protocol}//${url.hostname}/oauth`,
    `${url.protocol}//${url.hostname}/sigin`
  );

  // Redirect the end-user to the OAuth2 provider authentication
  return redirect(redirectUrl);
};
```

The `createOAuth2Token` method returns a URL to the OAuth2 provider. After authentication the OAuth2 provider redirects the user back to the `/oauth2` route with the `userId` and `secret` URL query parameters.

Create a new GET route to handle the callback and create a session for the user.

```js
// src/pages/oauth.ts

// ... existing imports

import { SESSION_COOKIE } from '$lib/server/appwrite';

// ... existing code

export const GET: APIRoute = async ({ request, cookies, redirect, url }) => {
  // Extract the token data from the URL params
  const userId = url.searchParams.get("userId");
  const secret = url.searchParams.get("secret");

  // Create the Appwrite client
  const { account } = createAppwriteClient(request);

  // Exchange the token data for a session
  const session = await account.createSession(userId, secret);

  // Set the session cookie
  cookies.set(SESSION_COOKIE, session.secret, {
    sameSite: "strict",
    expires: new Date(session.expire),
    secure: true,
    httpOnly: true,
    path: "/",
  });

  // Redirect the logged in user to the account page
  return redirect("/account");
};
```
