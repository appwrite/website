---
layout: article
title: Start with Go
description: Dive into our step-by-step guide on integrating Appwrite with your Go server backend application. Get your backend up and running quickly with this tutorial.
difficulty: beginner
readtime: 5
back: /docs/quick-starts
---
Learn how to set up your first Go project powered by Appwrite.
{% section #step-1 step=1 title="Create project" %}
Head to the [Appwrite Console](https://cloud.appwrite.io/console).

If this is your first time using Appwrite, create an account and create your first project.

{% only_dark %}
![Create project screen](/images/docs/quick-starts/dark/create-project.png)
{% /only_dark %}
{% only_light %}
![Create project screen](/images/docs/quick-starts/create-project.png)
{% /only_light %}

Then, under **Integrate with your server**, add an **API Key** with the following scopes.

{% only_dark %}
![Create project screen](/images/docs/quick-starts/dark/integrate-server.png)
{% /only_dark %}
{% only_light %}
![Create project screen](/images/docs/quick-starts/integrate-server.png)
{% /only_light %}

| Category  {% width=120 %} | Required scopes       | Purpose |
|-----------|-----------------------|---------|
| Database  | `databases.write`     | Allows API key to create, update, and delete [databases](/docs/products/databases/databases). |
|           | `collections.write`   | Allows API key to create, update, and delete [collections](/docs/products/databases/collections). |
|           | `attributes.write`    | Allows API key to create, update, and delete [attributes](/docs/products/databases/collections#attributes). |
|           | `documents.read`      | Allows API key to read [documents](/docs/products/databases/documents). |
|           | `documents.write`     | Allows API key to create, update, and delete [documents](/docs/products/databases/documents). |

Other scopes are optional.

{% /section %}
{% section #step-2 step=2 title="Create Go project" %}

Create a go application.

```sh
mkdir my-app
cd my-app
go mod init go-appwrite/main
```

{% /section %}
{% section #step-3 step=3 title="Install Appwrite" %}

Install the Go Appwrite SDK.

```sh
go get github.com/appwrite/sdk-for-go@1.6.x
```

Your `go.mod` file should look like this:

```go
module go-appwrite/main

require github.com/appwrite/sdk-for-go v0.0.0-20240703150753-748203e5536c

go 1.22.5
```

If it doesn’t, go to your `go.mod` file and copy and paste the above code into the file.

Make sure your `go.sum` file looks like this:

```go
github.com/appwrite/sdk-for-go v0.0.0-20240703150753-748203e5536c h1:dT+W+Ujz5cuaEvOe8uVfy0xox8YduBJR6uECkgMOEc8=
github.com/appwrite/sdk-for-go v0.0.0-20240703150753-748203e5536c/go.mod h1:lLim0S47hdXlLet+GAayvBC7VfVxcsoSZ1F5oymXrmc=
github.com/open-runtimes/types-for-go/v4 v4.0.0 h1:eMKlziaQVPVtgs2VSi1V/grdw3iGbOca/YrHIwMNUXk=
github.com/open-runtimes/types-for-go/v4 v4.0.0/go.mod h1:88UUMYovXGRbv5keL4uTKDYMWeNtIKV0BbxDRQ18/xY=
```

If it doesn’t, go to your `go.sum` file and copy and paste the above code into the file.

{% /section %}

{% section #step-4 step=4 title="Import Appwrite" %}

Find your project ID in the **Settings** page. Also, click on the **View API Keys** button to find the API key that was created earlier.

{% only_dark %}
![Project settings screen](/images/docs/quick-starts/dark/project-id.png)
{% /only_dark %}
{% only_light %}
![Project settings screen](/images/docs/quick-starts/project-id.png)
{% /only_light %}

Create a new file called `app.go`, initialize a function, and initialize the Appwrite Client. Replace `<YOUR_PROJECT_ID>` with your project ID and `<YOUR_API_KEY>` with your API key.

```go
package main

import (
	"fmt"

	"github.com/appwrite/sdk-for-go/client"
	"github.com/appwrite/sdk-for-go/databases"
)

func initClient() {
	appwriteClient := client.NewClient()
	appwriteClient.SetProject("<PROJECT_ID>")
	appwriteClient.SetKey("<API_KEY>")
}
```

{% /section %}
{% section #step-5 step=5 title="Initialize database" %}

Once the Appwrite Client is initialized, create a function to configure a todo collection.

```go
package main

import (
	"fmt"

	"github.com/appwrite/sdk-for-go/client"
	"github.com/appwrite/sdk-for-go/databases"
)

func main() {
	appwriteClient := client.NewClient()
	appwriteClient.SetProject("<PROJECT_ID>")
	appwriteClient.SetKey("<API_KEY>")

	appwriteDatabases := databases.NewDatabases(appwriteClient)

    database, err := appwriteDatabases.Create(
        "unique()", 
        "TodosDB"
    )

    if err != nil {
		fmt.Println(err)
		return
    }

    collection, err := appwriteDatabases.CreateCollection(
	    database.Id,
	    "unique()",
	    "Todos"
    )

	if err != nil {
		fmt.Println(err)
		return
	}
}
```

Then, initialize a function to create your attributes.

```go
func todoCollection(appwriteDatabases *databases.Databases, database *models.Database, collection *models.Collection) {
	attribute1, err := appwriteDatabases.CreateStringAttribute(
		database.Id,
		collection.Id,
		"title",
		255,
		true,
	)

	fmt.Println(attribute1)

	if err != nil {
		fmt.Println(err)
		return
	}

	attribute2, err := appwriteDatabases.CreateStringAttribute(
		database.Id,
		collection.Id,
		"description",
		255,
		false,
	)

	fmt.Println(attribute2)

	if err != nil {
		fmt.Println(err)
		return
	}

	attribute3, err := appwriteDatabases.CreateBooleanAttribute(
		database.Id,
		collection.Id,
		"isComplete",
		true,
	)

	fmt.Println(attribute3)

	if err != nil {
		fmt.Println(err)
		return
	}
}
```

{% /section %}
{% section #step-6 step=6 title="Add documents" %}
Create a function to add some mock data to your new collection.

```go
func seedDatabase(appwriteDatabases *databases.Databases, database *models.Database, collection *models.Collection) {
	testTodo1 := map[string]interface{}{
		"title":       "Buy apples",
		"description": "At least 2KGs",
		"isComplete":  true,
	}

	testTodo2 := map[string]interface{}{
		"title":      "Wash the apples",
		"isComplete": true,
	}

	testTodo3 := map[string]interface{}{
		"title":       "Cut the apples",
		"description": "Don't forget to pack them in a box",
		"isComplete":  false,
	}

	createDocument1, err := appwriteDatabases.CreateDocument(
		database.Id,
		collection.Id,
		"unique()",
		testTodo1,
	)

	fmt.Println(createDocument1)

	if err != nil {
		fmt.Println(err)
		return
	}

	createDocument2, err := appwriteDatabases.CreateDocument(
		database.Id,
		collection.Id,
		"unique()",
		testTodo2,
	)

	fmt.Println(createDocument2)

	if err != nil {
		fmt.Println(err)
		return
	}

	createDocument3, err := appwriteDatabases.CreateDocument(
		database.Id,
		collection.Id,
		"unique()",
		testTodo3,
	)

	fmt.Println(createDocument3)

	if err != nil {
		fmt.Println(err)
		return
	}
}
```

{% /section %}
{% section #step-7 step=7 title="Retrieve documents" %}

Create a function to retrieve the mock todo data.

```go
func getTodos(appwriteDatabases *databases.Databases, database *models.Database, collection *models.Collection) {
	todo, err := appwriteDatabases.ListDocuments(
		database.Id,
		collection.Id,
		databases.WithListDocumentsQueries([]interface{}{}),
	)

	if err != nil {
		fmt.Println(err)
		return
	}

	fmt.Println(todo)
}
```

Make sure to update `main()` with the functions you created. Your `main()` function should look something like this:

```go
func main() {

	appwriteClient := client.NewClient()
	appwriteClient.SetProject("<PROJECT_ID>")
	appwriteClient.SetKey("<API_KEY>")

	appwriteDatabases := databases.NewDatabases(appwriteClient)

	database, err := appwriteDatabases.Create("unique()", "TodosDB")

	if err != nil {
		fmt.Println(err)
		return
	}

	collection, err := appwriteDatabases.CreateCollection(
		database.Id,
		"unique()",
		"Todos")

	if err != nil {
		fmt.Println(err)
		return
	}

	todoCollection(appwriteDatabases, database, collection)
	seedDatabase(appwriteDatabases, database, collection)
	getTodos(appwriteDatabases, database, collection)
}
```

{% /section %}

{% section #step-8 step=8 title="All set" %}

Run your project with `go run .` and view the response in your console.

{% /section %}