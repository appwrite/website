---
layout: article
title: Start with Go
description: Dive into our step-by-step guide on integrating Appwrite with your Go server backend application. Get your backend up and running quickly with this tutorial.
difficulty: beginner
readtime: 5
back: /docs/quick-starts
---
Learn how to setup your first Go project powered by Appwrite.
{% section #step-1 step=1 title="Create project" %}
Head to the [Appwrite Console](https://cloud.appwrite.io/console).

If this is your first time using Appwrite, create an account and create your first project.

{% only_dark %}
![Create project screen](/images/docs/quick-starts/dark/create-project.png)
{% /only_dark %}
{% only_light %}
![Create project screen](/images/docs/quick-starts/create-project.png)
{% /only_light %}

Then, under **Integrate with your server**, add an **API Key** with the following scopes.

{% only_dark %}
![Create project screen](/images/docs/quick-starts/dark/integrate-server.png)
{% /only_dark %}
{% only_light %}
![Create project screen](/images/docs/quick-starts/integrate-server.png)
{% /only_light %}

| Category  {% width=120 %} | Required scopes       | Purpose |
|-----------|-----------------------|---------|
| Database  | `databases.write`     | Allows API key to create, update, and delete [databases](/docs/products/databases/databases). |
|           | `collections.write`   | Allows API key to create, update, and delete [collections](/docs/products/databases/collections). |
|           | `attributes.write`    | Allows API key to create, update, and delete [attributes](/docs/products/databases/collections#attributes). |
|           | `documents.read`      | Allows API key to read [documents](/docs/products/databases/documents). |
|           | `documents.write`     | Allows API key to create, update, and delete [documents](/docs/products/databases/documents). |

Other scopes are optional.

{% /section %}
{% section #step-2 step=2 title="Create Node.js project" %}
Create a Go CLI application.

On Linux or Mac:

cd
On Windows:

cd %HOMEPATH%

```sh
Create a go.mod file `go mod init go-appwrite/main`
Install appwrite dependencies. `go get github.com/appwrite/sdk-for-go v0.0.0-20240703150753-748203e5536c`
```
Go.mod file should look like this: 
https://github.com/choir27/go-appwrite/blob/main/Account/createAccount/go.mod

Make sure your go.sum file looks like this: https://github.com/choir27/go-appwrite/blob/main/Account/createAccount/go.sum If it doesnâ€™t, create a go.sum file, copy and paste the above code into the file


{% /section %}
{% section #step-3 step=3 title="Install Appwrite" %}

Install the Go Appwrite SDK.

```sh
go get github.com/appwrite/sdk-for-go v0.0.0-20240703150753-748203e5536c
```
{% /section %}
{% section #step-4 step=4 title="Import Appwrite" %}

Find your project ID in the **Settings** page. Also, click on the **View API Keys** button to find the API key that was created earlier.

{% only_dark %}
![Project settings screen](/images/docs/quick-starts/dark/project-id.png)
{% /only_dark %}
{% only_light %}
![Project settings screen](/images/docs/quick-starts/project-id.png)
{% /only_light %}

Create a new file `app.go` and initialize the Appwrite Client. Replace `<YOUR_PROJECT_ID>` with your project ID and `<YOUR_API_KEY>` with your API key.

```go
package main

import (
	"fmt"

	"github.com/appwrite/sdk-for-go/client"
	"github.com/appwrite/sdk-for-go/databases"
)

appwriteClient := client.NewClient()
appwriteClient.SetProject("<PROJECT_ID>")
appwriteClient.SetKey("<API_KEY>")
```

{% /section %}
{% section #step-5 step=5 title="Initialize database" %}

Once the Appwrite Client is initialized, create a function to configure a todo collection.

```go
package main

import (
	"fmt"
	"log"

	// Assuming "sdk" is the package name where Databases and other related functions are defined
	"sdk"
)

var (
	client         *sdk.Client
	databases      *sdk.Databases
	todoDatabase   *sdk.Database
	todoCollection *sdk.Collection
)

func prepareDatabase() {
	var err error

	// Create a new database instance
	todoDatabase, err = databases.CreateDatabase(client, sdk.UniqueID(), "TodosDB")
	if err != nil {
		log.Fatalf("Failed to create database: %v", err)
	}

	// Create a new collection in the database
	todoCollection, err = databases.CreateCollection(todoDatabase.ID, sdk.UniqueID(), "Todos")
	if err != nil {
		log.Fatalf("Failed to create collection: %v", err)
	}

	// Create a string attribute for the title
	err = databases.CreateStringAttribute(todoDatabase.ID, todoCollection.ID, "title", 255, true)
	if err != nil {
		log.Fatalf("Failed to create string attribute for title: %v", err)
	}

	// Create a string attribute for the description
	err = databases.CreateStringAttribute(todoDatabase.ID, todoCollection.ID, "description", 255, false, "This is a test description")
	if err != nil {
		log.Fatalf("Failed to create string attribute for description: %v", err)
	}

	// Create a boolean attribute for isComplete
	err = databases.CreateBooleanAttribute(todoDatabase.ID, todoCollection.ID, "isComplete", true)
	if err != nil {
		log.Fatalf("Failed to create boolean attribute for isComplete: %v", err)
	}
}

func main() {
	client = sdk.NewClient("your-api-key", "your-api-endpoint")
	databases = sdk.NewDatabases(client)

	prepareDatabase()
	fmt.Println("Database and collection setup complete.")
}
```

{% /section %}
{% section #step-6 step=6 title="Add documents" %}
Create a function to add some mock data into your new collection.

```js
async function seedDatabase() {
    var testTodo1 = {
        title: 'Buy apples',
        description: 'At least 2KGs',
        isComplete: true
    };

    var testTodo2 = {
        title: 'Wash the apples',
        isComplete: true
    };

    var testTodo3 = {
        title: 'Cut the apples',
        description: 'Don\'t forget to pack them in a box',
        isComplete: false
    };

    await databases.createDocument(
        todoDatabase.$id,
        todoCollection.$id,
        sdk.ID.unique(),
        testTodo1
    );
    await databases.createDocument(
        todoDatabase.$id,
        todoCollection.$id,
        sdk.ID.unique(),
        testTodo2
    );
    await databases.createDocument(
        todoDatabase.$id,
        todoCollection.$id,
        sdk.ID.unique(),
        testTodo3
    );
}
```

{% /section %}
{% section #step-7 step=7 title="Retrieve documents" %}

Create a function to retrieve the mock todo data and a function to execute the requests in order.
Run the functions to by calling `runAllTasks();`.

```js
async function getTodos() {
    var todos = await databases.listDocuments(
        todoDatabase.$id,
        todoCollection.$id
    );

    todos.documents.forEach(todo => {
        console.log(`Title: ${todo.title}\nDescription: ${todo.description}\nIs Todo Complete: ${todo.isComplete}\n\n`);
    });
}

async function runAllTasks() {
    await prepareDatabase();
    await seedDatabase();
    await getTodos();
}
runAllTasks();
```

{% /section %}

{% section #step-8 step=8 title="All set" %}

Run your project with `node app.js` and view the response in your console.

{% /section %}