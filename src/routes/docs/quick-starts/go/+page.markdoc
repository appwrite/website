---
layout: article
title: Start with Go
description: Dive into our step-by-step guide on integrating Appwrite with your Go server backend application. Get your backend up and running quickly with this tutorial.
difficulty: beginner
readtime: 5
back: /docs/quick-starts
---
Learn how to set up your first Go project powered by Appwrite.
{% section #step-1 step=1 title="Create project" %}
Head to the [Appwrite Console](https://cloud.appwrite.io/console).

If this is your first time using Appwrite, create an account and create your first project.

{% only_dark %}
![Create project screen](/images/docs/quick-starts/dark/create-project.png)
{% /only_dark %}
{% only_light %}
![Create project screen](/images/docs/quick-starts/create-project.png)
{% /only_light %}

Then, under **Integrate with your server**, add an **API Key** with the following scopes.

{% only_dark %}
![Create project screen](/images/docs/quick-starts/dark/integrate-server.png)
{% /only_dark %}
{% only_light %}
![Create project screen](/images/docs/quick-starts/integrate-server.png)
{% /only_light %}

| Category  {% width=120 %} | Required scopes       | Purpose |
|-----------|-----------------------|---------|
| Database  | `databases.write`     | Allows API key to create, update, and delete [databases](/docs/products/databases/databases). |
|           | `collections.write`   | Allows API key to create, update, and delete [collections](/docs/products/databases/collections). |
|           | `attributes.write`    | Allows API key to create, update, and delete [attributes](/docs/products/databases/collections#attributes). |
|           | `documents.read`      | Allows API key to read [documents](/docs/products/databases/documents). |
|           | `documents.write`     | Allows API key to create, update, and delete [documents](/docs/products/databases/documents). |

Other scopes are optional.

{% /section %}
{% section #step-2 step=2 title="Create Go project" %}

Create a go application.

```sh
mkdir my-app
cd my-app
go mod init go-appwrite/main
```

{% /section %}
{% section #step-3 step=3 title="Install Appwrite" %}

Install the Go Appwrite SDK.

```sh
go get github.com/appwrite/sdk-for-go
```

{% /section %}

{% section #step-4 step=4 title="Import Appwrite" %}

Find your project ID in the **Settings** page. Also, click on the **View API Keys** button to find the API key that was created earlier.

{% only_dark %}
![Project settings screen](/images/docs/quick-starts/dark/project-id.png)
{% /only_dark %}
{% only_light %}
![Project settings screen](/images/docs/quick-starts/project-id.png)
{% /only_light %}

Create a new file called `app.go`, initialize a function, and initialize the Appwrite Client. Replace `<YOUR_PROJECT_ID>` with your project ID and `<YOUR_API_KEY>` with your API key. Import the Appwrite dependencies for appwrite, client, databases, and models.

```go
package main

import (
	"github.com/appwrite/sdk-for-go/appwrite"
	"github.com/appwrite/sdk-for-go/client"
	"github.com/appwrite/sdk-for-go/databases"
	"github.com/appwrite/sdk-for-go/models"
)

var (
	appwriteClient    client.Client
	todoDatabase      *models.Database
	todoCollection    *models.Collection
	appwriteDatabases *databases.Databases
)

func main() {
	appwriteClient = appwrite.NewClient(
		appwrite.WithProject("<PROJECT_KEY>"),
		appwrite.WithKey("<API_KEY>"),
	)
}
```

{% /section %}
{% section #step-5 step=5 title="Initialize database" %}

Once the Appwrite Client is initialized, create a function to configure a todo collection. Import the id Appwrite dependency by adding `"github.com/appwrite/sdk-for-go/id"` to the imported dependencies list.

```go
func prepareDatabase() {
	appwriteDatabases = appwrite.NewDatabases(appwriteClient)

	todoDatabase, _ = appwriteDatabases.Create(
		id.Unique(),
		"TodosDB",
	)

	todoCollection, _ = appwriteDatabases.CreateCollection(
		todoDatabase.Id,
		id.Unique(),
		"Todos",
	)

	appwriteDatabases.CreateStringAttribute(
		todoDatabase.Id,
		todoCollection.Id,
		"title",
		255,
		true,
	)

	appwriteDatabases.CreateStringAttribute(
		todoDatabase.Id,
		todoCollection.Id,
		"description",
		255,
		false,
	)

	appwriteDatabases.CreateBooleanAttribute(
		todoDatabase.Id,
		todoCollection.Id,
		"isComplete",
		true,
	)
}
```

{% /section %}
{% section #step-6 step=6 title="Add documents" %}
Create a function to add some mock data to your new collection.

```go
func seedDatabase() {
	testTodo1 := map[string]interface{}{
		"title":       "Buy apples",
		"description": "At least 2KGs",
		"isComplete":  true,
	}

	testTodo2 := map[string]interface{}{
		"title":      "Wash the apples",
		"isComplete": true,
	}

	testTodo3 := map[string]interface{}{
		"title":       "Cut the apples",
		"description": "Don't forget to pack them in a box",
		"isComplete":  false,
	}

	appwriteDatabases.CreateDocument(
		todoDatabase.Id,
		todoCollection.Id,
		id.Unique(),
		testTodo1,
	)

	appwriteDatabases.CreateDocument(
		todoDatabase.Id,
		todoCollection.Id,
		id.Unique(),
		testTodo2,
	)

	appwriteDatabases.CreateDocument(
		todoDatabase.Id,
		todoCollection.Id,
		id.Unique(),
		testTodo3,
	)
}
```

{% /section %}
{% section #step-7 step=7 title="Retrieve documents" %}

Create a function to retrieve the mock todo data.

```go
type Todo struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	IsComplete  bool   `json:"isComplete"`
}

type TodoList struct {
	*models.DocumentList
	Documents []Todo `json:"documents"`
}

func getTodos() {
	todoResponse, _ := appwriteDatabases.ListDocuments(
		todoDatabase.Id,
		todoCollection.Id,
	)

	var todos TodoList
	todoResponse.Decode(&todos)

	for _, todo := range todos.Documents {
		fmt.Printf("Title: %s\nDescription: %s\nIs Todo Complete: %t\n\n", todo.Title, todo.Description, todo.IsComplete)
	}
}
```

Make sure to update `main()` with the functions you created. Your `main()` function should look something like this:

```go
package main

import (
	"fmt"

	"github.com/appwrite/sdk-for-go/appwrite"
	"github.com/appwrite/sdk-for-go/client"
	"github.com/appwrite/sdk-for-go/databases"
	"github.com/appwrite/sdk-for-go/id"
	"github.com/appwrite/sdk-for-go/models"
)

var (
	appwriteClient    client.Client
	todoDatabase      *models.Database
	todoCollection    *models.Collection
	appwriteDatabases *databases.Databases
)

func main() {
	appwriteClient = appwrite.NewClient(
		appwrite.WithProject("<PROJECT_KEY>"),
		appwrite.WithKey("<API_KEY>"),
	)

	prepareDatabase()
	seedDatabase()
	getTodos()
}
```

{% /section %}

{% section #step-8 step=8 title="All set" %}

Run your project with `go run .` and view the response in your console.

{% /section %}