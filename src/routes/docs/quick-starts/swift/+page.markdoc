---
layout: article
title: Start with Swift
description: Learn to get started with server integrations with Appwrite Swift SDK.
difficulty: beginner
readtime: 5
back: /docs/quick-starts
---
Learn how to setup your first Swift project powered by Appwrite.

{% info title="Server SDK" %}
This tutorial is for the Swift Server SDK, meant for server and backend applications.
If you're trying to build a client-side app, like an iOS, macOS, watchOS or tvOS app, 
follow the [Start with Apple guide](https://appwrite.io/docs/quick-starts/apple).
{% /info %}

{% section #step-1 step=1 title="Create project" %}
Head to the [Appwrite Console](https://cloud.appwrite.io/console).

If this is your first time using Appwrite, create an account and create your first project.

{% only_dark %}
![Create project screen](/images/docs/quick-starts/dark/create-project.png)
{% /only_dark %}
{% only_light %}
![Create project screen](/images/docs/quick-starts/create-project.png)
{% /only_light %}

Then, under **Integrate with your server**, add an **API Key** with the following scopes.

{% only_dark %}
![Server integrations](/images/docs/quick-starts/dark/integrate-server.png)
{% /only_dark %}
{% only_light %}
![Server integrations](/images/docs/quick-starts/integrate-server.png)
{% /only_light %}
| Category  {% width=120 %} | Required scopes       | Purpose |
|-----------|-----------------------|---------|
| Database  | `databases.write`     | Allows API key to create, update, and delete [databases](/docs/products/databases/databases). |
|           | `collections.write`   | Allows API key to create, update, and delete [collections](/docs/products/databases/collections). |
|           | `attributes.write`    | Allows API key to create, update, and delete [attributes](/docs/products/databases/collections#attributes). |
|           | `documents.read`      | Allows API key to read [documents](/docs/products/databases/documents). |
|           | `documents.write`     | Allows API key to create, update, and delete [documents](/docs/products/databases/documents). |

Other scopes are optional.

{% only_dark %}
![Project settings screen](/images/docs/quick-starts/dark/project-id.png)
{% /only_dark %}
{% only_light %}
![Project settings screen](/images/docs/quick-starts/project-id.png)
{% /only_light %}

{% /section %}
{% section #step-2 step=2 title="Create Swift project" %}
Create a Swift CLI application by opening **XCode** > **Create a new XCode project**
> **macOS** > **Command Line Tool**.

Follow the wizard and open your new project.

{% /section %}
{% section #step-3 step=3 title="Install Appwrite" %}

Install the Swift Appwrite SDK by going to **File** > **Add Packages...** and search for the repo url 
`https://github.com/appwrite/sdk-for-swift` and select `sdk-for-swift`.

{% /section %}
{% section #step-4 step=4 title="Import Appwrite" %}

Find your project ID in the **Settings** page. Also, click on the **View API Keys** button to find the API key that was created earlier. 

{% only_dark %}
![Project settings screen](/images/docs/quick-starts/dark/project-id.png)
{% /only_dark %}
{% only_light %}
![Project settings screen](/images/docs/quick-starts/project-id.png)
{% /only_light %}

Open the file `main.swift` and initialize the Appwrite Client. Replace `<YOUR_PROJECT_ID>` with your project ID and `<YOUR_API_KEY>` with your API key.

```swift
import Foundation
import Appwrite
import AppwriteModels

let client = Client()
    .setEndpoint("https://cloud.appwrite.io/v1")
    .setProject("<YOUR_PROJECT_ID>")
    .setKey("<YOUR_API_KEY>")
```

{% /section %}
{% section #step-5 step=5 title="Initialize database" %}

Once the Appwrite Client is initialized, create a function to configure a todo collection.

```swift
let databases = Databases(client)

func prepareDatabase() async -> (Database?, Collection?) {
    let todoDatabase = try? await databases.create(
        databaseId: ID.unique(),
        name: "TodosDB"
    )
    let todoCollection = try? await databases.createCollection(
        databaseId: todoDatabase!.id,
        collectionId: ID.unique(),
        name: "Todos"
    )
    try? await databases.createStringAttribute(
        databaseId: todoDatabase!.id,
        collectionId: todoCollection!.id,
        key: "title",
        size: 255,
        xrequired: true
    )
    try? await databases.createStringAttribute(
        databaseId: todoDatabase!.id as! String,
        collectionId: todoCollection!.id as! String,
        key: "description",
        size: 255,
        xrequired: false,
        xdefault: "This is a test description."
    )
    try? await databases.createBooleanAttribute(
        databaseId: todoDatabase!.id as! String,
        collectionId: todoCollection!.id as! String,
        key: "isComplete",
        xrequired: true
    )
    
    return (todoDatabase, todoCollection)
}
```

{% /section %}
{% section #step-6 step=6 title="Add documents" %}
Create a function to add some mock data into your new collection.
```swift
func seedDatabase(todoDatabase: Database?, todoCollection: Collection?) async {
    let testTodo1: [String: Any] = [
        "title": "Buy apples",
        "description": "At least 2KGs",
        "isComplete": true
    ]

    let testTodo2: [String: Any] = [
        "title": "Wash the apples",
        "isComplete": true
    ]

    let testTodo3: [String: Any] = [
        "title": "Cut the apples",
        "description": "Don't forget to pack them in a box",
        "isComplete": false
    ]

    try? await databases.createDocument(
        databaseId: todoDatabase!.id,
        collectionId: todoCollection!.id,
        documentId: ID.unique(), 
        data: testTodo1
    )
    try? await databases.createDocument(
        databaseId: todoDatabase!.id,
        collectionId: todoCollection!.id,
        documentId: ID.unique(), 
        data: testTodo2
    )
    try? await databases.createDocument(
        databaseId: todoDatabase!.id,
        collectionId: todoCollection!.id,
        documentId: ID.unique(),
        data: testTodo3
    )
}
```

{% /section %}
{% section #step-7 step=7 title="Retrieve documents" %}

Create a function to retrieve the mock todo data.

```swift
func getTodos(todoDatabase: Database?, todoCollection: Collection?) async {
    let todos = try? await databases.listDocuments(
        databaseId: todoDatabase!.id as! String,
        collectionId: todoCollection!.id as! String
    )
    for document in todos?.documents ?? [] {
        if let todo = document.data as? [String: Any] {
            print("Title: \(todo["title"] ?? "")\n"
                + "Description: \(todo["description"] ?? "")\n"
                + "Is Todo Complete: \(todo["isComplete"] ?? "")\n\n"
            )
        }
    }
}

let (todoDatabase, todoCollection) = await prepareDatabase()
await seedDatabase(todoDatabase: todoDatabase, todoCollection: todoCollection)
await getTodos(todoDatabase: todoDatabase, todoCollection: todoCollection)
```

{% /section %}

{% section #step-8 step=8 title="All set" %}

Run your project with XCode and see the results in the console.

{% /section %}