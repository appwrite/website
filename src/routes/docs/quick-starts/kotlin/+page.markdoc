---
layout: article
title: Start with Kotlin
description: Learn to get started with server integrations with Appwrite Kotlin SDK.
difficulty: beginner
readtime: 5
back: /docs/quick-starts
---
Learn how to setup your first Kotlin project powered by Appwrite.
{% section #step-1 step=1 title="Create project" %}
Head to the [Appwrite Console](https://cloud.appwrite.io/console).

{% info title="Server SDK" %}
This tutorial is for the Swift Server SDK, meant for server and backend applications.
If you're trying to build a client-side app, like an Android app,
follow the [Start with Android guide](https://appwrite.io/docs/quick-starts/android).
{% /info %}

If this is your first time using Appwrite, create an account and create your first project.

{% only_dark %}
![Create project screen](/images/docs/quick-starts/dark/create-project.png)
{% /only_dark %}
{% only_light %}
![Create project screen](/images/docs/quick-starts/create-project.png)
{% /only_light %}

Then, under **Integrate with your server**, add an **API Key** with the following scopes.

{% only_dark %}
![Server integrations](/images/docs/quick-starts/dark/integrate-server.png)
{% /only_dark %}
{% only_light %}
![Server integrations](/images/docs/quick-starts/integrate-server.png)
{% /only_light %}
| Category  {% width=120 %} | Required scopes       | Purpose |
|-----------|-----------------------|---------|
| Database  | `databases.write`     | Allows API key to create, update, and delete [databases](/docs/products/databases/databases). |
|           | `collections.write`   | Allows API key to create, update, and delete [collections](/docs/products/databases/collections). |
|           | `attributes.write`    | Allows API key to create, update, and delete [attributes](/docs/products/databases/collections#attributes). |
|           | `documents.read`      | Allows API key to create, update, and delete [documents](/docs/products/databases/documents). |
|           | `documents.write`     | Allows API key to read [documents](/docs/products/databases/documents). |

Other scopes are optional.

{% only_dark %}
![Project settings screen](/images/docs/quick-starts/dark/project-id.png)
{% /only_dark %}
{% only_light %}
![Project settings screen](/images/docs/quick-starts/project-id.png)
{% /only_light %}

{% /section %}
{% section #step-2 step=2 title="Create Kotlin project" %}
Create a Kotlin application by opening **IntelliJ IDEA** > **New Project** and create a **Kotlin** application.
This quick start will use **Gradle** as the build system, but you can follow with Maven or IntelliJ if you're more comfortable.

Follow the wizard and open your new project. 

{% /section %}
{% section #step-3 step=3 title="Install Appwrite" %}
Open you `build.gradle.kts` file and implement the following dependency.

```groovy
dependencies {
    ... other dependencies
    implementation("io.appwrite:sdk-for-kotlin:4.1.0")
}
```

{% /section %}
{% section #step-4 step=4 title="Import Appwrite" %}

Find your project ID in the **Settings** page. Also, click on the **View API Keys** button to find the API key that was created earlier. 

{% only_dark %}
![Project settings screen](/images/docs/quick-starts/dark/project-id.png)
{% /only_dark %}
{% only_light %}
![Project settings screen](/images/docs/quick-starts/project-id.png)
{% /only_light %}

Open the file `Main.kt` and initialize the Appwrite Client. Replace `<YOUR_PROJECT_ID>` with your project ID and `<YOUR_API_KEY>` with your API key.

```kotlin
import io.appwrite.Client
import io.appwrite.services.Databases
import io.appwrite.models.Database as DatabaseModel
import io.appwrite.models.Collection
import kotlinx.coroutines.runBlocking
import java.util.UUID
val client = Client()
    .SetEndpoint("https://cloud.appwrite.io/v1")
    .SetProject("<YOUR_PROJECT_ID>")
    .SetKey("<YOUR_API_KEY>");
```

{% /section %}
{% section #step-5 step=5 title="Initialize database" %}

Once the Appwrite Client is initialized, create a function to configure a todo collection.

```kotlin
val databases = Databases(client)

var todoDatabase: DatabaseModel? = null
var todoCollection: Collection? = null

fun prepareDatabase() = runBlocking {
    todoDatabase = databases.create(UUID.randomUUID().toString(), "TodosDB")
    todoCollection = databases.createCollection(todoDatabase?.id!!, UUID.randomUUID().toString(), "Todos")

    databases.createStringAttribute(todoDatabase?.id!!, todoCollection?.id!!, "title", 255, true)
    databases.createStringAttribute(todoDatabase?.id!!, todoCollection?.id!!, "description", 255, false, "This is a test description.")
    databases.createBooleanAttribute(todoDatabase?.id!!, todoCollection?.id!!, "isComplete", true)
}
```

{% /section %}
{% section #step-6 step=6 title="Add documents" %}
Create a function to add some mock data into your new collection.
```kotlin
fun seedDatabase() = runBlocking {
    val testTodo1 = mapOf(
        "title" to "Buy apples",
        "description" to "At least 2KGs",
        "isComplete" to true
    )

    val testTodo2 = mapOf(
        "title" to "Wash the apples",
        "isComplete" to true
    )

    val testTodo3 = mapOf(
        "title" to "Cut the apples",
        "description" to "Don't forget to pack them in a box",
        "isComplete" to false
    )

    databases.createDocument(todoDatabase?.id!!, todoCollection?.id!!, UUID.randomUUID().toString(), testTodo1)
    databases.createDocument(todoDatabase?.id!!, todoCollection?.id!!, UUID.randomUUID().toString(), testTodo2)
    databases.createDocument(todoDatabase?.id!!, todoCollection?.id!!, UUID.randomUUID().toString(), testTodo3)
}
```

{% /section %}
{% section #step-7 step=7 title="Retrieve documents" %}

Create a function to retrieve the mock todo data.

```kotlin
fun getTodos() = runBlocking {
    val todos = databases.listDocuments(todoDatabase?.id!!, todoCollection?.id!!)
    for (todo in todos.documents) {
        println("Title: ${todo.data["title"]}\nDescription: ${todo.data["description"]}\nIs Todo Complete: ${todo.data["isComplete"]}\n\n")
    }
}

fun main() {
    prepareDatabase()
    seedDatabase()
    getTodos()
}
```

{% /section %}

{% section #step-8 step=8 title="All set" %}

Run your project with IntelliJ and view the response in your console.

{% /section %}