---
layout: article
title: Integrating ElevenLabs into Appwrite
description: Learn how to integrate ElevenLabs into your Appwrite project.
difficulty: intermediate
readtime: 15
back: /docs/products/ai/audio-processing
---

ElevenLabs is an text to speech tool that can generate natural sounding audio from text. It's an excellent tool for dubbing content, creating audiobooks, or even for accessibility purposes.

Integrating ElevenLabs into your Appwrite project is simple. This tutorial will guide you through the process of setting up the ElevenLabs API and integrating it into your Appwrite project.

## Prerequisites
- An Appwrite Project
- An ElevenLabs API Key

{% section #step-1 step=1 title="Create new function" %}
Head to the [Appwrite Console](https://cloud.appwrite.io/console) then click on **Functions** in the left sidebar and then click on the **Create Function** button.

{% only_dark %}
![Create function screen](/images/docs/functions/dark/template.png)
{% /only_dark %}
{% only_light %}
![Create function screen](/images/docs/functions/template.png)
{% /only_light %}

1. In the Appwrite Console's sidebar, click **Functions**.
2. Click **Create function**.
3. Under **Connect Git repository**, select your provider.
4. After connecting to GitHub, under **Quick start**, select the **Node.js** starter template.
5. In the **Variables** step, tick the box to **Generate API key on completion**.
6. Follow the step-by-step wizard and create the function.
{% /section %}

{% section #step-2 step=2 title="Add Fetch" %}
Once your function is created, navigate to the freshly created repository and either clone it to your local machine or launch a GitHub Codespace.

Since we're going to be making requests to the ElevenLabs API and fetch isn't included in the current NodeJS 18 Runtime, we're going to install the `node-fetch` package.
We're also going to install the `node-appwrite` package so we can upload the generated audio file to Appwrite Storage.
```bash
npm install node-fetch node-appwrite
```
{% /section %}

{% section #step-3 step=3 title="Create utility functions" %}
For our example, our function will be able to take both `GET` and `POST` requests.

For the `GET` request we will return a static HTML page we'll write later that will use AlpineJS to make a `POST` request to our function and the `POST` request will return the ElevenLabs audio stored in Appwrite Storage.

To begin with we will write the code to return the static HTML page, to do this we'll create a new `src/utils.js` file with the following code:

```js
import path from 'path';
import { fileURLToPath } from 'url';
import fs from 'fs';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const staticFolder = path.join(__dirname, '../static');

/**
 * Returns the contents of a file in the static folder
 * @param {string} fileName
 * @returns {string} Contents of static/{fileName}
 */
export function getStaticFile(fileName) {
  return fs.readFileSync(path.join(staticFolder, fileName)).toString();
}
```

By separating the `getStaticFile()` function into a `utils.js` file, we can easily reuse this function in other parts of our function if we extend on top of this.

While we're at it, we're also going to create a `throwIfMissing()` function in the same file which we'll use later to validate body and environment variables:

```js
/**
 * Throws an error if any of the keys are missing from the object
 * @param {*} obj
 * @param {string[]} keys
 * @throws {Error}
 */
export function throwIfMissing(obj, keys) {
  const missing = [];
  for (let key of keys) {
    if (!(key in obj) || !obj[key]) {
      missing.push(key);
    }
  }
  if (missing.length > 0) {
    throw new Error(`Missing required fields: ${missing.join(', ')}`);
  }
}
```
{% /section %}

{% section #step-4 step=4 title="Handle GET request" %}
We're going to write our `GET` request handler in the `src/main.js` file. This handler will return a static HTML page we'll create later.

```js
import { getStaticFile, throwIfMissing } from './utils.js';

export default async ({ req, res, error }) => {
  throwIfMissing(process.env, [
    "ELEVENLABS_API_KEY",
    "APPWRITE_API_KEY",
    "APPWRITE_BUCKET_ID",
  ]);

  if (req.method === 'GET') {
    return res.send(getStaticFile('index.html'), 200, {
      'Content-Type': 'text/html; charset=utf-8',
    });
  }
};
```

Notice we also added a check to ensure that the `ELEVENLABS_API_KEY`, `APPWRITE_API_KEY` and `APPWRITE_BUCKET_ID` environment variables is set.
{% /section %}

{% section #step-5 step=5 title="Create static page" %}
Now we need to create the static HTML page that our function will serve. Create a new `static` folder in the root of your project and add an `index.html` with some html boilerplate:
```html
<!doctype html>
<html lang="en">
</html>
```

Within the `<html>` tag, we're going to add a `<head>` tag that will define our style and scripts.
```html
<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>ElevenLabs Demo</title>

  <script>
    async function onSubmit(prompt) {
      const response = await fetch('/', {
        method: 'POST',
        body: JSON.stringify({ text: prompt }),
        headers: {
          'Content-Type': 'application/json',
        },
      });

      const json = await response.json();

      if (!json.ok || json.error) {
        alert(json.error);
      }

      return json.response;
    }
  </script>

  <script src="//unpkg.com/alpinejs" defer></script>

  <link rel="stylesheet" href="https://unpkg.com/@appwrite.io/pink" />
  <link rel="stylesheet" href="https://unpkg.com/@appwrite.io/pink-icons" />
</head>
```

And after the `</head>` tag we're going to add our `<body>` which will contain the actual form:

```html
<body>
  <main class="main-content">
    <div class="top-cover u-padding-block-end-56">
      <div class="container">
        <div
          class="u-flex u-gap-16 u-flex-justify-center u-margin-block-start-16"
        >
          <h1 class="heading-level-1">ElevenLabs Demo</h1>
          <code class="u-un-break-text"></code>
        </div>
        <p
          class="body-text-1 u-normal u-margin-block-start-8"
          style="max-width: 50rem"
        >
          Use this page to test your implementation with ElevenLabs. Enter
          text and receive an audio response.
        </p>
      </div>
    </div>
    <div
      class="container u-margin-block-start-negative-56"
      x-data="{ prompt: '', response: '', loading: false }"
    >
      <div class="card u-flex u-gap-24 u-flex-vertical">
        <div class="u-flex u-cross-center u-gap-8">
          <div
            class="input-text-wrapper is-with-end-button u-width-full-line"
          >
            <input x-model="prompt" type="search" placeholder="Enter text" />
            <div class="icon-search" aria-hidden="true"></div>
          </div>

          <button
            class="button"
            x-bind:disabled="loading"
            x-on:click="async () => { loading = true; response = ''; try { response = await onSubmit(prompt) } catch(err) { console.error(err); } finally { loading = false; } }"
          >
            <span class="text">Generate</span>
          </button>
        </div>
        <template x-if="response">
          <div class="u-flex u-flex-vertical u-gap-12">
            <div class="u-flex u-flex-vertical u-gap-12 card">
              <div class="u-flex u-gap-12">
                <h5 class="eyebrow-heading-2">Output:</h5>
              </div>

              <div>
                <audio x-bind:src="response" controls></audio>
              </div>
            </div>
          </div>
        </template>
      </div>
    </div>
  </main>
</body>
```

All of this together will render a form that will submit your text to the Appwrite Function through a POST request which we'll create next. The Appwrite Function will call ElevenLabs's API, upload the audio to Appwrite Storage and return the URL, which will be displayed on your page.
{% /section %}

{% section #step-6 step=6 title="Handle POST Request" %}
Now that we're serving a basic HTML page, we can add methods necessary to integrate with the ElevenLabs API.

First, we're going to import Fetch at the top of our `main.js` file and a bunch of Appwrite helper functions:

```js
import { Client, Storage, ID, InputFile, Permission, Role } from "node-appwrite";
import fetch from "node-fetch";
```

Next after we serve the HTML, we're going to add code to validate the body of the request and initialise the Appwrite SDK:
```js
const endpoint = process.env.APPWRITE_ENDPOINT || "https://cloud.appwrite.io/v1"

const client = new Client()
  .setEndpoint()
  .setProject(process.env.APPWRITE_FUNCTION_PROJECT_ID)
  .setKey(process.env.APPWRITE_API_KEY);

try {
  throwIfMissing(req.body, ["text"]);
} catch (err) {
  return res.json({ ok: false, error: err.message }, 400);
}
```

Finally, we're going to add the code to make the request to the ElevenLabs API and return the response:

```js
let body = {
  accent: req.body.accent || "british",
  accent_strength: 1.0,
  age: req.body.age || "young",
  gender: req.body.gender || "female",
  text: req.body.text,
};

const resp = await fetch(
  "https://api.elevenlabs.io/v1/voice-generation/generate-voice",
  {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "xi-api-key": process.env.ELEVENLABS_API_KEY,
    },
    body: JSON.stringify(body),
  },
);

if (resp.status !== 200) {
  error(await resp.text());
  return res.json({ ok: false, error: "Failed to generate audio" }, 500);
}
```

This code will send our prompt to the the ElevenLabs API and return the audio into a blob,
additionally it'll also catch any errors we could encounter and reports them for easy debugging.
{% /section %}

{% section #step-7 step=7 title="Storing Audio in Appwrite Storage" %}

Now we have our audio file, we can store it in Appwrite Storage for easy retrieval later:

```js
const storage = new Storage(client);

let file = await storage.createFile(
  process.env.APPWRITE_BUCKET_ID,
  ID.unique(),
  InputFile.fromBlob(await resp.blob(), "audio.mp3"),
  [Permission.read(Role.any())],
);
```

So we can instantly show it to the user, we're going to calculate the download URL and return it in the response:

```js
const url = `${endpoint}/storage/buckets/${process.env.APPWRITE_BUCKET_ID}/files/${file.$id}/view?project=${process.env.APPWRITE_FUNCTION_PROJECT_ID}`;

return res.json({ ok: true, response: url });
```

This should finish up our function, we can now deploy it to Appwrite by pushing to the git repository we created earlier.
{% /section %}

{% section #step-8 step=8 title="Test our function" %}
Now that our function is deployed, we can test it by visiting the function URL in our browser.
This should show the UI we created earlier and to test it we can write a prompt and click the submit button, after a brief moment you should see the audio appear below the input.

![Testing the function](/images/docs/ai/integrations/elevenlabs/demo.png)
{% /section %}

{% section #step-9 step=9 title="Next Steps" %}
In this tutorial, we've created a simple web page that allows us to interact with the ElevenLabs API using Appwrite Functions. We've learned how to create a function that interacts with an external API, upload audio to storage, how to deploy it to Appwrite, and how to create an interactive web page that uses the function.

We look forward to seeing what you build with Appwrite and ElevenLabs!
{% /section %}
