---
layout: article
title: Object Detection with Hugging Face
description: Build object recognition powered apps with Appwrite and learn how to use Hugging Face's image classification models.
difficulty: beginner
readtime: 3
back: /docs/products/ai/computer-vision
---

Learn to to setup your first function utilizing object detection with Appwrite and Hugging Face.

{% section #step-1 step=1 title="Create a new function" %}
Head to the [Appwrite Console](https://cloud.appwrite.io/console) then click on **Functions** in the left sidebar and then click on the **Create Function** button.

{% only_dark %}
![Create function screen](/images/docs/functions/dark/template.png)
{% /only_dark %}
{% only_light %}
![Create function screen](/images/docs/functions/template.png)
{% /only_light %}

1. In the Appwrite Console's sidebar, click **Functions**.
2. Click **Create function**.
3. Under **Connect Git repository**, select your provider.
4. After connecting to GitHub, under **Quick start**, select the **Node.js** starter template.
5. In the **Variables** step, tick the box to **Generate API key on completion**.
6. Follow the step-by-step wizard and create the function.
{% /section %}

{% section #step-2 step=2 title="Adding the Hugging Face SDK" %}
Once your function is created, navigate to the freshly created repository and either clone it to your local machine or launch a GitHub Codespace.

Once you have the repository open, you can install the Hugging Face Inference SDK by running the following command in your terminal:

```bash
npm install @huggingface/inference
```
{% /section %}


{% section #step-3 step=3 title="Parsing the payload body" %}
With the SDK Installed, we can begin to write the code that will parse the body.
The function we are writing today can serve two purposes: it can recieve a body via direct execution or it can be called via a file create event.

Open up your `src/index.js` file and replace the function body with the following code:

```js
export default async ({ req, res, log, error }) => {
  const databaseId = process.env.APPWRITE_DATABASE_ID ?? 'ai';
  const collectionId = process.env.APPWRITE_COLLECTION_ID ?? 'image_classification';
  const bucketId = process.env.APPWRITE_BUCKET_ID ?? 'image_classification';

  if (req.method !== 'POST') {
    return res.send('Method Not Allowed', 405);
  }

  // Allows using direct execution or file create event
  let fileId = req.body.$id || req.body.imageId;

  if (!fileId) {
    error('Missing fileId');
    return res.send('Bad Request', 400);
  }

  if (
    req.body.bucketId &&
    req.body.bucketId != bucketId
  ) {
    error('Invalid bucketId');
    return res.send('Bad Request', 400);
  }
}
```

Breaking down this code, we perform the following:
1. We set the default values for the `databaseId`, `collectionId`, and `bucketId` to the values we will use in the Appwrite Console.
2. We check if the request method is `POST`, if it is not, we return a `405 - Method not allowed` status code.
3. We check if the `fileId` is present in the request body, if it is not, we return a `400 - Bad Request` status code.
4. We check if the `bucketId` is present in the request body and if it is not the same as the one we set in the environment variables, we return a `400 - Bad Request` status code.

{% /section %}

{% section #step-4 step=4 title="Setting up your Appwrite Storage bucket"  %}
In order for this function to work, you will need to create a new bucket in the Appwrite Storage. You can do this by navigating to the Appwrite Console and clicking on **Storage** in the left sidebar, then clicking on the **Create Bucket** button.

{% only_dark %}
![Create bucket on console](/images/docs/storage/dark/create-bucket.png)
{% /only_dark %}
{% only_light %}
![Create bucket on console](/images/docs/storage/create-bucket.png)
{% /only_light %}

Leave most of the options as default and set any name you like. Make sure to note down the bucket ID so we can add it as an environment variable later.

{% /section %}

{% section #step-5 step=5 title="Downloading the image using Appwrite Storage" %}
With the payload parsed, we can now download the image from the Appwrite Storage.

In the interest of keeping the codebase clean, we'll split all Appwrite related code into a separate file. Create a new file called `appwrite.js` in the `src` directory and add the following code:

```js
import { Client, Databases, ID, Storage } from 'node-appwrite';

class AppwriteService {
  constructor() {
    const client = new Client();
    client
      .setEndpoint(
        process.env.APPWRITE_ENDPOINT ?? 'https://cloud.appwrite.io/v1'
      )
      .setProject(process.env.APPWRITE_FUNCTION_PROJECT_ID)
      .setKey(process.env.APPWRITE_API_KEY);

    this.databases = new Databases(client);
    this.storage = new Storage(client);
  }

  /**
  * @param {string} bucketId
  * @param {string} fileId
  * @returns {Promise<Buffer>}
  */
  async getFile(bucketId, fileId) {
    return await this.storage.getFileDownload(bucketId, fileId);
  }
}

export default AppwriteService;
```

This code creates a new `AppwriteService` class that initializes the Appwrite client and provides a method to download a file from the Appwrite Storage.

Now, we can import the class into the `src/index.js` file, at the top of the file, add the following line:
```js
import AppwriteService from './appwrite.js';
```

Then, we can use the `AppwriteService` class to download the image from the Appwrite Storage. After the bucket check add the following code:

```js
  const appwrite = new AppwriteService();

  let file;
  try {
    file = await appwrite.getFile(bucketId, fileId);
  } catch (err) {
    if (err.code === 404) {
      error(err);
      return res.send('File Not Found', 404);
    }

    error(err);
    return res.send('Bad Request', 400);
  }
```
This code will download the file from the Appwrite Storage and return a `404 - File Not Found` status code if the file is not found or a `400 - Bad Request` status code if an error occurs.

{% /section %}

{% section #step-6 step=6 title="Detecting objects in the image" %}
With the image downloaded, we can now use the Hugging Face Inference SDK to classify the image.

At the top of the `src/index.js` file, add:
```js
import { HfInference } from '@huggingface/inference';
```

Next we're going to use the hugging face SDK and classify the image, for this task we can use various models that you can find [on hugging face.](https://huggingface.co/models?pipeline_tag=object-detection&sort=trending) For this example we'll be using the
`facebook/detr-resnet-50` model.

```js
const hf = new HfInference(process.env.HUGGING_FACE_API_KEY);

const result = await hf.objectDetection({
  data: file,
  model: 'facebook/detr-resnet-50',
});
```
{% /section %}

{% section #step-7 step=7 title="Setting up our database" %}
Before we can save our detection result to the Appwrite Database, we need to create a new database and collection in the Appwrite Console.

Navigate to the Appwrite Console and click on **Database** in the left sidebar, then click on the **Create Database** button, you can call this database anything you like, for this example we'll call it `AI`.
Once you've created the database, click on the **Create Collection** button and create a new collection, once again you can call it anything you want but for this example we'll call it `Image Labels`.

Now we have a collection we're going to add two string attributes to it, `image` and `labels`. The `image` attribute will store the ID of the image we're detecting objects in and the `labels` attribute will store the detection result.
Both of these attributes should be `required` with `image` having the size of `256` and `labels` having the size of around `4096`.

{% only_dark %}
![Object Detection Database](/images/docs/ai/tutorials/object-detection/dark/database.png)
{% /only_dark %}
{% only_light %}
![Object Detection Database](/images/docs/ai/tutorials/object-detection/database.png)
{% /only_light %}

{% /section %}
{% section #step-8 step=8 title="Saving the object detection result" %}
With the image classified, we can now save the result to the Appwrite Database.

To begin with we're going to add a new function to the `appwrite.js` file we created earlier which will create these records in the database.
```js
/**
* @param {string} databaseId
* @param {string} collectionId
* @param {string} imageId
* @param {object} labels
* @returns {Promise<void>}
*/
async createImageLabels(databaseId, collectionId, imageId, labels)
{
  await this.databases.createDocument(
    databaseId,
    collectionId,
    ID.unique(),
    {
      image: imageId,
      labels: JSON.stringify(labels),
    }
  );
}
```
This abstraction keeps our codebase clean and makes it easier to test and maintain.

Next, using the function we just added we can save the object detection result to the Appwrite Database. We'll also add some logging and error handling to make sure everything is working as expected.

Add the following code:
```js
try {
  await appwrite.createImageLabels(databaseId, collectionId, fileId, result);
} catch (err) {
  error(err);
  return res.send('Internal Server Error', 500);
}

log('Image ' + fileId + ' detected', result);
return res.json(result);
```
{% /section %}
{% section #step-9 step=9 title="Deploying the function" %}
With the function complete, we can now deploy it to Appwrite.
{% partial file="deploy-function.md" /%}
{% /section %}

{% section #step-10 step=10 title="Configuring Events" %}
To test our function we're going to attach it directly to our Storage bucket using events.

Navigate to your function in the Appwrite Console and visit it's **settings** tab,
then under the **Events** section click on the **Add Event** button.

At the bottom of the dialog within the text input, click on the pen icon and enter `buckets.[Bucket ID].files.*.create`.
Making sure to replace `[Bucket ID]` with the ID of the bucket you created earlier.

{% only_dark %}
![Object Detection Event](/images/docs/ai/tutorials/object-detection/dark/event.png)
{% /only_dark %}
{% only_light %}
![Object Detection Event](/images/docs/ai/tutorials/object-detection/event.png)
{% /only_light %}
{% /section %}
{% section #step-11 step=11 title="Testing the function" %}
Finally, we can test our function by uploading an image to the Appwrite Storage.

Navigate to the Appwrite Console and click on **Storage** in the left sidebar, then click on the **Upload File** button and upload an image.
After a few seconds, you should see an execution appear in the function's execution logs and the object detection result should be saved to the Appwrite Database.

{% only_dark %}
![Object Detection Test](/images/docs/ai/tutorials/object-detection/dark/result.png)
{% /only_dark %}
{% only_light %}
![Object Detection Test](/images/docs/ai/tutorials/object-detection/result.png)
{% /only_light %}
{% /section %}
{% section #step-12 step=12 title="Next Steps" %}
Congratulations! You've successfully created an object detection function using Appwrite and Hugging Face.

From here you can expand on this project by adding more models or creating a front-end to upload images.
We look forward to seeing what you build with this project! Full source code for this project can be found on
[GitHub](https://github.com/appwrite/templates/tree/main/node/object-detection-with-huggingface).
{% /section %}
