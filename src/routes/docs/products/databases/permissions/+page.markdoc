---
layout: article
title: Database permissions
description: Enhance data security and access control with Appwrite Database Permissions. Learn how to set permissions and access rules for your database collections
---

Permissions define who can access documents in a collection. By default **no permissions** are granted to any users, so no user can access any documents.
Permissions exist at two levels, collection level and document level permissions.

In Appwrite, permissions are **granted**, meaning a user has no access by default and receive access when granted.
A user with access granted at either collection level or document level will be able to access a document.
Users **don't need access at both levels** to access documents.

# Collection level {% #collection-level %}
Collection level permissions apply to every document in the collection.
If a user has read, create, update, or delete permissions at the collection level, the user can access **all documents** inside the collection.

Configure collection level permissions by navigating to **Your collection** > **Settings** > **Permissions**.

[Learn more about permissions and roles](/docs/advanced/platform/permissions)

# Document level {% #document-level %}
Document level permissions grant access to individual documents.
If a user has read, create, update, or delete permissions at the document level, the user can access the **individual document**.

Document level permissions are only applied if Document Security is enabled in the settings of your collection.
Enable document level permissions by navigating to **Your collection** > **Settings** > **Document security**.

Document level permissions are configured in individual documents.

[Learn more about permissions and roles](/docs/advanced/platform/permissions)

# Example: Allow users to create private documents {% #private-documents %}

A common use case is to allow users to create documents that are only accessible to them. Here's how this can be achieved:

### Configure the collection
First, configure your collection to:
1. Enable **Document Security** in Collection **Settings**
2. Grant only **CREATE** permission to **all users** at the collection level

{% info title="Why this setup?" %}
- Document Security enables per-document permissions
- Collection-level CREATE permission allows users to create documents
- Omitting READ/UPDATE/DELETE at collection level prevents users from accessing all documents
{% /info %}

### 2. Document creation with permissions
When creating documents in your application, set document-level permissions to restrict access to only the creator:

{% multicode %}
```client-web
import { Client, Databases, Permission, Role } from "appwrite";

const client = new Client()
    .setEndpoint('https://cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>');

const databases = new Databases(client);

let promise = databases.createDocument(
    '<DATABASE_ID>',
    '<COLLECTION_ID>',
    { 'title': 'My Private Document' },
    [
        Permission.read(Role.user('<USER_ID>')),    // Only this user can read
        Permission.update(Role.user('<USER_ID>')),  // Only this user can update
        Permission.delete(Role.user('<USER_ID>'))   // Only this user can delete
    ]
);

promise.then(function (response) {
    console.log(response);
}, function (error) {
    console.log(error);
});
```
```client-flutter
import 'package:appwrite/appwrite.dart';

void main() async {
    final client = Client()
        .setEndpoint('https://cloud.appwrite.io/v1')
        .setProject('<PROJECT_ID>');

    final databases = Databases(client);

    try {
        final document = await databases.createDocument(
            databaseId: '<DATABASE_ID>',
            collectionId: '<COLLECTION_ID>',
            data: { 'title': 'My Private Document' },
            permissions: [
                Permission.read(Role.user('<USER_ID>')),    // Only this user can read
                Permission.update(Role.user('<USER_ID>')),  // Only this user can update
                Permission.delete(Role.user('<USER_ID>'))   // Only this user can delete
            ]
        );
    } on AppwriteException catch(e) {
        print(e);
    }
}
```
```client-apple
import Appwrite

func main() async throws {
    let client = Client()
        .setEndpoint("https://cloud.appwrite.io/v1")
        .setProject("<PROJECT_ID>");

    let databases = Databases(client);

    do {
        let document = try await databases.createDocument(
            databaseId: "<DATABASE_ID>",
            collectionId: "<COLLECTION_ID>",
            data: ["title": "My Private Document"],
            permissions: [
                Permission.read(Role.user("<USER_ID>")),    // Only this user can read
                Permission.update(Role.user("<USER_ID>")),  // Only this user can update
                Permission.delete(Role.user("<USER_ID>"))   // Only this user can delete
            ]
        );
    } catch {
        print(error.localizedDescription);
    }
}
```
```client-android-kotlin
import io.appwrite.Client
import io.appwrite.Permission
import io.appwrite.Role
import io.appwrite.services.Databases
import io.appwrite.exceptions.AppwriteException

suspend fun main() {
    val client = Client(applicationContext)
        .setEndpoint("https://cloud.appwrite.io/v1")
        .setProject("<PROJECT_ID>");

    val databases = Databases(client);

    try {
        val document = databases.createDocument(
            databaseId = "<DATABASE_ID>",
            collectionId = "<COLLECTION_ID>",
            data = mapOf("title" to "My Private Document"),
            permissions = listOf(
                Permission.read(Role.user("<USER_ID>")),    // Only this user can read
                Permission.update(Role.user("<USER_ID>")),  // Only this user can update
                Permission.delete(Role.user("<USER_ID>"))   // Only this user can delete
            )
        );
    } catch (e: AppwriteException) {
        Log.e("Appwrite", e.message);
    }
}
```
{% /multicode %}

{% info title="Understanding the flow" %}
1. Collection-level CREATE permission allows users to create new documents
2. When a document is created, we set permissions for only the creator
3. These document-level permissions ensure only the creator can read, update, or delete their documents
4. Other users can create their own documents but cannot access documents they didn't create
{% /info %}

Replace `<USER_ID>` with the ID of the user who should have access to the document. You can get the current user's ID from the account object after they log in.

[Learn more about permissions and roles](/docs/advanced/platform/permissions)


