---
layout: article
title: Tables
description: Organize your data with Appwrite Tables. Explore how to create and configure tables to store and structure your data effectively.
---
Appwrite uses tables as containers of rows. Each tables contains many rows identical in structure.
The terms tables and rows are used because the Appwrite JSON REST API resembles the API of a traditional NoSQL database, making it intuitive and user-friendly, even though Appwrite uses SQL under the hood.

That said, Appwrite is designed to support both SQL and NoSQL database adapters like MariaDB, MySQL, or MongoDB in future versions.

# Create table {% #create-table %}
You can create tables using the Appwrite Console, a [Server SDK](/docs/sdks#server), or using the [CLI](/docs/tooling/command-line/installation).
{% tabs %}

{% tabsitem #console title="Console" %}
You can create a table by heading to the **Databases** page, navigate to a [database](/docs/products/databases/databases), and click **Create table**.

{% /tabsitem %}

{% tabsitem #server-sdk title="Server SDK" %}
You can also create tables programmatically using a [Server SDK](/docs/sdks#server). Appwrite [Server SDKs](/docs/sdks#server) require an [API key](/docs/advanced/platform/api-keys).

{% multicode %}

```server-nodejs
const sdk = require('node-appwrite');

// Init SDK
const client = new sdk.Client();

const tablesDB = new sdk.TablesDB(client);

client
    .setEndpoint('https://<REGION>.cloud.appwrite.io/v1') // Your API Endpoint
    .setProject('<PROJECT_ID>') // Your project ID
    .setKey('919c2d18fb5d4...a2ae413da83346ad2') // Your secret API key
;

const promise = tablesDB.createTable('<DATABASE_ID>', '<TABLE_ID>', '<NAME>');

promise.then(function (response) {
    console.log(response);
}, function (error) {
    console.log(error);
});
```
```deno
import * as sdk from "https://deno.land/x/appwrite/mod.ts";

// Init SDK
let client = new sdk.Client();

let tablesDB = new sdk.TablesDB(client);

client
    .setEndpoint('https://<REGION>.cloud.appwrite.io/v1') // Your API Endpoint
    .setProject('<PROJECT_ID>') // Your project ID
    .setKey('919c2d18fb5d4...a2ae413da83346ad2') // Your secret API key
;


let promise = tablesDB.createTable('<DATABASE_ID>', '<TABLE_ID>', '<NAME>');

promise.then(function (response) {
    console.log(response);
}, function (error) {
    console.log(error);
});
```
```php
<?php

use Appwrite\Client;
use Appwrite\Services\TablesDB;

$client = new Client();

$client
    ->setEndpoint('https://<REGION>.cloud.appwrite.io/v1') // Your API Endpoint
    ->setProject('<PROJECT_ID>') // Your project ID
    ->setKey('919c2d18fb5d4...a2ae413da83346ad2') // Your secret API key
;

$tablesDB = new TablesDB($client);

$result = $tablesDB->createTable('<DATABASE_ID>', '<TABLE_ID>', '<NAME>');
```
```python
from appwrite.client import Client
from appwrite.services.tablesDB import TablesDB

client = Client()

(client
  .set_endpoint('https://<REGION>.cloud.appwrite.io/v1') # Your API Endpoint
  .set_project('<PROJECT_ID>') # Your project ID
  .set_key('919c2d18fb5d4...a2ae413da83346ad2') # Your secret API key
)

tablesDB = TablesDB(client)

result = tablesDB.create_table('<DATABASE_ID>', '<TABLE_ID>', '<NAME>')
```
```ruby
require 'Appwrite'

include Appwrite

client = Client.new
    .set_endpoint('https://<REGION>.cloud.appwrite.io/v1') # Your API Endpoint
    .set_project('<PROJECT_ID>') # Your project ID
    .set_key('919c2d18fb5d4...a2ae413da83346ad2') # Your secret API key

tablesDB = TablesDB.new(client)

response = tablesDB.create_table(database_id: '<DATABASE_ID>', table_id: '<TABLE_ID>', name: '<NAME>')

puts response.inspect
```
```csharp
using Appwrite;
using Appwrite.Services;
using Appwrite.Models;

var client = new Client()
    .SetEndPoint("https://<REGION>.cloud.appwrite.io/v1") // Your API Endpoint
    .SetProject("<PROJECT_ID>") // Your project ID
    .SetKey("919c2d18fb5d4...a2ae413da83346ad2"); // Your secret API key

var tablesDB = new TablesDB(client);

Table result = await tablesDB.CreateTable(
    databaseId: "<DATABASE_ID>",
    tableId: "<TABLE_ID>",
    name: "<NAME>");
```
```dart
import 'package:dart_appwrite/dart_appwrite.dart';

void main() { // Init SDK
  Client client = Client();
  Databases tablesDB = TablesDB(client);

  client
    .setEndpoint('https://<REGION>.cloud.appwrite.io/v1') // Your API Endpoint
    .setProject('<PROJECT_ID>') // Your project ID
    .setKey('919c2d18fb5d4...a2ae413da83346ad2') // Your secret API key
  ;

  Future result = tablesDB.createTable(
    databaseId: '<DATABASE_ID>',
    tableId: '<TABLE_ID>',
    name: '<NAME>',
  );

  result
    .then((response) {
      print(response);
    }).catchError((error) {
      print(error.response);
  });
}
```
```kotlin
import io.appwrite.Client
import io.appwrite.services.TablesDB

val client = Client(context)
    .setEndpoint("https://<REGION>.cloud.appwrite.io/v1") // Your API Endpoint
    .setProject("<PROJECT_ID>") // Your project ID
    .setKey("919c2d18fb5d4...a2ae413da83346ad2") // Your secret API key

val tablesDB = TablesDB(client)

val response = tablesDB.createTable(
    databaseId = "<DATABASE_ID>",
    tableId = "<TABLE_ID>",
    name = "<NAME>",
)
```
```java
import io.appwrite.Client;
import io.appwrite.coroutines.CoroutineCallback;
import io.appwrite.services.TablesDB;

Client client = new Client()
    .setEndpoint("https://<REGION>.cloud.appwrite.io/v1") // Your API Endpoint
    .setProject("<PROJECT_ID>") // Your project ID
    .setKey("919c2d18fb5d4...a2ae413da83346ad2"); // Your secret API key

Databases tablesDB = new TablesDB(client);

tablesDB.createTable(
    "<DATABASE_ID>",
    "<TABLE_ID>",
    "<NAME>",
    new CoroutineCallback<>((result, error) -> {
        if (error != null) {
            error.printStackTrace();
            return;
        }

        System.out.println(result);
    })
);
```
```swift
import Appwrite

let client = Client()
    .setEndpoint("https://<REGION>.cloud.appwrite.io/v1") // Your API Endpoint
    .setProject("<PROJECT_ID>") // Your project ID
    .setKey("919c2d18fb5d4...a2ae413da83346ad2") // Your secret API key

let tablesDB = TablesDB(client)

let table = try await tablesDB.createTable(
    databaseId: "<DATABASE_ID>",
    tableId: "<TABLE_ID>",
    name: "<NAME>"
)
```
{% /multicode %}

You can also configure **permissions** in the `createTable` method, learn more about the `createTable` in the [API references](/docs/references).
{% /tabsitem %}

{% tabsitem #cli title="CLI" %}

{% partial file="cli-disclaimer.md" /%}

To create your table using the CLI, first use the `appwrite init tables` command to initialize your table.

```sh
appwrite init tables
```

Then push your table using the `appwrite push tables` command.

```sh
appwrite push tables
```

This will create your table in the Console with all of your `appwrite.json` configurations.

{% arrow_link href="/docs/tooling/command-line/tables#commands" %}
Learn more about the CLI tables commands
{% /arrow_link %}

{% /tabsitem %}

{% /tabs %}

# Permissions {% #permissions %}
Appwrite uses permissions to control data access.
For security, only users that are granted permissions can access a resource.
This helps prevent accidental data leaks by forcing you to make more conscious decisions around permissions.

By default, Appwrite doesn't grant permissions to any users when a new table is created.
This means users can't create new rows or read, update, and delete existing rows.

[Learn about configuring permissions](/docs/products/databases/permissions).

# Columns {% #columns %}
All rows in a table follow the same structure.
Columns are used to define the structure of your rows and help the Appwrite's API validate your users' input.
Add your first column by clicking the **Add column** button.

You can choose between the following types.

| Column    | Description                                                      |
|--------------|------------------------------------------------------------------|
| `string`     | String column.                                                |
| `integer`    | Integer column.                                               |
| `float`      | Float column.                                                 |
| `boolean`    | Boolean column.                                               |
| `datetime`   | Datetime column formatted as an ISO 8601 string.              |
| `enum`       | Enum column.                                                  |
| `ip`         | IP address column for IPv4 and IPv6.                          |
| `email`      | Email address column.                                         |
| `url`        | URL column.                                                   |
| `relationship` | Relationship column relates one table to another. [Learn more about relationships.](/docs/products/databases/relationships) |

If an column must be populated in all rows, set it as `required`.
If not, you may optionally set a default value.
Additionally, decide if the column should be a single value or an array of values.

If needed, you can change an column's key, default value, size (for strings), and whether it is required or not after creation.

You can increase a string column's size without any restrictions. When decreasing size, you must ensure that your existing data is less than or equal to the new size, or the operation will fail.

# Indexes {% #indexes %}

Databases use indexes to quickly locate data without having to search through every row for matches.
To ensure the best performance, Appwrite recommends an index for every column queried.
If you plan to query multiple columns in a single query, creating an index with **all** queried columns will yield optimal performance.

The following indexes are currently supported:

| Type       | Description                                                                                                  |
|------------|--------------------------------------------------------------------------------------------------------------|
| `key`      | Plain Index to allow queries.                                                                                 |
| `unique`   | Unique Index to disallow duplicates.                                                                          |
| `fulltext` | For searching within string columns. Required for the [search query method](/docs/products/databases/queries#query-class).     |

You can create an index by navigating to your table's **Indexes** tab or by using your favorite [Server SDK](/docs/sdks#server).
