---
layout: article
title: Upload and download
description: Effortlessly upload and download files with Appwrite Storage. Learn how to handle file uploads, manage file versions, and ensure secure downloads in your applications.
---

You can upload and download files both programmatically using SDKs or through the Appwrite Console.

# Create file {% #create-file %}

After you create a bucket or have navigated to bucket details, you can access the **Files** tab so you can upload, view, delete and update files in the bucket using the Appwrite project's dashboard. You can also perform all those operations from Appwrite's client SDK, server SDKs, and REST APIs as long as you have the proper permission.

When you are in the **Files** tab, you can click **Add File** and select a file to upload. If the bucket is configured to accept the file type and size you are uploading, your file will be uploaded, and you will see the file in the list of files.

You can also upload files programmatically using our SDKs:

{% multicode %}
  ```js
  import { Client, Storage } from "appwrite";

  const client = new Client()
      .setEndpoint('https://cloud.appwrite.io/v1')
      .setProject('<PROJECT_ID>');

  const storage = new Storage(client);

  const promise = storage.createFile(
      '[BUCKET_ID]',
      ID.unique(),
      document.getElementById('uploader').files[0]
  );

  promise.then(function (response) {
      console.log(response); // Success
  }, function (error) {
      console.log(error); // Failure
  });
  ```

  ```dart
  import 'package:appwrite/appwrite.dart';

  void main() { // Init SDK
    final client = Client()
      .setEndpoint('https://cloud.appwrite.io/v1')
      .setProject('<PROJECT_ID>');

    final storage = Storage(client);

    final file = await storage.createFile(
      bucketId: '[BUCKET_ID]',
      fileId: ID.unique(),
      file: InputFile.fromPath(path: './path-to-files/image.jpg', filename: 'image.jpg'),
    );
  }
  ```

  ```kotlin
  import io.appwrite.Client
  import io.appwrite.services.Storage

  suspend fun main() {
      val client = Client(applicationContext)
          .setEndpoint("https://cloud.appwrite.io/v1") // Your API Endpoint
          .setProject("<PROJECT_ID>") // Your project ID

      val storage = Storage(client)

      val file = storage.createFile(
          bucketId = "[BUCKET_ID]",
          fileId = ID.unique(),
          file = File("./path-to-files/image.jpg"),
      )
  }
  ```

  ```swift
  import Appwrite

  func main() async throws {
      let client = Client()
        .setEndpoint("https://cloud.appwrite.io/v1")
        .setProject("<PROJECT_ID>")

      let storage = Storage(client)

      let file = try await storage.createFile(
          bucketId: "[BUCKET_ID]",
          fileId: ID.unique(),
          file: InputFile.fromBuffer(yourByteBuffer,
              filename: "image.jpg",
              mimeType: "image/jpeg"
          )
      )
  }
  ```

  ```http
  POST /v1/storage/buckets/{bucketId}/files HTTP/1.1
  Content-Type: multipart/form-data; boundary="cec8e8123c05ba25"
  Content-Length: *Length of your entity body in bytes*
  X-Appwrite-Project: [PROJECT_ID]

  --cec8e8123c05ba25
  Content-Disposition: form-data; name="operations"

  { "query": "mutation CreateFile($bucketId: String!, $fileId: String!, $file: InputFile!) { storageCreateFile(bucketId: $bucketId, fileId: $fileId, file: $file) { id } }", "variables": { "bucketId": "[BUCKET_ID]", "fileId": "[FILE_ID]", "file": null } }
  --cec8e8123c05ba25
  Content-Disposition: form-data; name="map"

  { "0": ["variables.file"] }
  --cec8e8123c05ba25
  Content-Disposition: form-data; name="0"; filename="file.txt"
  Content-Type: text/plain

  File content.

  --cec8e8123c05ba25--
  ```

{% /multicode %}

# Large files {% #large-files %}
When you are trying to upload any files above 5MB, you will need to upload them in chunks for better reliability and performance.
If you're using an Appwrite SDK, this is handled automatically.
If you're not using an SDK, you can [learn more about REST API file handling](/docs/apis/rest#files).

# InputFile {% #input-file %}
Every language and platform handles file inputs differently. This section documents the expected input type of each SDK. Where applicable, Appwrite provides an `InputFile` class to accept multiple file sources, like paths, buffers, streams, or plain text.

# Client SDKs {% #client-sdks %}

{% tabs %}
{% tabsitem #web title="Web" %}
The Appwrite Web SDK expects a [File](https://developer.mozilla.org/en-US/docs/Web/API/File) object for file creation. This is most commonly associated with DOM file inputs.

For example, for the input tag `<input type="file" id="uploader">`, you would call create file like this:

```js
const promise = storage.createFile(
    '[BUCKET_ID]',
    ID.unique(),
    document.getElementById('uploader').files[0]
);
```
{% /tabsitem %}

{% tabsitem #flutter title="Flutter" %}

The Appwrite Flutter SDK expects an `InputFile` class for file inputs.

| Method                                     | Description                                                  |
| ------------------------------------------ | ------------------------------------------------------------ |
| `InputFile.fromPath(path: [PATH], filename: [NAME], contentType: [MIME TYPE])` | Used to upload files from a provided path, `filename` and `contentType` are optional. Used for Flutter apps on mobile and desktop. |
| `InputFile.fromBytes(bytes: [BYTE LIST], filename: [NAME], contentType: [MIME TYPE])` | Used to upload files from a byte list, `contentType` is optional. Used for Flutter apps on the web. |
{% /tabsitem %}

{% tabsitem #android title="Android" %}

The Appwrite Android SDK expects an `InputFile` class for file inputs.

| Method                         | Description                                      |
| ------------------------------ | ------------------------------------------------ |
| `InputFile.fromPath(path: String)` | Used to upload files from a provided path.     |
| `InputFile.fromFile(file: File)`   | Used to upload files from a [File](https://docs.oracle.com/javase/8/docs/api/java/io/File.html) object. |
| `InputFile.fromBytes(bytes: ByteArray, filename: String, mimeType: String)` | Used to upload files from a [ByteArray](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-byte-array/) object. Specify the file [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) using the `mimeType` param. |

{% /tabsitem %}

{% tabsitem #apple title="Apple" %}
The Appwrite Apple SDK expects an `InputFile` class for file inputs.

| Method                                     | Description                                                  |
| ------------------------------------------ | ------------------------------------------------------------ |
| `InputFile.fromPath(_ path: String)`        | Used to upload files from a provided path.                  |
| `InputFile.fromData(_ data: Data, filename: String, mimeType: String)` | Used to upload files from a [Data](https://developer.apple.com/documentation/foundation/data) object. Specify the file [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) using the `mimeType` param. |
| `InputFile.fromBuffer(_ buffer: ByteBuffer, filename: String, mimeType: String)` | Used to upload files from a [NIO Buffer](https://swiftinit.org/reference/swift-nio/niocore/bytebuffer) object. Specify the file [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) using the `mimeType` param. |
{% /tabsitem %}
{% /tabs %}

# Server SDKs {% #server-sdks %}

{% tabs %}
{% tabsitem #nodejs title="Node.js" %}
The Appwrite NodeJS SDK expects an `InputFile` class for file inputs.

| Method                                     | Description                                                  |
| ------------------------------------------ | ------------------------------------------------------------ |
| `InputFile.fromPath(filePath, filename)`     | Used to upload files from a provided path.                  |
| `InputFile.fromBuffer(buffer, filename)`     | Used to upload files from a [Buffer](https://nodejs.org/api/buffer.html#buffer) object. |
| `InputFile.fromBlob(blob, filename)`         | Used to upload files from a [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob) object. |
| `InputFile.fromStream(stream, filename, size)` | Used to upload files from a [Readable Stream](https://nodejs.org/api/stream.html#readable-streams) object. |
| `InputFile.fromPlainText(content, filename)`  | Used to upload files in plain text. Expects a string encoded in UTF-8. |
{% /tabsitem %}
{% tabsitem #php title="PHP" %}

The Appwrite PHP SDK expects an `InputFile` class for file inputs.

| Method                                     | Description                                                  |
| ------------------------------------------ | ------------------------------------------------------------ |
| `InputFile.withPath(string $path, ?string $mimeType = null, ?string $filename = null)` | Used to upload files from a provided path.                  |
| `InputFile.withData(string $data, ?string $mimeType = null, ?string $filename = null)` | Used to upload files from a string.                         |
{% /tabsitem %}

{% tabsitem #python title="Python" %}
The Appwrite Python SDK expects an `InputFile` class for file inputs.

| Method                                     | Description                                                  |
| ------------------------------------------ | ------------------------------------------------------------ |
| `InputFile.from_path(path)`                | Used to upload files from a provided path.                  |
| `InputFile.from_bytes(bytes)`              | Used to upload files from an array of bytes.               |
{% /tabsitem %}

{% tabsitem #ruby title="Ruby" %}
The Appwrite Ruby SDK expects an `InputFile` class for file inputs.

| Method                                     | Description                                                  |
| ------------------------------------------ | ------------------------------------------------------------ |
| `InputFile.from_path(path)`                | Used to upload files from a provided path.                  |
| `InputFile.from_string(string)`            | Used to upload files from a String.                         |
| `InputFile.from_bytes(bytes)`              | Used to upload files from an array of bytes.               |

{% /tabsitem %}

{% tabsitem #deno title="Deno" %}
The Appwrite Deno SDK expects an `InputFile` class for file inputs.

| Method                                     | Description                                                  |
| ------------------------------------------ | ------------------------------------------------------------ |
| `InputFile.fromPath(filePath, filename)`     | Used to upload files from a provided path.                  |
| `InputFile.fromBuffer(buffer, filename)`     | Used to upload files from a [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) object. |
| `InputFile.fromPlainText(content, filename)`  | Used to upload files in plain text. Expects a string encoded in UTF-8. |
{% /tabsitem %}

{% tabsitem #dart title="Dart" %}
The Appwrite Dart SDK expects an `InputFile` class for file inputs.

| Method                                     | Description                                                  |
| ------------------------------------------ | ------------------------------------------------------------ |
| `InputFile.fromPath(path: [PATH], filename: [NAME], contentType: [MIME TYPE])` | Used to upload files from a provided path, `filename` and `contentType` are optional. |
| `InputFile.fromBytes(bytes: [BYTE LIST], filename: [NAME], contentType: [MIME TYPE])` | Used to upload files from a byte list, `contentType` is optional. |
{% /tabsitem %}

{% tabsitem #kotlin title="Kotlin" %}

The Appwrite Kotlin SDK expects an `InputFile` class for file inputs.

| Method                                     | Description                                                  |
| ------------------------------------------ | ------------------------------------------------------------ |
| `InputFile.fromPath(path: String)`          | Used to upload files from a provided path.                  |
| `InputFile.fromFile(file: File)`            | Used to upload files from a [File](https://docs.oracle.com/javase/8/docs/api/java/io/File.html) object. |
| `InputFile.fromBytes(bytes: ByteArray, filename: String, mimeType: String)` | Used to upload files from a [ByteArray](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-byte-array/) object. Specify the file [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) using the `mimeType` param. |
{% /tabsitem %}

{% tabsitem #swift title="Swift" %}
The Appwrite Swift SDK expects an `InputFile` class for file inputs.

| Method                                     | Description                                                  |
| ------------------------------------------ | ------------------------------------------------------------ |
| `InputFile.fromPath(_ path: String)`        | Used to upload files from a provided path.                  |
| `InputFile.fromData(_ data: Data, filename: String, mimeType: String)` | Used to upload files from a [Data](https://developer.apple.com/documentation/foundation/data) object. Specify the file [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) using the `mimeType` param. |
| `InputFile.fromBuffer(_ buffer: ByteBuffer, filename: String, mimeType: String)` | Used to upload files from a [NIO Buffer](https://swiftinit.org/reference/swift-nio/niocore/bytebuffer) object. Specify the file [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) using the `mimeType` param. |
{% /tabsitem %}

{% tabsitem #dotnet title=".Net" %}
The Appwrite .NET SDK expects an `InputFile` class for file inputs.

| Method                                     | Description                                                  |
| ------------------------------------------ | ------------------------------------------------------------ |
| `InputFile.FromPath(string path)`           | Used to upload files from a provided path.                  |
| `InputFile.FromStream(Stream stream, string filename, string mimeType)` | Used to upload files from a [Stream](https://learn.microsoft.com/en-us/dotnet/api/system.io.stream?view=net-7.0) object. Specify the file [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) using the `mimeType` param. |
| `InputFile.FromBytes(byte[] bytes, string filename, string mimeType)` | Used to upload files from an array of bytes. Specify the file [MIME type](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) using the `mimeType` param. |
{% /tabsitem %}
{% /tabs %}

# Get file {% #get-file %}
To get a metadata about a.file, use the `getFile` method.

{% multicode %}
```js
import { Client, Storage } from "appwrite";

const client = new Client();

const storage = new Storage(client);

client
    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint
    .setProject('5df5acd0d48c2') // Your project ID
;

const promise = storage.getFile('[BUCKET_ID]', '[FILE_ID]');

promise.then(function (response) {
    console.log(response); // Success
}, function (error) {
    console.log(error); // Failure
});
```
```dart
import 'package:appwrite/appwrite.dart';

void main() { // Init SDK
  Client client = Client();
  Storage storage = Storage(client);

  client
    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint
    .setProject('5df5acd0d48c2') // Your project ID
  ;
  // downloading file
  Future result = storage.getFile(
    bucketId: '[BUCKET_ID]',
    fileId: '[FILE_ID]',
  ).then((bytes) {
    final file = File('path_to_file/filename.ext');
    file.writeAsBytesSync(bytes)
  }).catchError((error) {
      print(error.response);
  })
}

//displaying image preview
FutureBuilder(
  future: storage.getFile(
    bucketId: '[BUCKET_ID]',
    fileId: '[FILE_ID]',
  ), //works for both public file and private file, for private files you need to be logged in
  builder: (context, snapshot) {
    return snapshot.hasData && snapshot.data != null
      ? Image.memory(
          snapshot.data,
        )
      : CircularProgressIndicator();
  },
);
```
```swift
import Appwrite

func main() async throws {
    let client = Client()
      .setEndpoint("https://cloud.appwrite.io/v1") // Your API Endpoint
      .setProject("5df5acd0d48c2") // Your project ID
    let storage = Storage(client)
    let byteBuffer = try await storage.getFile(
        bucketId: "[BUCKET_ID]",
        fileId: "[FILE_ID]"
    )

    print(String(describing: byteBuffer)
}
```
```kotlin
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.launch
import io.appwrite.Client
import io.appwrite.services.Storage

class MainActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val client = Client(applicationContext)
            .setEndpoint("https://cloud.appwrite.io/v1") // Your API Endpoint
            .setProject("5df5acd0d48c2") // Your project ID

        val storage = Storage(client)

        val result = storage.getFile(
            bucketId = "[BUCKET_ID]",
            fileId = "[FILE_ID]"
        )
        println(result); // Resource URL
    }
}
```
{% /multicode %}

# Download file {% #download-file %}
To download a file, use the `getFileDownload` method.

{% multicode %}
```js
import { Client, Storage } from "appwrite";

const client = new Client();

const storage = new Storage(client);

client
    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint
    .setProject('5df5acd0d48c2') // Your project ID
;

const result = storage.getFileDownload('[BUCKET_ID]', '[FILE_ID]');

console.log(result); // Resource URL
```
```dart
import 'package:appwrite/appwrite.dart';

void main() { // Init SDK
  Client client = Client();
  Storage storage = Storage(client);

  client
    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint
    .setProject('5df5acd0d48c2') // Your project ID
  ;
  // downloading file
  Future result = storage.getFileDownload(
    bucketId: '[BUCKET_ID]',
    fileId: '[FILE_ID]',
  ).then((bytes) {
    final file = File('path_to_file/filename.ext');
    file.writeAsBytesSync(bytes)
  }).catchError((error) {
      print(error.response);
  })
}

//displaying image preview
FutureBuilder(
  future: storage.getFileDownload(
    bucketId: '[BUCKET_ID]',
    fileId: '[FILE_ID]',
  ), //works for both public file and private file, for private files you need to be logged in
  builder: (context, snapshot) {
    return snapshot.hasData && snapshot.data != null
      ? Image.memory(
          snapshot.data,
        )
      : CircularProgressIndicator();
  },
);
```
```swift
import Appwrite

func main() async throws {
    let client = Client()
      .setEndpoint("https://cloud.appwrite.io/v1") // Your API Endpoint
      .setProject("5df5acd0d48c2") // Your project ID
    let storage = Storage(client)
    let byteBuffer = try await storage.getFileDownload(
        bucketId: "[BUCKET_ID]",
        fileId: "[FILE_ID]"
    )

    print(String(describing: byteBuffer)
}
```
```kotlin
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.launch
import io.appwrite.Client
import io.appwrite.services.Storage

class MainActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val client = Client(applicationContext)
            .setEndpoint("https://cloud.appwrite.io/v1") // Your API Endpoint
            .setProject("5df5acd0d48c2") // Your project ID

        val storage = Storage(client)

        val result = storage.getFileDownload(
            bucketId = "[BUCKET_ID]",
            fileId = "[FILE_ID]"
        )
        println(result); // Resource URL
    }
}
```
{% /multicode %}

# Get File Preview {% #get-file-preview %}
To get a file preview image , use the `getFilePreview` method.

{% multicode %}
```js
import { Client, Storage } from "appwrite";

const client = new Client();

const storage = new Storage(client);

client
    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint
    .setProject('5df5acd0d48c2') // Your project ID
;

const result = storage.getFilePreview('[BUCKET_ID]', '[FILE_ID]');

console.log(result); // Resource URL
```
```dart
import 'package:appwrite/appwrite.dart';

void main() { // Init SDK
  Client client = Client();
  Storage storage = Storage(client);

  client
    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint
    .setProject('5df5acd0d48c2') // Your project ID
  ;
  // downloading file
  Future result = storage.getFilePreview(
    bucketId: '[BUCKET_ID]',
    fileId: '[FILE_ID]',
  ).then((bytes) {
    final file = File('path_to_file/filename.ext');
    file.writeAsBytesSync(bytes)
  }).catchError((error) {
      print(error.response);
  })
}

//displaying image preview
FutureBuilder(
  future: storage.getFilePreview(
    bucketId: '[BUCKET_ID]',
    fileId: '[FILE_ID]',
  ), //works for both public file and private file, for private files you need to be logged in
  builder: (context, snapshot) {
    return snapshot.hasData && snapshot.data != null
      ? Image.memory(
          snapshot.data,
        )
      : CircularProgressIndicator();
  },
);
```
```swift
import Appwrite

func main() async throws {
    let client = Client()
      .setEndpoint("https://cloud.appwrite.io/v1") // Your API Endpoint
      .setProject("5df5acd0d48c2") // Your project ID
    let storage = Storage(client)
    let byteBuffer = try await storage.getFilePreview(
        bucketId: "[BUCKET_ID]",
        fileId: "[FILE_ID]"
    )

    print(String(describing: byteBuffer)
}
```
```kotlin
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.launch
import io.appwrite.Client
import io.appwrite.services.Storage

class MainActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val client = Client(applicationContext)
            .setEndpoint("https://cloud.appwrite.io/v1") // Your API Endpoint
            .setProject("5df5acd0d48c2") // Your project ID

        val storage = Storage(client)

        val result = storage.getFilePreview(
            bucketId = "[BUCKET_ID]",
            fileId = "[FILE_ID]"
        )
        println(result); // Resource URL
    }
}
```
{% /multicode %}

# View File {% #view-file%}

To view a file, use the `getFileView` method.

{% multicode %}
```js
import { Client, Storage } from "appwrite";

const client = new Client();

const storage = new Storage(client);

client
    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint
    .setProject('5df5acd0d48c2') // Your project ID
;

const result = storage.getFileView('[BUCKET_ID]', '[FILE_ID]');

console.log(result); // Resource URL
```
```dart
import 'package:appwrite/appwrite.dart';

void main() { // Init SDK
  Client client = Client();
  Storage storage = Storage(client);

  client
    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint
    .setProject('5df5acd0d48c2') // Your project ID
  ;
  // downloading file
  Future result = storage.getFileView(
    bucketId: '[BUCKET_ID]',
    fileId: '[FILE_ID]',
  ).then((bytes) {
    final file = File('path_to_file/filename.ext');
    file.writeAsBytesSync(bytes)
  }).catchError((error) {
      print(error.response);
  })
}

//displaying image preview
FutureBuilder(
  future: storage.getFileView(
    bucketId: '[BUCKET_ID]',
    fileId: '[FILE_ID]',
  ), //works for both public file and private file, for private files you need to be logged in
  builder: (context, snapshot) {
    return snapshot.hasData && snapshot.data != null
      ? Image.memory(
          snapshot.data,
        )
      : CircularProgressIndicator();
  },
);
```
```swift
import Appwrite

func main() async throws {
    let client = Client()
      .setEndpoint("https://cloud.appwrite.io/v1") // Your API Endpoint
      .setProject("5df5acd0d48c2") // Your project ID
    let storage = Storage(client)
    let byteBuffer = try await storage.getFileView(
        bucketId: "[BUCKET_ID]",
        fileId: "[FILE_ID]"
    )

    print(String(describing: byteBuffer)
}
```
```kotlin
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.launch
import io.appwrite.Client
import io.appwrite.services.Storage

class MainActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val client = Client(applicationContext)
            .setEndpoint("https://cloud.appwrite.io/v1") // Your API Endpoint
            .setProject("5df5acd0d48c2") // Your project ID

        val storage = Storage(client)

        val result = storage.getFileView(
            bucketId = "[BUCKET_ID]",
            fileId = "[FILE_ID]"
        )
        println(result); // Resource URL
    }
}
```
{% /multicode %}