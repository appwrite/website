---
layout: article
title: Textmagic
description: Send SMS messages to your Appwrite users using Textmagic and Appwrite Messaging.
back: /docs/
---
Textmagic lets you send customized SMS messages to your users.
These SMS messages can be sent immediately or scheduled.
You can send SMS messages for purposes like reminders, promotions, announcements, and even custom authentication flows.

{% section #add-provider step=1 title="Add provider" %}

To add Textmagic as a provider, navigate to **Messaging** > **Providers** > {% icon icon="plus" size="m" /%} **Add provider** > **SMS**.
{% only_dark %}
![Add a Textmagic provider](/images/docs/messaging/providers/textmagic/dark/provider.png)
{% /only_dark %}
{% only_light %}
![Add a Textmagic provider](/images/docs/messaging/providers/textmagic/provider.png)
{% /only_light %}

Give your provider a name > choose **Textmagic** > click **Save and continue**.
The provider will be saved to your project, but not enabled until you complete its configuration.
{% /section %}
{% section #configure-provider step=2 title="Configure provider" %}

In the **Configure** step, you will need to provide details from your Textmagic dashboard to connect your Appwrite project.

You will need to provide the following information from your **Textmagic dashboard**.

{% table %}
* Field name
*
---
* API key
* Head to Textmagic dashboard > **Services** > **API** > **Add new API key**.
---
* Username
* Head to Textmagic dashboard > **My account** > **Username**.
---
* Sender number
* Head to Textmagic dashboard > **Services** > **Sender settings**.
{% /table %}

After adding the following details, click **Save and continue** to enable the provider.
{% /section %}

{% section #test-provider step=3 title="Test provider" %}
Before sending your first message,
make sure you've configured [a topic](/docs/products/messaging/topics) and [a target](/docs/products/messaging/targets) to send messages to.
{% tabs %}
{% tabsitem #console title="Console" %}
To send a test message, navigate to **Messaging** > **Messages** > {% icon icon="plus" size="m" /%} **Create message** > **SMS**.
{% only_dark %}
![Create an SMS message](/images/docs/messaging/messages/dark/create-sms-message.png)
{% /only_dark %}
{% only_light %}
![Create an SMS message](/images/docs/messaging/messages/create-sms-message.png)
{% /only_light %}

Add your message and in the targets step, select one of your test targets. Set the schedule to **Now** and click **Send**.

Verify that you can receive the message in your inbox. If not, check for logs in the Appwrite Console or in your provider's logs.
{% /tabsitem %}

{% tabsitem #server-sdk title="Server SDK" %}
To send a message programmatically, use an [Appwrite Server SDK](/docs/sdks#server).
{% multicode %}
```server-nodejs
const sdk = require('node-appwrite');

// Init SDK
const client = new sdk.Client();

const messaging = new sdk.Messaging(client);

client
    .setProject('<PROJECT_ID>')                  // Your project ID
    .setKey('<API_KEY>')                         // Your secret API key
;

const messaging = await messaging.createSms(
        '<MESSAGE_ID>',                          // messageId
        '<CONTENT>',                             // content
        [],                                      // topics (optional)
        [],                                      // users (optional)
        [],                                      // targets (optional)
        true,                                    // draft (optional)
        ''                                       // scheduledAt (optional)
    );
```
```deno
import * as sdk from "https://deno.land/x/appwrite/mod.ts";

// Init SDK
let client = new sdk.Client();

let messaging = new sdk.Messaging(client);

client
    .setProject('<PROJECT_ID>')                  // Your project ID
    .setKey('<API_KEY>')                         // Your secret API key
;

const messaging = await messaging.createSms(
        '<MESSAGE_ID>',                          // messageId
        '<CONTENT>',                             // content
        [],                                      // topics (optional)
        [],                                      // users (optional)
        [],                                      // targets (optional)
        true,                                    // draft (optional)
        ''                                       // scheduledAt (optional)
    );
```
```go
package main

import (
	"fmt"

	"github.com/appwrite/sdk-for-go/appwrite"
)

func main() {

	client := appwrite.NewClient(
		appwrite.WithProject("<PROJECT_ID>"),       // Your project ID
		appwrite.WithKey("<API_KEY>"),              // Your secret API key
	)

	messaging := appwrite.NewMessaging(client)

	message, _ := messaging.CreateSms(
		"<MESSAGE_ID>",                             // messageId
		"<CONTENT>",                                // content
		messaging.WithCreateSmsTopics([]string{}),  // topics (optional)
		messaging.WithCreateSmsUsers([]string{}),   // users (optional)
		messaging.WithCreateSmsTargets([]string{}), // targets (optional)
		messaging.WithCreateSmsDraft(false),        // draft (optional)
		messaging.WithCreateSmsScheduledAt(""),     // scheduledAt (optional)
	)

	fmt.Println(message)
}
```
```php
<?php

use Appwrite\Client;
use Appwrite\Services\Messaging;

$client = new Client();

$client
    ->setProject('<PROJECT_ID>')                  // Your project ID
    ->setKey('<API_KEY>')                         // Your secret API key
;

$messaging = new Messaging($client);

$result = $messaging->createSms(
    messageId: '<MESSAGE_ID>',                    // messageId
    content: '<CONTENT>',                         // content
    topics: [],                                   // topics (optional)
    users: [],                                    // users (optional)
    targets: [],                                  // targets (optional)
    draft: true,                                  // draft (optional)
    scheduledAt: ''                               // scheduledAt (optional)
);
```
```python
from appwrite.client import Client
from appwrite.services.messaging import Messaging

client = Client()

(client
  .set_project('<PROJECT_ID>')                  # Your project ID
  .set_key('<API_KEY>')                         # Your secret API key
)

messaging = Messaging(client)

result = messaging.create_sms(
    message_id = '<MESSAGE_ID>',                # messageId
    content = '<CONTENT>',                      # content
    topics = [],                                # topics (optional)
    users = [],                                 # users (optional)
    targets = [],                               # targets (optional)
    draft = True,                               # draft (optional)
    scheduled_at = ''                           # scheduledAt (optional)
)
```
```ruby
require 'appwrite'

include Appwrite

client = Client.new
    .set_project('<PROJECT_ID>')                  # Your project ID
    .set_key('<API_KEY>')                         # Your secret API key

messaging = Messaging.new(client)

response = messaging.create_sms(
    message_id: '<MESSAGE_ID>',                   # messageId
    content: '<CONTENT>',                         # content
    topics: [],                                   # topics (optional)
    users: [],                                    # users (optional)
    targets: [],                                  # targets (optional)
    draft: true,                                  # draft (optional)
    scheduled_at: ''                              # scheduledAt (optional)
)

puts response.inspect
```
```csharp
using Appwrite;
using Appwrite.Services;
using Appwrite.Models;

var client = new Client()
    .SetProject("<PROJECT_ID>")                   // Your project ID
    .SetKey("<API_KEY>");                         // Your secret API key

var messaging = new Messaging(client);

Message result = await messaging.CreateSMS(
    messageId: "<MESSAGE_ID>",                    // messageId
    content: "<CONTENT>"                          // content
    topics: new List<string> {}                   // topics (optional)
    users: new List<string> {}                    // users (optional)
    targets: new List<string> {}                  // targets (optional)
    draft: true                                   // draft (optional)
    scheduledAt: "");                             // scheduledAt (optional)
```
```dart
import 'package:dart_appwrite/dart_appwrite.dart';
import 'package:dart_appwrite/enums.dart';
import 'package:dart_appwrite/models.dart';

void main() {                                    // Init SDK
  Client client = Client();
  Messaging messaging = Messaging(client);

  client
    .setProject('<PROJECT_ID>')                  // Your project ID
    .setKey('<API_KEY>')                         // Your secret API key
  ;

  Future result = messaging.createSms(
    messageId: '<MESSAGE_ID>',                   // messageId
    content: '<CONTENT>',                        // content
    topics: [],                                  // topics (optional)
    users: [],                                   // users (optional)
    targets: [],                                 // targets (optional)
    draft: true,                                 // draft (optional)
    scheduledAt: '',                             // scheduledAt (optional)
  );

  result
    .then((response) {
      print(response);
    }).catchError((error) {
      print(error.response);
  });
}
```
```kotlin
import io.appwrite.Client;
import io.appwrite.coroutines.CoroutineCallback;
import io.appwrite.services.Messaging;

Client client = new Client()
    .setProject("<PROJECT_ID>")                   // Your project ID
    .setKey("<API_KEY>");                         // Your secret API key

Messaging messaging = new Messaging(client);

messaging.createSms(
    "<MESSAGE_ID>",                               // messageId
    "<CONTENT>",                                  // content
    listOf(),                                     // topics (optional)
    listOf(),                                     // users (optional)
    listOf(),                                     // targets (optional)
    true,                                         // draft (optional)
    ""                                            // scheduledAt (optional)
    new CoroutineCallback<>((result, error) -> {
        if (error != null) {
            error.printStackTrace();
            return;
        }

        System.out.println(result);
    })
);
```
```java
import io.appwrite.Client;
import io.appwrite.coroutines.CoroutineCallback;
import io.appwrite.services.Messaging;

Client client = new Client()
    .setProject("<PROJECT_ID>")                  // Your project ID
    .setKey("<API_KEY>"); // Your secret API key

Messaging messaging = new Messaging(client);

messaging.createSms(
    "<MESSAGE_ID>",                               // messageId
    "<CONTENT>",                                  // content
    listOf(),                                     // topics (optional)
    listOf(),                                     // users (optional)
    listOf(),                                     // targets (optional)
    true,                                         // draft (optional)
    ""                                            // scheduledAt (optional)
    new CoroutineCallback<>((result, error) -> {
        if (error != null) {
            error.printStackTrace();
            return;
        }

        System.out.println(result);
    })
);
```
```swift
import Appwrite

let client = Client()
    .setProject("<PROJECT_ID>")                  // Your project ID
    .setKey("<API_KEY>")                         // Your secret API key

let messaging = Messaging(client)

let message = try await messaging.createSms(
  messageId: "<MESSAGE_ID>",                     // messageId
  content: "<CONTENT>",                          // content
  topics: [],                                    // topics (optional)
  users: [],                                     // users (optional)
  targets: [],                                   // targets (optional)
  draft: true,                                   // draft (optional)
  scheduledAt: ""                                // scheduledAt (optional)
)
```
{% /multicode %}
{% /tabsitem %}
{% /tabs %}

You can follow the [Send SMS messages](/docs/products/messaging/send-sms-messages) journey to send your first push notification and test your provider.
{% /section %}

{% section #manage-provider step=4 title="Manage provider" %}
{% tabs %}
{% tabsitem #console title="Console" %}
You can update or delete a provider in the Appwrite Console.

Navigate to **Messaging** > **Providers** > click your provider.
In the settings, you can update a provider's configuration or delete the provider.
{% /tabsitem %}

{% tabsitem #server-sdk title="Server SDK" %}
To update or delete providers programmatically, use an [Appwrite Server SDK](/docs/sdks#server).
{% multicode %}
```server-nodejs
const sdk = require('node-appwrite');

// Init SDK
const client = new sdk.Client();

const messaging = new sdk.Messaging(client);

client
    .setProject('<PROJECT_ID>')                  // Your project ID
    .setKey('<API_KEY>')                         // Your secret API key
;

const provider = await messaging.updateTextmagicProvider(
        '<PROVIDER_ID>',                         // providerId
        '<NAME>',                                // name (optional)
        false,                                   // enabled (optional)
        '<USERNAME>',                            // username (optional)
        '<API_KEY>',                             // apiKey (optional)
        '<FROM>'                                 // from (optional)
    );
```
```deno
import * as sdk from "https://deno.land/x/appwrite/mod.ts";

// Init SDK
let client = new sdk.Client();

let messaging = new sdk.Messaging(client);

client
    .setProject('<PROJECT_ID>')                  // Your project ID
    .setKey('<API_KEY>')                         // Your secret API key
;

const provider = await messaging.updateTextmagicProvider(
        '<PROVIDER_ID>',                         // providerId
        '<NAME>',                                // name (optional)
        false,                                   // enabled (optional)
        '<USERNAME>',                            // username (optional)
        '<API_KEY>',                             // apiKey (optional)
        '<FROM>'                                 // from (optional)
    );
```
```go
package handler

import (
	"fmt"

	"github.com/appwrite/sdk-for-go/appwrite"
)

func main() {
	client := appwrite.NewClient(
		appwrite.WithProject("<PROJECT_ID>"),                        // Your project ID
		appwrite.WithKey("<API_KEY>"),                               // Your secret API key
	)

	messaging := appwrite.NewMessaging(client)

	topic, _ := messaging.UpdateTextmagicProvider(
		"<PROVIDER_ID>",                                             // providerId   
		messaging.WithUpdateTextmagicProviderName("<NAME>"),         // name (optional) 
		messaging.WithUpdateTextmagicProviderEnabled(false),         // enabled (optional)
		messaging.WithUpdateTextmagicProviderUsername("<USERNAME>"), // username (optional)
		messaging.WithUpdateTextmagicProviderApiKey("<API_KEY>"),    // apiKey (optional)
		messaging.WithUpdateTextmagicProviderFrom("<FROM>"),         // from (optional) 
	)

	fmt.Println(topic)
}
```
```php
<?php

use Appwrite\Client;
use Appwrite\Services\Messaging;

$client = new Client();

$client
    ->setProject('<PROJECT_ID>')                  // Your project ID
    ->setKey('<API_KEY>')                         // Your secret API key
;

$messaging = new Messaging($client);

$result = $messaging->updateTextmagicProvider(
    providerId: '<PROVIDER_ID>',                  // providerId
    name: '<NAME>',                               // name (optional)
    enabled: false,                               // enabled (optional)
    username: '<USERNAME>',                       // username (optional)
    apiKey: '<API_KEY>',                          // apiKey (optional)
    from: '<FROM>'                                // from (optional)
);
```
```python
from appwrite.client import Client
from appwrite.services.messaging import Messaging

client = Client()

(client
  .set_project('<PROJECT_ID>')                  # Your project ID
  .set_key('<API_KEY>')                         # Your secret API key
)

messaging = Messaging(client)

result = messaging.update_textmagic_provider(
    provider_id = '<PROVIDER_ID>',              # providerId
    name = '<NAME>',                            # name (optional)
    enabled = False,                            # enabled (optional)
    username = '<USERNAME>',                    # username (optional)
    api_key = '<API_KEY>',                      # apiKey (optional)
    from = '<FROM>'                             # from (optional)
)
```
```ruby
require 'appwrite'

include Appwrite

client = Client.new
    .set_project('<PROJECT_ID>')                  # Your project ID
    .set_key('<API_KEY>')                         # Your secret API key

messaging = Messaging.new(client)

response = messaging.update_textmagic_provider(
    provider_id: '<PROVIDER_ID>',                 # providerId
    name: '<NAME>',                               # name (optional)
    enabled: false,                               # enabled (optional)
    username: '<USERNAME>',                       # username (optional)
    api_key: '<API_KEY>',                         # apiKey (optional)
    from: '<FROM>'                                # from (optional)
)

puts response.inspect
```
```csharp
using Appwrite;
using Appwrite.Services;
using Appwrite.Models;

var client = new Client()
    .SetProject("<PROJECT_ID>")                   // Your project ID
    .SetKey("<API_KEY>");                         // Your secret API key

var messaging = new Messaging(client);

Provider result = await messaging.UpdateTextmagicProvider(
    providerId: "<PROVIDER_ID>"                   // providerId
    name: "<NAME>"                                // name (optional)
    enabled: false                                // enabled (optional)
    username: "<USERNAME>"                        // username (optional)
    apiKey: "<API_KEY>"                           // apiKey (optional)
    from: "<FROM>");                              // from (optional)
```
```dart
import 'package:dart_appwrite/dart_appwrite.dart';
import 'package:dart_appwrite/enums.dart';
import 'package:dart_appwrite/models.dart';

void main() {                                    // Init SDK
  Client client = Client();
  Messaging messaging = Messaging(client);

  client
    .setProject('<PROJECT_ID>')                  // Your project ID
    .setKey('<API_KEY>')                         // Your secret API key
  ;

  Future result = messaging.updateTextmagicProvider(
    providerId: '<PROVIDER_ID>',                 // providerId
    name: '<NAME>',                              // name (optional)
    enabled: false,                              // enabled (optional)
    username: '<USERNAME>',                      // username (optional)
    apiKey: '<API_KEY>',                         // apiKey (optional)
    from: '<FROM>',                              // from (optional)
  );

  result
    .then((response) {
      print(response);
    }).catchError((error) {
      print(error.response);
  });
}
```
```kotlin
import io.appwrite.Client;
import io.appwrite.coroutines.CoroutineCallback;
import io.appwrite.services.Messaging;

Client client = new Client()
    .setProject("<PROJECT_ID>")                   // Your project ID
    .setKey("<API_KEY>");                         // Your secret API key

Messaging messaging = new Messaging(client);

messaging.updateTextmagicProvider(
    "<PROVIDER_ID>",                              // providerId
    "<NAME>",                                     // name (optional)
    false,                                        // enabled (optional)
    "<USERNAME>",                                 // username (optional)
    "<API_KEY>",                                  // apiKey (optional)
    "<FROM>"                                      // from (optional)
    new CoroutineCallback<>((result, error) -> {
        if (error != null) {
            error.printStackTrace();
            return;
        }

        System.out.println(result);
    })
);
```
```java
import io.appwrite.Client;
import io.appwrite.coroutines.CoroutineCallback;
import io.appwrite.services.Messaging;

Client client = new Client()
    .setProject("<PROJECT_ID>")                   // Your project ID
    .setKey("<API_KEY>");                         // Your secret API key

Messaging messaging = new Messaging(client);

messaging.updateTextmagicProvider(
    "<PROVIDER_ID>",                              // providerId
    "<NAME>",                                     // name (optional)
    false,                                        // enabled (optional)
    "<USERNAME>",                                 // username (optional)
    "<API_KEY>",                                  // apiKey (optional)
    "<FROM>"                                      // from (optional)
    new CoroutineCallback<>((result, error) -> {
        if (error != null) {
            error.printStackTrace();
            return;
        }

        System.out.println(result);
    })
);
```
```swift
import Appwrite

let client = Client()
    .setProject("<PROJECT_ID>")                  // Your project ID
    .setKey("<API_KEY>")                         // Your secret API key

let messaging = Messaging(client)

let provider = try await messaging.updateTextmagicProvider(
  providerId: "<PROVIDER_ID>",                   // providerId
  name: "<NAME>",                                // name (optional)
  enabled: xfalse,                               // enabled (optional)
  username: "<USERNAME>",                        // username (optional)
  apiKey: "<API_KEY>",                           // apiKey (optional)
  from: "<FROM>"                                 // from (optional)
)
```
{% /multicode %}
{% /tabsitem %}
{% /tabs %}
{% /section %}
