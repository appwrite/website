---
layout: article
title: Develop locally
description: Learn to develop Appwrite functions locally.
---

Develop your Appwrite functions locally to make code changes without redeploying your function on every code change and hot reload your code for faster testing.

# Setup {% #setup %}

We use Docker to replicate the production environment for the local deployment of functions. These can be executed locally with the CLI command, which requires initializing a project with an `appwrite.json` file and having local code to run the function locally. The CLI also supports various other [CLI commands](/docs/tooling/command-line/commands).

1. Install the [Docker CLI](https://www.docker.com/products/docker-desktop/)
2. Ensure Docker is running in the background
3. Install the [Appwrite CLI](/docs/tooling/command-line/installation#getting-started)
4. [Log in](/docs/tooling/command-line/installation#login) to your Appwrite account using `appwrite login`
5. [Initialize your project](/docs/tooling/command-line/installation#initialization)
6. [Initialize an Appwrite function](/docs/tooling/command-line/functions) and copy and paste your code

# Develop {% #develop %}

Use the `appwrite run functions` command to develop your function locally.

```sh
appwrite run functions
? Which function would you like to develop locally? My Awesome Function ("<FUNCTION_ID>")

 runtime   | entrypoint  | path                           | commands     
-----------|-------------|--------------------------------|--------------
 node-16.0 | src/main.js | functions/<FUNCTION_ID>      | npm install  

ℹ Info: If you wish to change your local settings, update the appwrite.json file and rerun the 'appwrite run' command.
♥ Hint: Permissions, events, CRON and timeouts dont apply when running locally.
ℹ Info: Pulling Docker image ...
♥ Hint: This may take a few minutes, but we only need to do this once.
ℹ Info: Building function using Docker ...
Preparing for build ...

Building ...


added 4 packages, and audited 5 packages in 2s


1 package is looking for funding
  run `npm fund` for details


found 0 vulnerabilities

Packing build ...

Build finished.

ℹ Info: Starting function using Docker ...
♥ Hint: Function automatically restarts when you edit your code.
✓ Success: Visit http://localhost:3000/ to execute your function.
```

This command helps you efficiently develop your Appwrite functions on your local machine. Modifying your function code will automatically restart the function to run with the updated code. When developing your Appwrite function locally, it will receive [headers](/docs/products/functions/develop#headers) like a function deployed to Appwrite.

{% arrow_link href="/docs/products/functions/develop" %}
Learn more about developing a function
{% /arrow_link %}

# Dynamic API keys {% #dynamic-api-keys %}

You can use headers like dynamic API keys in your function, which give you access to your project services and allow you to operate without sessions. To configure your dynamic API key scopes, modify the scopes in the `appwrite.json` file.
  
{% arrow_link href="/docs/products/functions/develop#dynamic-api-key" %}
Learn more about dynamic API keys
{% /arrow_link %}

# Impersonate user {% #impersonate-user %}

You can also impersonate a user when you develop a function locally. Impersonate a user using the `--user-id <USER_ID>` option to select a user you want to use for testing. This allows you to test if the user can perform specific actions, such as creating a document.

When using the `--user-id <USER_ID>` endpoint, the CLI will check and return an error if the user does not exist. But if a user does exist, a [JWT token](/docs/products/auth/jwt#jwt) will be generated and last for 1 hour, similar to API tokens. If the user exists, the header `x-appwrite-user-jwt` will be set with the userId value and the `x-appwrite-user-jwt` header will be set with the generated JWT token value.

```sh
appwrite run functions --user-id "<USER_ID>"
```

# Push function {% #push-function %}

Once you've developed your function, push it by running the following CLI command

```sh
appwrite push functions
```