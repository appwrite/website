---
layout: article
title: Execution
description: Understand serverless function execution in Appwrite. Explore how triggers, events, and data flow enable dynamic execution of your code.
---

Each time an Appwrite Function runs, an **execution** is created.
Each execution has a unique ID. If [you enable execution logs](/docs/products/functions/functions#execution-logs) in your function,
you can find function executions logged in the **Executions** tab.

# Execution table {% #execution-table %}

In your function's **Executions** tab, you will see a table of your recent executions.
Here's the information shown on this table.

{% table %}
- Column
- Description
---
- EXECUTION ID
- Unique identifier for each execution
---
- STATUS
- The current status of the execution
---
- CREATED
- Timestamp of when the execution was created
---
- TRIGGER
- The [platform event](/docs/advanced/platform/events) that triggered the execution
---
- METHOD
- The HTTP method used to create the execution
---
- PATH
- The URL path the function execution was called with
---
- DURATION
- The time taken for the execution
{% /table %}

## Execution status {% #execution-status %}

Each execution can have one of the follow status.

{% table %}
- Status
- description
---
- `processing`
- The function execution has begun and has not finished.
---
- `completed`
- The function executed successfully.
---
- `failed`
- The function execution was not successful.
{% /table %}

# Execution details {% #execution-details %}

When you click on an execution, you will be taken to an execution detail screen.

{% only_dark %}
![Execution details screen](/images/docs/functions/execution/dark/execute-function.png)
{% /only_dark %}

{% only_light %}
![Execution details screen](/images/docs/functions/execution/execute-function.png)
{% /only_light %}

You can find both request and response details.
Request and response body are **not logged** to protect user privacy.
This ensures that developers do not see user data by default and no sensitive data is retained.

If you need to log debug data or audit logs, you can use [function logging features](/docs/products/functions/develop#logging)
to explicitly log the information you need.

# Log retention {% #log-retention %}

Logs are not retained forever in order to be compliant with GDPR and other data privacy standards.
Free plan organizations will retain logs for 24 hours, Pro plan organizations will retain logs for 7 days.

If you need longer log retention, you can log to an Appwrite collection.
Remember to configure proper permissions and implement Appwrite Functions or other scheduled tasks to expire and clean up logs.

# Delayed executions {% #delayed-executions %}

Delayed executions are queued to trigger the function for a future date and time. Schedule a execution by navigating to **Your function** > **Executions** > **Execute now** > **Schedule**.

{% only_dark %}
![Add a SMTP provider](/images/docs/functions/execution/dark/scheduled-execution-function.png)
{% /only_dark %}
{% only_light %}
![Add a SMTP provider](/images/docs/functions/execution/scheduled-execution-function.png)
{% /only_light %}

```server-nodejs
const sdk = require('node-appwrite');

const client = new sdk.Client()
    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint
    .setProject(<PROJECT_ID>) // Your project ID
    .setSession(''); // The user session to authenticate with

const functions = new sdk.Functions(client);

const result = await functions.createExecution(
    '<FUNCTION_ID>', // functionId
    '2020-10-15T06:38:00.000+00:00' // optional parameter to schedule function execution
);
```

```php
<?php

use Appwrite\Client;
use Appwrite\Services\Functions;

$client = (new Client())
    ->setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint
    ->setProject(<PROJECT_ID>) // Your project ID
    ->setSession(''); // The user session to authenticate with

$functions = new Functions($client);

$result = $functions->createExecution(
    functionId: '<FUNCTION_ID>',
    scheduled: '2020-10-15T06:38:00.000+00:00' // optional parameter to schedule function execution
);
```

```python
from appwrite.client import Client

client = Client()
client.set_endpoint('https://cloud.appwrite.io/v1') # Your API Endpoint
client.set_project(<PROJECT_ID>) # Your project ID
client.set_session('') # The user session to authenticate with

functions = Functions(client)

result = functions.create_execution(
    function_id = '<FUNCTION_ID>',
    scheduled ='2020-10-15T06:38:00.000+00:00' // optional parameter to schedule function execution
)
```

```ruby
require 'appwrite'

include Appwrite

client = Client.new
    .set_endpoint('https://cloud.appwrite.io/v1') # Your API Endpoint
    .set_project('5df5acd0d48c2') # Your project ID
    .set_session('') # The user session to authenticate with

functions = Functions.new(client)

result = functions.create_execution(
    function_id: '<FUNCTION_ID>',
    scheduled: '2020-10-15T06:38:00.000+00:00' // optional parameter to schedule function execution
)
```

```deno
import { Client, Functions, ExecutionMethod } from "https://deno.land/x/appwrite/mod.ts";

const client = new Client()
    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint
    .setProject(<PROJECT_ID>) // Your project ID
    .setSession(''); // The user session to authenticate with

const functions = new Functions(client);

const response = await functions.createExecution(
    '<FUNCTION_ID>', // functionId
    '2020-10-15T06:38:00.000+00:00' // optional parameter to schedule function execution
);
```

```dart
import 'package:dart_appwrite/dart_appwrite.dart';

Client client = Client()
    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint
    .setProject(<PROJECT_ID>) // Your project ID
    .setSession(''); // The user session to authenticate with

Functions functions = Functions(client);

Execution result = await functions.createExecution(
    functionId: '<FUNCTION_ID>',
    scheduled: '2020-10-15T06:38:00.000+00:00' // optional parameter to schedule function execution
);
```

```kotlin
import io.appwrite.Client
import io.appwrite.coroutines.CoroutineCallback
import io.appwrite.services.Functions

val client = Client()
    .setEndpoint("https://cloud.appwrite.io/v1") // Your API Endpoint
    .setProject(<PROJECT_ID>) // Your project ID
    .setSession("") // The user session to authenticate with

val functions = Functions(client)

val response = functions.createExecution(
    functionId = "<FUNCTION_ID>",
    "2020-10-15T06:38:00.000+00:00" // optional parameter to schedule function execution
)
```

```java
import io.appwrite.Client;
import io.appwrite.coroutines.CoroutineCallback;
import io.appwrite.services.Functions;

Client client = new Client()
    .setEndpoint("https://cloud.appwrite.io/v1") // Your API Endpoint
    .setProject(<PROJECT_ID>) // Your project ID
    .setSession(""); // The user session to authenticate with

Functions functions = new Functions(client);

functions.createExecution(
    "<FUNCTION_ID>", // functionId
    "2020-10-15T06:38:00.000+00:00" // optional parameter to schedule function execution
    new CoroutineCallback<>((result, error) -> {
        if (error != null) {
            error.printStackTrace();
            return;
        }

        System.out.println(result);
    })
);

```

```swift
import Appwrite
import AppwriteEnums

let client = Client()
    .setEndpoint("https://cloud.appwrite.io/v1") // Your API Endpoint
    .setProject(<PROJECT_ID>) // Your project ID
    .setSession("") // The user session to authenticate with

let functions = Functions(client)

let execution = try await functions.createExecution(
    functionId: "<FUNCTION_ID>",
    scheduled: "2020-10-15T06:38:00.000+00:00" // optional parameter to schedule function execution
)
```

```csharp
using Appwrite;
using Appwrite.Enums;
using Appwrite.Models;
using Appwrite.Services;

Client client = new Client()
    .SetEndPoint("https://cloud.appwrite.io/v1") // Your API Endpoint
    .SetProject(<PROJECT_ID>) // Your project ID
    .SetSession(""); // The user session to authenticate with

Functions functions = new Functions(client);

Execution result = await functions.CreateExecution(
    functionId: "<FUNCTION_ID>",
    scheduled: "2020-10-15T06:38:00.000+00:00" // optional parameter to schedule function execution
);
```