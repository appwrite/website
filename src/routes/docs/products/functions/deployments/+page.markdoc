---
layout: article
title: Deployment
description: Efficiently deploy your serverless functions with Appwrite. Explore deployment options, strategies, and best practices for seamless function execution.
---

Each function can have many deployments, which can be thought of as versions of the mini-application.
Functions can be created and deployed in different ways to meet your unique development habits. 

You can automatically deploy Appwrite Functions from source control, build your own deployment pipelines using the Appwrite CLI, or upload code files manually. 
Here's everything you need to know to deploy your first Appwrite Function.

# Create deployment {% #create-deployment %}
Before you create a new deployment, make sure you have [created a function](/docs/products/functions/functions#create-function) to deploy.

{% tabs %}
{% tabsitem #git title="Git" %}
1. Using Git, checkout the branch you configured as the production branch when creating the Appwrite Function.
2. Create a new commit.
3. Push your new commit.
4. A new deployment will be automatically created, built and activated.

You can also create a pull request to your branch. Upon merging to your connected branch, a new deployment will also be created.
{% /tabsitem %}

{% tabsitem #manual title="Manual" %}
You can upload your functions to be deployed using the Appwrite Console. The example below shows a simple Node.js function.

```text
.
├── package.json
└── index.js
```

First, navigate inside the folder that contains your dependency file. Package your code files into the `.tar.gz` format:

{% multicode %}
  ```bash
  tar --exclude code.tar.gz -czf code.tar.gz .
  ```
  ```cmd
  tar --exclude code.tar.gz -czf code.tar.gz .
  ```
  ```powershell
  tar --exclude code.tar.gz -czf code.tar.gz .
  ```
{% /multicode %}


Next, navigate to your Appwrite Console and upload the function.

1. Navigate to the function you want to deploy.
2. Click **Create deployment**.
3. Select the **Manual** tab.
4. Input the entry point of your function under **Entrypoint**. For the example above, it would be `index.js`.
5. Upload `code.tar.gz`.
6. Select **Activate deployment after build**.
7. Click **Create**.
{% /tabsitem %}

{% tabsitem #cli title="CLI" %}
Before you can deploy with the Appwrite CLI, make sure you've [initialized the CLI.](/docs/tooling/command-line/installation)

Navigate to the folder holding your `appwrite.json` configuration file.
Edit the generated code, add dependencies, and deploy the function using the following command:

{% info title="Overwrite warning" %}
If you made changes in the Appwrite Console that are different from your `appwrite.json`, using the CLI deploy command will overwrite your console changes. Update your `appwrite.json` manually before deploying.
{% /info %}

```bash
appwrite deploy function
```
{% /tabsitem %}
{% /tabs %}

# Deployment status {% #deployment-status %}
Throughout the life cycle of a deployment, it could have the following status.

{% table %}
* Status 
* description
---
* `active`
* The deployment is built and currently activated and ready to be executed. A function can have one active deployment and deployment a must be active before being executed.
---
* `ready`
* A deployment is built, but is not activated. `ready` deployments can be activated to replace the current active deployment.
---
* `building`
* A deployment is being built. Check the [build log](#build-logs) for more detailed logs.
---
* `failed`
* A deployment was not successful. Check the [build log](#build-logs) for detailed logs for debugging.
{% /table %}

# Update deployment {% #update-deployment %}
Some Function settings require redeploying your function to be reflected in your active deployment.
When you update a functions **Git settings**, **Build settings**, and **Environment variables**, 
you need to redeploy your function before they take effect.

# Build logs  {% #build-logs %}
When you build a deployment, the logs generated will be saved for debugging purposes.
You can find build logs by navigating to the **deployments** tab of your function, clicking the three-dots menu beside, and click **Logs**.

# Redeploy Builds {% #redeploy %} 

After updating the configuration, redeploy your function for changes to take effect. You can also redeploy to retry failed builds.

1. Navigate to **Functions**.
2. Open the function you wish to inspect.
3. Under the **Deployments** tab, find the status of the current active deployment.
4. Redeploy by clicking the triple-dots beside an execution, and hitting the **Redeploy** button.

Redeployment behavior varies depending on how the initial deployment was created.
