---
layout: article
title: Deployment
description: Efficiently deploy your serverless functions with Appwrite. Explore deployment options, strategies, and best practices for seamless function execution.
---

Each function can have many deployments, which can be thought of as versions of the mini-application.
Functions can be created and deployed in different ways to meet your unique development habits. 

You can automatically deploy Appwrite Functions from source control, build your own deployment pipelines using the Appwrite CLI, or upload code files manually. 
Here's everything you need to know to deploy your first Appwrite Function.

## Deployment status {% #deployment-status %}
Throughout the life cycle of a deployment, it could have the following status.

{% table %}
* Status 
* description
---
* `active`
* The deployment is built and currently activated and ready to be executed. A function can have one active deployment and deployment a must be active before being executed.
---
* `ready`
* A deployment is built, but is not activated. `ready` deployments can be activated to replace the current active deployment.
---
* `building`
* A deployment is being built. Check the [build log](#build-log) for more detailed logs.
---
* `failed`
* A deployment was not successful. Check the [build log](#build-log) for detailed logs for debugging.
{% /table %}

## Update deployment {% #update-deployment %}
Some Function settings require redeploying your function to be reflected in your active deployment.
When you update a functions **Git settings**, **Build settings**, and **Environment variables**, 
you need to redeploy your function before they take effect.

## Build logs  {% #build-logs %}
When you build a deployment, the logs generated will be saved for debugging purposes.
You can find build logs by navigating to the **deployments** tab of your function, clicking the three-dots menu beside, and click **Logs**.

