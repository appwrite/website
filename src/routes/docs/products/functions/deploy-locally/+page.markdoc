---
layout: article
title: Deploy locally
description: Learn to deploy Appwrite functions locally.
---

To deploy a function locally, use the following command:

```bash
appwrite run functions
```

This command is designed to help you efficiently deploy your Appwrite projects to your local machine.

# Engine {% #engine %}

When following the wizard, you'll be asked to choose an engine for your local development. There are benefits to using either [Docker](https://www.docker.com/) or your system directly.
Using the system directly is faster, but Docker simulates the production environment more precisely.

# Production vs local {% #production-vs-local %}

{% tabs %}
{% tabsitem #production title="Production" %}
When deploying your function in production, you have to deploy it first in order to run the function. Every change in the code requires you to redeploy the function. It also needs two projects so it keeps production intact while developing.
{% /tabsitem %}
{% tabsitem #local title="Local"%}
If you're locally deploying a function, all their executions use HTTP. Locally developed functions do not require execution permissions; you only need to visit the function URL to execute it. You can also mock a user to execute the function as a specific user to test your locally developed function.
{% /tabsitem %}
{% /tabs %}

{% arrow_link href="/docs/products/functions/develop" %}
Learn how to develop a function
{% /arrow_link %}

# Configure-settings {% #Configure-settings %}

Function settings like scopes, timeout, entrypoint, or build command will be read from the [`appwrite.json`](/docs/tooling/command-line/functions#appwritejson) file. Edit the file to apply settings locally and use the `appwrite push functions` to apply your configurated settings to production.

{% arrow_link href="/docs/tooling/command-line/functions#commands" %}
Deploy functions using CLI commands
{% /arrow_link %}


# CI/CD flows {% #cicd-flows %}

We can use Appwrite CLI to automate changes in collection attributes such as adding, recreating, and deleting collections. For example, publishing a new release would go through the following steps:

1. Clone the repo
2. Adds Node (Since Appwrite CLI uses Node)
3. Login to account using secrets
4. Push all available collections with `--force flag` to confirm all changes

See an example of what this would look like in code:

```yaml
name: Database Migrations

on:
  release:
    types: [ published ]

jobs:
  migrate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v3
      - name: Login
        run: npx appwrite login --email ${{ secrets.EMAIL }} --password ${{ secrets.PASSWORD }}
      - name: Migrate collections
        run: npx appwrite push collections --all --force
```