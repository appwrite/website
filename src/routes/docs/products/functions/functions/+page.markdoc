---
layout: article
title: Functions
description: Learn what an Appwrite Function can do for you and how to create a new Appwrite Function
---

Each Appwrite Function is a piece of developer defined code that can be executed on demand.
When you create a new Appwrite Function, you select a name, ID, and [runtime language](/docs/products/functions/runtimes).

Each time a function's code is updated, a [deployment](/docs/products/functions/deployments) is created, which is like a version of a function.
Each function has a single active deployment, which is the version of code that's executed when it's called.
You can update the Appwrite Function's code by creating new [deployments](/docs/products/functions/deploy-from-git). 
You can also switch between different deployments by activating them.

# Create function {% #create-function %}
You can create Appwrite Functions in three different ways.

{% tabs %}
{% tabsitem #git title="Git" %}
It's recommended to create functions that are connected to version control. 
This lets you track your code using Git, which makes it easy to integrate Appwrite Functions into your existing code base.
1. In the Appwrite Console's sidebar, click **Functions**.
2. Click **Create function**.
3. Connect your project to your Git provider. You will be asked to authorize Appwrite and grant access to some resources necessary for the Git deployments to work.
4. If you already have a repository containing an Appwrite Function, select it under **Connect Git repository**. 
If you need to create a new function, select a **Quick start** template or search for more templates under **All templates**.
5. Follow the wizard to configure your new Appwrite Function.
{% only_dark %}
![Create project screen](/images/docs/functions/dark/template.png)
{% /only_dark %}
{% only_light %}
![Create project screen](/images/docs/functions/template.png)
{% /only_light %}
{% /tabsitem %}

{% tabsitem #manual title="Manual" %}
You can also create Appwrite Functions manually by uploading your code in a zipped file.
In the **Create Function** modal, click **create a function manually** at the bottom to switch to manual create wizard.
You will be asked to upload a zip file with your code.

First, navigate inside the folder that contains your dependency file. 
For example, when you list the content of your folder for a Node.js function, it will look like this.

```text
.
├── package.json
└── index.js
```

Package your code files into the `.tar.gz` format. **Don't include your dependencies folder**, such as `node_modules`.

{% multicode %}
  ```bash
  tar --exclude code.tar.gz -czf code.tar.gz .
  ```
  ```cmd
  tar --exclude code.tar.gz -czf code.tar.gz .
  ```
  ```powershell
  tar --exclude code.tar.gz -czf code.tar.gz .
  ```
{% /multicode %}

Upload your `.tar.gz` file and specify the entry point of your function, in this case `index.js`.
Remember to specify the build commands for your function to install dependencies.
{% /tabsitem %}

{% tabsitem #cli title="CLI" %}
You can create functions using the CLI, without needing to access the Console.
Before you can deploy with the Appwrite CLI, make sure you've [initialized the CLI.](/docs/tooling/command-line/installation)

To deploy with the Appwrite CLI, your function must be added to your `appwrite.json` config file. 
Use the `appwrite init function` method to create a starter function, then paste in your function code.

```bash
appwrite init function
```

The init command will initialize a folder with a starter function code.
To deploy the generated code, add dependencies, and deploy the function using the following command:

```bash
appwrite deploy function
```
{% /tabsitem %}
{% /tabs %}

# Configuration {% #configuration %}

## Name {% #name %}
You can update the name of your function by navigating to your function > **Settings** > **Name**.
Update your function's name and click **Update**.
Functions are executed using it's ID, updating name does not affect references to your function.

## Runtime {% #runtime %}
Every deployment of a function uses the same runtime. 
You can update the runtime of a function by navigating to function > **Settings** > **Runtime**.
Select a new runtime and click **Update**.

{% info title="Redeployment required" %}
This change requires your function to be redeployed to take effect.
{% /info %}

## Build configuration {% #build-configuration %}
You can update the entrypoint file and build settings of your function by navigating to your function > 
**Settings** > **Configuration**. 

{% info title="Redeployment required" %}
This change requires your function to be redeployed to take effect.
{% /info %}

The **Entrypoint** refers to the file imported and executed by the function executor. 
It must export a [valid function entrypoint function](/docs/products/functions/develop#entrypoint).
It's recommended you use one of the [starter function templates](/docs/products/functions/templates) and edit from there.

Under **Build settings**, you can update your build commands. 
These are terminal commands that will be executed in the runtime containers in the build step of the deployment process.

## Git integration {% #git-integration %}
You can update the entrypoint file and build settings of your function by navigating to your function > **Settings** > **Configuration**.

{% info title="Redeployment required" %}
This change requires your function to be redeployed to take effect.
{% /info %}

Under **Git settings** you can configure the Git repository and branch that your function is connected to.

Build commands and entrypoint are executed relative to the configured **Root directory** of your Git respository.

By default, Appwrite will create comments in PRs to your connected branch. You can use **Silent mode** to suppress these comments.

## Execution logs {% #execution-logs %}
You can enable and disable execution logs for your functions by navigating to your function > **Settings** > **Execution logs**
In production environments, you can choose to disable execution logs to protect user privacy.

## Execute access {% #execution-access %}
You can control who can execute your functions
by navigating to your function > **Settings** > **Execute access**
and granting access to select [permission roles](/docs/advanced/platform/permissions#permission-roles).

If this is left empty, no user can execute your function.
Server SDKs, scheduled executions, and event function triggers don't require permissions to execute a function.

## Events{% #events %}
Functions can be triggered by [platform events](/docs/advanced/platform/events) which reflect changes 
that occur in your Appwrite project.
You can configure events triggers by navigating to your function > **Settings** > **Events**.

## Schedule {% #schedule %}

Appwrite supports scheduled function executions. 
You can schedule executions using [cron expressions](https://en.wikipedia.org/wiki/Cron) in the settings of your function. 
Cron supports recurring executions as frequently as **every minute**.

You can configure events triggers by navigating to your function > **Settings** > **Schedule**.

Here are some cron expressions for common intervals:

| Cron Expression  | Schedule              |
| ---------------- | --------------------- |
| `*/15 * * * *`   | Every 15 minutes      |
| `0 * * * *`      | Every Hour            |
| `0 0 * * *`      | Every day at 00:00    |
| `0 0 * * 1`      | Every Monday at 00:00 |

## Environment variables {% #environment-variables %}
Set static environment variables that will be passed to your function 
by navigating to your function > **Settings** > **Environment variables**.

You can also configure global variables that apply to all your functions in the **Settings** of your project.

{% info title="Redeployment required" %}
This change requires your function to be redeployed to take effect.
{% /info %}

You can access environment variables inside functions using your [runtime language's system methods](/docs/products/functions/develop#environment-variables).

## Timeout {% #timeout %}
You can limit the execution time of your function by navigating to your function > **Settings** > **Timeout**.
There is a system wide maximum timeout of 900 seconds (15 minutes).
