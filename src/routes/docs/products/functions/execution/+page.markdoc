---
layout: article
title: Execution
description: Understand serverless function execution in Appwrite. Explore how triggers, events, and data flow enable dynamic execution of your code.
difficulty: beginner
readtime: 3
---


Appwrite Functions can be executed in several ways.
Executions can be invoked through the Appwrite SDK and visiting its REST endpoint. Functions can also be triggered by events and scheduled executions.
Here are all the different ways to consume your Appwrite Functions.

# Domains {% #domains %}

1. In the Appwrite Console's sidebar, click **Functions**.
1. Under the **Domains** tab, you'll find the generated domain from Appwrite and your custom domains.

```bash
https://64d4d22db370ae41a32e.appwrite.global
```

[Learn about adding a custom domain](/docs/products/functions/deployment#domains).

## REST API  {% #rest %}

When requests are made to this domain, whether through a browser or through an HTTP requests,
the request information like request URL, request headers, and request body will be passed to the function.
This unlocks ability for Appwrite Function to become a full-blown API server on its own. It also allows accepting incoming webhooks for handling online payments, hosting social platform bots, and much more.

```bash
curl -X POST https://64d4d22db370ae41a32e.appwrite.global \
-H "X-Custom-Header: 123" \
-H "Content-Type: application/json" \
-d '{"data":"this is json data"}'
```

## SDK {% #sdk %}

You can invoke your Appwrite Functions directly from the Appwrite SDKs.

[Learn more about using the Appwrite SDKs](/docs/sdks)

{% tabs %}
{% tabsitem #client title="Client SDKs" %}

{% multicode %}
```js
import { Client, Functions } from 'appwrite';

const client = new Client()
    .setEndpoint('https://cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>');

const functions = new Functions(client)

try {
    const execution = await functions.createExecution(
        '[FUNCTION_ID]',
        JSON.stringify({ 'foo': 'bar' }),
        false,
        '/',
        'GET',
        { 'X-Custom-Header': '123' }
    )
    console.log(execution)
} catch (err) {
    console.error(err.message)
}
```

```dart
import 'package:appwrite/appwrite.dart';
import 'dart:convert';

final client = Client()
    .setEndpoint('https://cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>');

final functions = Functions(client);

try {
    final execution = await functions.createExecution(
        functionId: '[FUNCTION_ID]',
        body: json.encode({ 'foo': 'bar' }),
        async: false,
        path: '/',
        method: 'GET',
        headers: {
            'X-Custom-Header': '123'
        }
    );
    print(execution.toMap());
} catch (e) {
    print(e.message);
}
```

```kotlin
import io.appwrite.Client;
import io.appwrite.services.Functions;
import com.google.gson.Gson;

val client = Client()
    .setEndpoint('https://cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>')

val functions = Functions(client)

try {
    val execution = functions.createExecution(
        functionId = "[FUNCTION_ID]",
        body = gson.toJson(mapOf("foo" to "bar")),
        async = false,
        path = "/",
        method = "GET",
        headers = mapOf(
            "X-Custom-Header" to "123"
        )
    )
    print(execution.toMap())
} catch (AppwriteException e) {
    e.printStackTrace()
}
```

```swift
import Appwrite
import Foundation

let client = Client()
    .setEndpoint("https://cloud.appwrite.io/v1")
    .setProject("<PROJECT_ID>")

let functions = Functions(client)

do {
    let execution = try await functions.createExecution(
        functionId: "[FUNCTION_ID]",
        data: JSONSerialization.jsonObject(with: ["foo": "bar"], options: [])!,
        path: "/",
        method: "GET",
        headers: [
            "X-Custom-Header": "123"
        ]
    )
    print(execution.toMap())
} catch {
    print(error.localizedDescription)
}
```
{% /multicode %}
{% /tabsitem %}

{% tabsitem #server title="Server SDKs" %}
{% multicode %}
```js
import { Client, Functions } from 'node-appwrite';

const client = new Client()
    .setEndpoint('https://cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>')
    .setKey('[API_KEY]');

const functions = new Functions(client);

try {
    const execution = await functions.createExecution(
        '[FUNCTION_ID]',
        JSON.stringify({ 'foo': 'bar' }),
        false,
        '/',
        'GET',
        { 'X-Custom-Header': '123' }
    )
    console.log(execution)
} catch (error) {
    console.error(error.message)
}
```
```php
<?php

use Appwrite\Client;
use Appwrite\Services\Functions;

$client = new Client();

$client
    .setEndpoint('https://cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>')
    .setKey('[API_KEY]');

$functions = new Functions($client);

try {
    $execution = $functions->createExecution(
        functionId: '[FUNCTION_ID]',
        body: json_encode([ 'foo' => 'bar' ]),
        async: false,
        path: '/',
        method: 'GET',
        headers: [
            'X-Custom-Header' => '123'
        ]
    );
    echo $execution;
} catch ($e) {
    echo $e->getMessage();
}
```
```python
from appwrite.client import Client
from appwrite.services.functions import Functions

import json

client = Client()

(client
    .set_endpoint('https://cloud.appwrite.io/v1')
    .set_project('<PROJECT_ID>')
    .set_key('[API_KEY]')
)

functions = Functions(client)

try:
    execution = functions.create_execution(
        functionId="[FUNCTION_ID]",
        data=json.dumps({'foo': 'bar'}),
        path='/',
        method='GET',
        headers=[
            'X-Custom-Header': '123'
        ]
    )
    print(execution)
except Exception as e:
    print(e.message)
```
```ruby
require 'Appwrite'
require 'json'

include Appwrite

client = Client.new
    .set_endpoint('https://cloud.appwrite.io/v1')
    .set_project('<PROJECT_ID>')
    .set_key('[API_KEY]')

functions = Functions.new(client)

begin
    execution = functions.create_execution(
        function_id: '[FUNCTION_ID]',
        body: JSON.generate({ 'foo': 'bar'}),
        async: false,
        path: '/',
        method: 'GET',
        headers: {
        'X-Custom-Header': '123'
    })
    puts execution
rescue => e
    puts e.message
end
```
```deno
import { Client, Functions } from "https://deno.land/x/appwrite/mod.ts";

const client = new Client()
    .setEndpoint('https://cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>')
    .setKey('[API_KEY]');

const functions = new Functions(client);

try {
    const execution = await functions.createExecution(
        '[FUNCTION_ID]',
        JSON.stringify({ 'foo': 'bar' }),
        false,
        '/',
        'GET',
        { 'X-Custom-Header': '123' }
    )
    console.log(execution)
} catch (error) {
    console.error(error.message)
}
```
```dart
import 'package:dart_appwrite/dart_appwrite.dart';
import 'dart:convert';

final client = Client();
    .setEndpoint('https://cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>')
    .setKey('[API_KEY]');

final functions = Functions(client);

try {
    final execution = await functions.createExecution(
        functionId: '[FUNCTION_ID]',
        body: json.encode({
            'foo': 'bar'
        }),
        async: false,
        path: '/',
        method: 'GET',
        headers: {
            'X-Custom-Header': '123'
        }
    );
} catch (e) {
    print(e.message);
}
```

```swift
import Appwrite
import Foundation

let client = Client()
    .setEndpoint("https://cloud.appwrite.io/v1")
    .setProject("<PROJECT_ID>")
    .setKey("[API_KEY]")

let functions = Functions(client)

do {
    let execution = try await functions.createExecution(
        functionId: "[FUNCTION_ID]",
        body: JSONSerialization.jsonObject(with: ["foo": "bar"], options: [])!),
        async: false,
        path: "/",
        method: "GET",
        headers: [
            "X-Custom-Header": "123"
        ]
    )
    print(execution)
catch {
    print(error.localizedDescription)
}
```

```csharp
using Appwrite;
using Appwrite.Services;
using Appwrite.Models;
using System.Text.Json;

var client = new Client()
    .SetEndPoint("https://cloud.appwrite.io/v1")
    .SetProject("<PROJECT_ID>")
    .SetKey("[API_KEY]");

var functions = new Functions(client);

try
{
    var execution = await functions.CreateExecution(
        functionId: "[FUNCTION_ID]",
        body: JsonSerializer.Serialize<object>(new Dictionary<string, object> {
            { "foo", "bar" }
        }),
        async: false,
        path: "/",
        method: "GET",
        headers: new Dictionary<string, object> {
            { "X-Custom-Header", "123" }
        });

    Debug.Write(execution)
}
catch (Exception e)
{
    Debug.Write(e);
}
```

```kotlin
import io.appwrite.Client
import io.appwrite.services.Functions
import com.google.gson.Gson

val client = Client(context)
    .setEndpoint("https://cloud.appwrite.io/v1")
    .setProject("<PROJECT_ID>")
    .setKey("[API_KEY]")

val functions = Functions(client)

try {
    val execution = functions.createExecution(
        functionId = "[FUNCTION_ID]",
        body = gson.toJson(mapOf(
            "foo" to "bar"
        )),
        path = "/",
        method = "GET",
        headers = mapOf(
            "X-Custom-Header" to "123"
        )
    )
    print(execution)
} catch (e: Exception) {
    e.printStackTrace()
}
```
```java
import io.appwrite.Client;
import io.appwrite.services.Functions;
import java.util.HashMap;
import com.google.gson.Gson;

Client client = new Client()
    .setEndpoint("https://cloud.appwrite.io/v1")
    .setProject("<PROJECT_ID>")
    .setKey("[API_KEY]");

Functions functions = new Functions(client);

functions.createExecution(
    "[FUNCTION_ID]",
    gson.toJson(new HashMap() {{
        put("foo", "bar");
    }}),
    false,
    "/",
    "GET",
    new HashMap() {{
        put("X-Custom-Header", "123");
    }},
    new CoroutineCallback<>((execution, error) -> {
        if (error != null) {
            error.printStackTrace();
            return;
        }

        System.out.println(result);
    }),
);
```
{% /multicode %}
{% /tabsitem %}
{% /tabs %}

## Console {% #console %}
Another easy way to test a function is directly in the Appwrite Console.
You test a function by hitting the **Execute now** button, which will display with modal below.

You'll be able to mock executions by configuring the path, method, headers, and body.

{% only_dark %}
![Create project screen](/images/docs/functions/execution/dark/execute-function.png)
{% /only_dark %}
{% only_light %}
![Create project screen](/images/docs/functions/execution/execute-function.png)
{% /only_light %}


## Events {% #events %}

Changes in Appwrite emit events. You can configure Functions to be executed in response to these events.

1. In Appwrite Console, navigate to **Functions**.
2. Click to open a function you wish to configure.
3. Under the **Settings** tab, navigate to **Events**.
4. Add one or multiple events as triggers for the function.
5. Be careful to avoid selecting events that can be caused by the function itself. This can cause the function to trigger its own execution, resulting in infinite recursions.

## Schedule {% #schedule %}

Appwrite supports scheduled function executions. You can schedule executions using [cron expressions](https://en.wikipedia.org/wiki/Cron) in the settings of your function. Cron supports recurring executions as frequently as **every minute**.

Here are some cron expressions for common intervals:

| Cron Expression  | Schedule              |
| ---------------- | --------------------- |
| `*/15 * * * *`   | Every 15 minutes      |
| `0 * * * *`      | Every Hour            |
| `0 0 * * *`      | Every day at 00:00    |
| `0 0 * * 1`      | Every Monday at 00:00 |


## Permissions {% #permission %}


Appwrite Functions can be executed using Client or Server SDKs. Client SDKs must be authenticated with an account that has been granted execution [permissions](/docs/advanced/platform/permissions) on the function's settings page. Server SDKs require an API key with the correct scopes.

If your function has a generated or custom domain, executions are not authenticated. Anyone visiting the configured domains will be considered a guest, so make sure to give `Any` execute permission in order for domain executions to work. If you need to enforce permissions for functions with a domain, use authentication methods like JWT.


## Logs and results {% #logs %}

You can view the logs of your function executions in the Appwrite Console. Navigate to **Functions** and click on a function to view its executions.

For security reasons, Appwrite does not store the response of function executions. If you need to debug, we recommend logging the response in your function code.
