---
layout: article
title: Team invites
description: Learn how to manage team invites in Appwrite. Implement both client-side email invites and server-side custom flows for team memberships.
---

Teams in Appwrite let users share access to resources through roles and permissions. There are two ways to handle team invites: client-side with email invites and server-side for custom flows.

# Client-side email invites {% #client-side %}

Client-side invites use Appwrite's built-in email system. When you create a membership, Appwrite automatically sends an email invitation to the user.
Use this approach when you want:
- Automatic email invitations
- Built-in email templates and localization
- Simple invite acceptance flow

{% multicode %}
```client-web
import { Client, Teams } from "appwrite";

const client = new Client()
    .setEndpoint('https://cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>');

const teams = new Teams(client);

// Create membership with email invite
const membership = await teams.createMembership(
    'team_id',
    ['developer'],     // roles
    'user@example.com' // email
);
```
```client-flutter
import 'package:appwrite/appwrite.dart';

final client = Client()
    .setEndpoint('https://cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>');

final teams = Teams(client);

// Create membership with email invite
final membership = await teams.createMembership(
    teamId: 'team_id',
    roles: ['developer'],
    email: 'user@example.com'
);
```
```client-apple
import Appwrite

let client = Client()
    .setEndpoint("https://cloud.appwrite.io/v1") // Your API Endpoint
    .setProject("<PROJECT_ID>") // Your project ID

let teams = Teams(client)

// Create membership with email invite
let membership = try await teams.createMembership(
    teamId: "team_id",
    roles: ["developer"],
    email: "user@example.com"
)
```
```kotlin
import io.appwrite.Client
import io.appwrite.services.Teams

val client = Client(context)
    .setEndpoint("https://cloud.appwrite.io/v1") // Your API Endpoint
    .setProject("<PROJECT_ID>") // Your project ID

val teams = Teams(client)

// Create membership with email invite
val response = teams.createMembership(
    teamId = "team_id",
    roles = listOf("developer"),
    email = "user@example.com"
)
```
{% /multicode %}

# Server-side custom flows {% #server-side %}

Server-side invites give you complete control over the invitation process. Instead of using email invites, you create memberships directly using user IDs.
This approach is essential for:
- Custom invitation workflows
- Bulk user management
- Automated team assignments
- Integration with external systems

{% multicode %}
```server-nodejs
const sdk = require('node-appwrite');

const client = new sdk.Client()
    .setEndpoint('https://cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>')
    .setKey('<API_KEY>');

const teams = new sdk.Teams(client);

// Create membership directly with userId
const membership = await teams.createMembership(
    'team_id',
    ['developer'],
    'user_id',
    'John Doe'  // optional name
);
```
```server-python
from appwrite.client import Client
from appwrite.services.teams import Teams

client = Client()
client.set_endpoint('https://cloud.appwrite.io/v1')
client.set_project('<PROJECT_ID>')
client.set_key('<API_KEY>')

teams = Teams(client)

# Create membership directly with userId
membership = teams.create_membership(
    team_id='team_id',
    roles=['developer'],
    user_id='user_id',
    name='John Doe'  # optional
)
```
```server-swift
import Appwrite

let client = Client()
    .setEndpoint("https://cloud.appwrite.io/v1") // Your API Endpoint
    .setProject("<PROJECT_ID>") // Your project ID
    .setKey("<API_KEY>") // Your secret API key

let teams = Teams(client)

// Create membership directly with userId
let membership = try await teams.createMembership(
    teamId: "team_id",
    roles: ["developer"],
    userId: "user_id",
    name: "John Doe" // optional
)
```
```server-kotlin
import io.appwrite.Client
import io.appwrite.services.Teams

val client = Client()
    .setEndpoint("https://cloud.appwrite.io/v1") // Your API Endpoint
    .setProject("<PROJECT_ID>") // Your project ID
    .setKey("<API_KEY>") // Your secret API key

val teams = Teams(client)

// Create membership directly with userId
val response = teams.createMembership(
    teamId = "team_id",
    roles = listOf("developer"),
    userId = "user_id",
    name = "John Doe" // optional
)
```
{% /multicode %}

# Membership roles {% #roles %}

Membership roles define what team members can do. Understanding roles is crucial for implementing proper access control.

## Built-in owner role {% #owner-role %}

The `owner` role is special and has full control. Team owners can:
- Invite new members
- Remove members
- Update team settings
- Delete the team
- Access everything in the team's scope

The user who creates a team automatically becomes its owner. Only owners can invite new members or assign the owner role to others.

## Role-based permissions {% #permissions %}

Roles integrate with Appwrite's [permission system](/docs/advanced/platform/permissions) to control resource access. Here are common permission patterns:

```javascript
// Grant access to specific roles
['team:team_123/developer']
['team:team_123/admin']

// Multiple roles for the same resource
['team:team_123/admin', 'team:team_123/developer']

// Access for any team member
['team:team_123']

// Granular resource permissions
['team:team_123/developer/documents.read']
['team:team_123/admin/documents.*']
```

For team permissions to work:
1. For client-side invites, the user must accept the email invitation. For server-side flows, the membership is created directly
2. The user must have the required role
3. The role must have explicit permission to the resource