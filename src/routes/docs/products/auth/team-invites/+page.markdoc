---
layout: article
title: Team Invites
description: Learn how to manage team invites in Appwrite. Explore both client-side and server-side approaches for inviting users to teams.
---

Teams in Appwrite allow users to share access to resources. When you invite users to a team, they can access resources based on their team roles and permissions.
There are two main approaches to handling team invites: client-side (using email) and server-side (for custom flows).

# Client-side invites {% #client-side %}

Client-side invites are the simplest way to invite users to a team. When you create a membership, Appwrite automatically sends an email invitation to the user.
This approach is ideal when:
- You want to use Appwrite's built-in email invitation system
- You need a quick and reliable way to invite users
- You want to leverage Appwrite's email templates and localization

{% multicode %}
```client-web
import { Client, Teams } from "appwrite";

const client = new Client()
    .setEndpoint('https://cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>');

const teams = new Teams(client);

// Invite a user by email
const membership = await teams.createMembership(
    'team_id',
    ['developer'],     // roles
    'user@example.com' // email
);
```
```client-flutter
import 'package:appwrite/appwrite.dart';

final client = Client()
    .setEndpoint('https://cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>');

final teams = Teams(client);

// Invite a user by email
final membership = await teams.createMembership(
    teamId: 'team_id',
    roles: ['developer'],
    email: 'user@example.com'
);
```
{% /multicode %}

# Server-side invites {% #server-side %}

Server-side invites give you more control over the invitation process.
Instead of sending automatic emails, you can create custom flows using the server SDK.
This approach is useful for:
- Custom invitation workflows
- Bulk user management
- Automated team assignments
- Integration with external systems

{% multicode %}
```server-nodejs
const sdk = require('node-appwrite');

const client = new sdk.Client()
    .setEndpoint('https://cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>')
    .setKey('<API_KEY>');

const teams = new sdk.Teams(client);

// Create membership directly with userId
const membership = await teams.createMembership(
    'team_id',
    ['developer'],
    'user_id',
    'John Doe'  // optional
);

// Create team and add members in one go
async function createTeamWithMembers(teamName, members) {
    // Create the team
    const team = await teams.create('unique()', teamName);

    // Add members
    for (const member of members) {
        await teams.createMembership(
            team.$id,
            member.roles,
            member.userId,
            member.name
        );
    }

    return team;
}
```
```python
from appwrite.client import Client
from appwrite.services.teams import Teams

client = Client()
client.set_endpoint('https://cloud.appwrite.io/v1')
client.set_project('<PROJECT_ID>')
client.set_key('<API_KEY>')

teams = Teams(client)

# Create membership directly with userId
membership = teams.create_membership(
    team_id='team_id',
    roles=['developer'],
    user_id='user_id',
    name='John Doe'  # optional
)

# Bulk invite users to multiple teams
async def bulk_team_invites():
    users_and_teams = [
        {'user_id': 'user1', 'team_id': 'team1', 'roles': ['developer']},
        {'user_id': 'user1', 'team_id': 'team2', 'roles': ['viewer']},
        {'user_id': 'user2', 'team_id': 'team1', 'roles': ['admin']}
    ]

    for invite in users_and_teams:
        teams.create_membership(
            team_id=invite['team_id'],
            roles=invite['roles'],
            user_id=invite['user_id']
        )

# Create team and add members in one go
async def create_team_with_members(team_name, members):
    # Create the team
    team = teams.create('unique()', team_name)

    # Add members
    for member in members:
        teams.create_membership(
            team_id=team['$id'],
            roles=member['roles'],
            user_id=member['user_id'],
            name=member.get('name')
        )

    return team
```
{% /multicode %}

# Understanding roles and permissions {% #roles %}

Team roles in Appwrite are flexible and can be used to create sophisticated access control systems. Here's a detailed look at how they work:

## Built-in roles {% #built-in-roles %}

1. **owner** - Special role that can:
   - Invite new members
   - Remove members
   - Update team settings
   - Delete the team
   - Automatically has all permissions within team scope

The owner role is automatically assigned to the user who creates the team. Only users with the owner role can invite new members or assign the owner role to other members.

## Custom roles {% #custom-roles %}

Custom roles can be any string that makes sense for your application. They are used to define granular permissions within your team. Here are some common patterns:

```javascript
// Common role patterns
const roles = {
    administrative: ['admin', 'moderator', 'manager'],
    access: ['reader', 'writer', 'viewer'],
    department: ['engineering', 'marketing', 'sales'],
    level: ['junior', 'senior', 'lead']
}
```

## Role-based permissions {% #role-permissions %}

Roles become powerful when combined with Appwrite's [permission system](/docs/advanced/platform/permissions). Here are the ways you can use team roles in permissions:

```javascript
// Examples of role-based permissions

// Grant access to specific role in a team
['team:team_123/developer']

// Multiple roles for the same resource
['team:team_123/admin', 'team:team_123/developer']

// Access for any team member regardless of role
['team:team_123']

// Combine with resource permissions
['team:team_123/developer/documents.read']
['team:team_123/admin/documents.*']
```

To gain access to team-based permissions:
1. A user must be invited and accept the team invitation
2. The user must have the specified role assigned to them
3. The role must be explicitly granted permission to the resource

## Role hierarchy example {% #role-hierarchy %}

Here's how to implement a role hierarchy in your application:

{% multicode %}
```server-nodejs
const roleHierarchy = {
    admin: ['*'],  // All permissions
    manager: ['documents.read', 'documents.write', 'users.read'],
    developer: ['documents.read', 'documents.write'],
    viewer: ['documents.read']
}

async function hasPermission(userId, teamId, permission) {
    const membership = await teams.getMembership(teamId, userId)
    const userRoles = membership.roles

    return userRoles.some(role =>
        roleHierarchy[role]?.includes('*') ||
        roleHierarchy[role]?.includes(permission)
    )
}
```
```python
role_hierarchy = {
    'admin': ['*'],  # All permissions
    'manager': ['documents.read', 'documents.write', 'users.read'],
    'developer': ['documents.read', 'documents.write'],
    'viewer': ['documents.read']
}

async def has_permission(user_id, team_id, permission):
    membership = teams.get_membership(team_id, user_id)
    user_roles = membership.roles

    return any(
        '*' in role_hierarchy.get(role, []) or
        permission in role_hierarchy.get(role, [])
        for role in user_roles
    )
```
{% /multicode %}

# Custom invitation flows {% #custom-flows %}