---
layout: article
title: Team invites
description: Learn how to manage team invites in Appwrite. Implement both client-side email invites and server-side custom flows for team memberships.
---

Appwrite provides two approaches for adding members to teams: client-side email invites and server-side custom flows. Each approach serves different use cases and offers unique benefits.

# Client-side email invites {% #client-side %}

Client-side email invites provide a user-friendly way to add members to your team. When creating a membership, Appwrite:
1. Sends an automated email invitation to the user
2. Creates a pending membership
3. Activates the membership when the user accepts

Use this approach when you want:
- Automatic email invitations
- Built-in email templates and localization
- Simple invite acceptance flow
- User verification through email

{% multicode %}
```client-web
import { Client, Teams } from "appwrite";

const client = new Client()
    .setEndpoint('https://cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>');

const teams = new Teams(client);

// Create membership with email invite
const membership = await teams.createMembership(
    'team_id',
    ['developer'],     // roles
    'user@example.com' // email
);
```
```client-flutter
import 'package:appwrite/appwrite.dart';

final client = Client()
    .setEndpoint('https://cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>');

final teams = Teams(client);

// Create membership with email invite
final membership = await teams.createMembership(
    teamId: 'team_id',
    roles: ['developer'],
    email: 'user@example.com'
);
```
```client-apple
import Appwrite

let client = Client()
    .setEndpoint("https://cloud.appwrite.io/v1") // Your API Endpoint
    .setProject("<PROJECT_ID>") // Your project ID

let teams = Teams(client)

// Create membership with email invite
let membership = try await teams.createMembership(
    teamId: "team_id",
    roles: ["developer"],
    email: "user@example.com"
)
```
```kotlin
import io.appwrite.Client
import io.appwrite.services.Teams

val client = Client(context)
    .setEndpoint("https://cloud.appwrite.io/v1") // Your API Endpoint
    .setProject("<PROJECT_ID>") // Your project ID

val teams = Teams(client)

// Create membership with email invite
val response = teams.createMembership(
    teamId = "team_id",
    roles = listOf("developer"),
    email = "user@example.com"
)
```
{% /multicode %}

# Server-side custom flows {% #server-side %}

Server-side membership creation bypasses the email invitation process, allowing direct member addition. This approach:
1. Creates an active membership immediately
2. Doesn't require user acceptance
3. Gives you complete control over the invitation workflow

Use this when you need:
- Custom invitation workflows
- Bulk user management
- Automated team assignments
- Integration with external systems
- Immediate member access

{% multicode %}
```server-nodejs
const sdk = require('node-appwrite');

const client = new sdk.Client()
    .setEndpoint('https://cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>')
    .setKey('<API_KEY>');

const teams = new sdk.Teams(client);

// Create membership directly with userId
const membership = await teams.createMembership(
    'team_id',
    ['developer'],
    'user_id',
    'John Doe'  // optional name
);
```
```server-python
from appwrite.client import Client
from appwrite.services.teams import Teams

client = Client()
client.set_endpoint('https://cloud.appwrite.io/v1')
client.set_project('<PROJECT_ID>')
client.set_key('<API_KEY>')

teams = Teams(client)

# Create membership directly with userId
membership = teams.create_membership(
    team_id='team_id',
    roles=['developer'],
    user_id='user_id',
    name='John Doe'  # optional
)
```
```server-swift
import Appwrite

let client = Client()
    .setEndpoint("https://cloud.appwrite.io/v1") // Your API Endpoint
    .setProject("<PROJECT_ID>") // Your project ID
    .setKey("<API_KEY>") // Your secret API key

let teams = Teams(client)

// Create membership directly with userId
let membership = try await teams.createMembership(
    teamId: "team_id",
    roles: ["developer"],
    userId: "user_id",
    name: "John Doe" // optional
)
```
```server-kotlin
import io.appwrite.Client
import io.appwrite.services.Teams

val client = Client()
    .setEndpoint("https://cloud.appwrite.io/v1") // Your API Endpoint
    .setProject("<PROJECT_ID>") // Your project ID
    .setKey("<API_KEY>") // Your secret API key

val teams = Teams(client)

// Create membership directly with userId
val response = teams.createMembership(
    teamId = "team_id",
    roles = listOf("developer"),
    userId = "user_id",
    name = "John Doe" // optional
)
```
{% /multicode %}

# Managing memberships {% #managing %}

## Accepting invitations {% #accepting %}

For client-side email invites, users must accept the invitation to join the team. The acceptance flow:
1. User receives an email with an invitation link
2. Clicking the link redirects to your app
3. Your app calls the acceptance endpoint
4. Upon success, the user gains immediate access

{% multicode %}
```client-web
import { Client, Teams } from "appwrite";

const client = new Client()
    .setEndpoint('https://cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>');

const teams = new Teams(client);

// Accept the invitation using the membership ID
const response = await teams.updateMembershipStatus(
    'team_id',
    'membership_id',
    'user_id'
);
```
```client-flutter
import 'package:appwrite/appwrite.dart';

final client = Client()
    .setEndpoint('https://cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>');

final teams = Teams(client);

// Accept the invitation using the membership ID
final response = await teams.updateMembershipStatus(
    teamId: 'team_id',
    membershipId: 'membership_id',
    userId: 'user_id'
);
```
```client-apple
import Appwrite

let client = Client()
    .setEndpoint("https://cloud.appwrite.io/v1")
    .setProject("<PROJECT_ID>")

let teams = Teams(client)

// Accept the invitation using the membership ID
let response = try await teams.updateMembershipStatus(
    teamId: "team_id",
    membershipId: "membership_id",
    userId: "user_id"
)
```
```kotlin
import io.appwrite.Client
import io.appwrite.services.Teams

val client = Client(context)
    .setEndpoint("https://cloud.appwrite.io/v1")
    .setProject("<PROJECT_ID>")

val teams = Teams(client)

// Accept the invitation using the membership ID
val response = teams.updateMembershipStatus(
    teamId = "team_id",
    membershipId = "membership_id",
    userId = "user_id"
)
```
{% /multicode %}

## Checking membership status {% #status %}

You can verify a user's membership status to determine if they've accepted an invitation:

{% multicode %}
```client-web
import { Client, Teams } from "appwrite";

const client = new Client()
    .setEndpoint('https://cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>');

const teams = new Teams(client);

const membership = await teams.getMembership(
    'team_id',
    'membership_id'
);

console.log(membership.status); // 'invited' or 'confirmed'
```
```client-flutter
import 'package:appwrite/appwrite.dart';

final client = Client()
    .setEndpoint('https://cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>');

final teams = Teams(client);

final membership = await teams.getMembership(
    teamId: 'team_id',
    membershipId: 'membership_id'
);

print(membership.status); // 'invited' or 'confirmed'
```
```client-apple
import Appwrite

let client = Client()
    .setEndpoint("https://cloud.appwrite.io/v1")
    .setProject("<PROJECT_ID>")

let teams = Teams(client)

let membership = try await teams.getMembership(
    teamId: "team_id",
    membershipId: "membership_id"
)

print(membership.status) // 'invited' or 'confirmed'
```
```kotlin
import io.appwrite.Client
import io.appwrite.services.Teams

val client = Client(context)
    .setEndpoint("https://cloud.appwrite.io/v1")
    .setProject("<PROJECT_ID>")

val teams = Teams(client)

val membership = teams.getMembership(
    teamId = "team_id",
    membershipId = "membership_id"
)

println(membership.status) // 'invited' or 'confirmed'
```
{% /multicode %}

## Removing members {% #removing %}

Team owners can remove members or users can leave teams:

{% multicode %}
```client-web
import { Client, Teams } from "appwrite";

const client = new Client()
    .setEndpoint('https://cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>');

const teams = new Teams(client);

await teams.deleteMembership(
    'team_id',
    'membership_id'
);
```
```client-flutter
import 'package:appwrite/appwrite.dart';

final client = Client()
    .setEndpoint('https://cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>');

final teams = Teams(client);

await teams.deleteMembership(
    teamId: 'team_id',
    membershipId: 'membership_id'
);
```
```client-apple
import Appwrite

let client = Client()
    .setEndpoint("https://cloud.appwrite.io/v1")
    .setProject("<PROJECT_ID>")

let teams = Teams(client)

try await teams.deleteMembership(
    teamId: "team_id",
    membershipId: "membership_id"
)
```
```kotlin
import io.appwrite.Client
import io.appwrite.services.Teams

val client = Client(context)
    .setEndpoint("https://cloud.appwrite.io/v1")
    .setProject("<PROJECT_ID>")

val teams = Teams(client)

teams.deleteMembership(
    teamId = "team_id",
    membershipId = "membership_id"
)
```
{% /multicode %}

{% arrow_link href="/docs/products/auth/teams" %}
Learn more about team management
{% /arrow_link %}