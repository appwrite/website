---
layout: article
title: 2-Factor authentication
description: Add multiple layers of authentication to your applications powered by Appwrite Authentication.
---

Two-factor authentication (2FA) greatly increases the security of your apps by adding additional layers of protection.
When 2FA is enabled, a malicious actor needs to compromise multiple authentication factors to gain unauthorized access.
Appwrite Authentication lets you easily implement 2FA in your apps, letting you build more securely and quickly.

{% info title="Looking for 2FA on your Console account?" %}
This page covers 2FA for your app's end-users.
If you are looking for 2FA on your Appwrite Console account, please refer to the [Console 2FA page](/docs/advanced/security/2fa).
{% /info %}

Appwrite currently allows two factors of authentication. More factors of authentication will be available soon.

Here are the steps to implement 2FA in your application.

{% section #enable-2fa step=1 title="Enable 2FA on an account" %}
You can enable 2FA on your account by calling `account.updateMFA()`.
You will need to have added more than 1 factors of authentication to an account before
the 2FA is enforced.

Initialize your Appwrite SDK's `Client` and `Account`.
{% multicode %}
```js
import { Client, Account } from "appwrite";

const client = new Client();

const account = new Account(client);

client
    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint
    .setProject('<YOUR_PROJECT_ID>') // Your project ID
;
```
```dart
import 'package:appwrite/appwrite.dart';

void main() {                        // Init SDK
  Client client = Client();
  Account account = Account(client);

  client
    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint
    .setProject('<YOUR_PROJECT_ID>')             // Your project ID
  ;
}
```

```swift
import Appwrite

let client = Client()
    .setEndpoint("https://cloud.appwrite.io/v1") // Your API Endpoint
    .setProject("<YOUR_PROJECT_ID>") // Your project ID

let account = Account(client)
```

```kotlin
import io.appwrite.Client
import io.appwrite.services.Account

val client = Client(context)
    .setEndpoint("https://cloud.appwrite.io/v1") // Your API Endpoint
    .setProject("<YOUR_PROJECT_ID>") // Your project ID

val account = Account(client)
```
{% /multicode %}


{% multicode %}
```js
const result = await account.updateMFA(true);
```

```dart
Future result = account.updateMFA(
    mfa: false,
);

result
.then((response) {
    print(response);
}).catchError((error) {
    print(error.response);
});
```
```swift
let user = try await account.updateMFA(
  mfa: xfalse
)
```
```kotlin
val response = account.updateMFA(
    mfa = false
)
```
{% /multicode %}
{% /section %}
{% section #init-login step=2 title="Initialize login" %}
Begin your login flow with the default authentication method used by your app, for example, email password.
{% multicode %}
```js
const session = await account.createEmailPasswordSession(
        'email@example.com',         // email
        'password'                   // password
    );
```

```dart                       // Init SDK
Future session = account.createEmailPasswordSession(
email: 'email@example.com',
password: 'password',
);

result
.then((response) {
    print(response);
}).catchError((error) {
    print(error.response);
});
```
```swift
let session = try await account.createEmailPasswordSession(
  email: "email@example.com",
  password: "password"
)
```
```kotlin
val session = account.createEmailPasswordSession(
    email = "email@example.com",
    password = "password"
)
```
{% /multicode %}
{% /section %}
{% section #check-for-2fa step=3 title="Check for two-factor" %}
Upon successful login in the first authentication step, check the status of the login by calling `account.get()`.
If more than one factors are required, you will the error `user_more_factors_required`. Redirect the user in your app to
perform the MFA challenge.
{% multicode %}
```js
try {
    const response = await account.get();
    console.log(response);
} catch (error) {
    console.log(error);
    if (error.type === `user_more_factors_required`){
        // redirect to perform MFA
    }
    else {
        // handle other errors
    }
}
```

```dart
const promise = account.get();

promise.then(function (response) {
    console.log(response);           // Success
}, function (error) {
    console.log(error);              // Failure
    if (error.type === "user_more_factors_required"){
        // redirect to perform MFA
    }
    else {
        // handle other errors
    }
});
```

```dart
Future result = account.get();

result
.then((response) {
    print(response);
}).catchError((error) {
    print(error.response);
    if (error.type == 'user_more_factors_required') {
    // redirect to perform MFA
    } else {
    // handle other errors
    }
});
```
```swift
do {
    let user = try await account.get()
} catch let error as AppwriteException {
    print(error.message)
    if error.type == "user_more_factors_required" {
        // redirect to perform MFA
    } else {
        // handle other errors
    }
}
```
```kotlin
try {
    val response = account.get()
    println(response)
} catch (error: AppwriteException) {
    println(error.message)
    if (error.type == "user_more_factors_required") {
        // redirect to perform MFA
    } else {
        // handle other errors
    }
}
```
{% /multicode %}
{% /section %}
{% section #list-provider step=4 title="List factors" %}
You can check which factors are enabled for an account using `account.listFactors()`.
The returned object will be formatted like this.

```js
{
    totp: true, // time-based one-time password
    email: false, // email
    phone: true // phone
}
```

{% multicode %}
```js
const factors = await account.listFactors();
// redirect based on factors returned.
```
```dart
Future result = account.listFactors();

result
.then((response) {
    print(response);
    // redirect based on factors returned.
}).catchError((error) {
    print(error.response);
});
```

```swift
let mfaFactors = try await account.listFactors()
// redirect based on factors returned.
```

```kotlin
val response = account.listFactors()
// redirect based on factors returned.
```
{% /multicode %}

{% /section %}
{% section #create-challenge step=5 title="Create challenge" %}
Based on the factors available, initialize an additional auth step.
Calling these methods will send a challenge to the user.
You will need to save the challenge ID to complete the challenge in a later step.

{% tabs %}
{% tabsitem #email title="Email" %}
Appwrite will use a verified email on the user's account to send the challenge code via email.
Note that this is only valid as a second factor if the user did not initialize their login with email OTP.
{% multicode %}
```js
const challenge = await account.createChallenge(
        'email'  // factor
    );

// Save the challenge ID to complete the challenge later
const challengeId = challenge.$id;
```

```dart
Future result = account.createChallenge(
factor: 'email',
);

result
.then((response) {
    print(response);
    // Save the challenge ID to complete the challenge later
    var challengeId = response.$id;
}).catchError((error) {
    print(error.response);
});
```

```swift
let mfaChallenge = try await account.createChallenge(
  factor: "email"
)
// Save the challenge ID to complete the challenge later
let challengeId = mfaChallenge.id
```

```kotlin
val response = account.createChallenge(
    factor = "email"
)
// Save the challenge ID to complete the challenge later
val challengeId = response.id
```
{% /multicode %}

{% /tabsitem %}

{% tabsitem #phone title="Phone" %}
Appwrite will use a verified phone number on the user's account to send the challenge code via SMS.
You cannot use this method if the user initialized their login with phone OTP.
{% multicode %}
```js
const challenge = await account.createChallenge(
        'phone'                       // factor
    );

// Save the challenge ID to complete the challenge later
const challengeId = challenge.$id;
```

```dart
Future result = account.createChallenge(
factor: 'phone',
);

result
.then((response) {
    print(response);
    // Save the challenge ID to complete the challenge later
    var challengeId = response.$id;
}).catchError((error) {
    print(error.response);
});
```

```swift
let mfaChallenge = try await account.createChallenge(
  factor: "phone"
)
// Save the challenge ID to complete the challenge later
let challengeId = mfaChallenge.id
```

```kotlin
val response = account.createChallenge(
    factor = "phone"
)
// Save the challenge ID to complete the challenge later
val challengeId = response.id
```
{% /multicode %}
{% /tabsitem %}

{% tabsitem #totp title="TOTP" %}
Appwrite supports TOTP (Time-based One-Time Password) as a second factor.
This requires the user to have a TOTP authenticator app installed on their device.
To setup a TOTP authenticator, you can use the `account.addAuthenticator()` method.

{% multicode %}
```js
const { backups, secret, uri } = await account.addAuthenticator('totp');
```
```dart
Future result = account.addAuthenticator(
    type: 'totp',
);
result
.then((response) {
    print(response.backups);
    print(response.secret);
    print(response.uri);
}).catchError((error) {
    print(error.response);
});
```
```swift
let response = try await account.addAuthenticator(
  type: "totp"
)
let (backups, secret, uri) = (response.backups, response.secret, response.uri)
```
```kotlin
val response = account.addAuthenticator(
    type = "totp"
)
val backups = response.backups
val secret = response.secret
val uri = response.uri
```
{% /multicode %}

After the user adds this authenticator to their app, you'll need to verify the setup succeeded by prompting the user to enter a code from their TOTP authenticator app.
The TOTP needs to be submitted like this.
{% multicode %}
```js
const { backups, secret, uri } = await account.verifyAuthenticator('totp', <TOTP_FROM_USER>);
```
```dart
Future result = account.verifyAuthenticator(
    type: 'totp',
    <TOTP_FROM_USER>
);
result
.then((response) {
    print(response.backups);
    print(response.secret);
    print(response.uri);
}).catchError((error) {
    print(error.response);
});
```
```swift
let response = try await account.verifyAuthenticator(
  type: "totp",
  <TOTP_FROM_USER>
)
let (backups, secret, uri) = (response.backups, response.secret, response.uri)
```
```kotlin
val response = account.verifyAuthenticator(
    type = "totp",
    <TOTP_FROM_USER>
)
val backups = response.backups
val secret = response.secret
val uri = response.uri
```
{% /multicode %}

You'll need to display the `uri` to the user as a QR code to scan with their TOTP authenticator app.
{% multicode %}
```js
const avatarts = new Avatars();
// display image at QRCode.href to your user
const QRCode = await avatarts.getQR(uri);
```
```dart
final avatars = Avatars();
// display image at QRCode.href to your user
final QRCode = await avatars.getQR(uri);
```
```swift
let avatars = Avatars()
// display image at QRCode.href to your user
let QRCode = try await avatars.getQR(uri)
```
```kotlin
val avatars = Avatars()
// display image at QRCode.href to your user
val QRCode = avatars.getQR(uri)
```
{% /multicode %}

If the user's unable to scan QR codes, you can display the `secret` to the user.
After adding the authenticator, you should also prompt the user to save their `backups`.
These backup code are the only way to recover access to their account if they lose access to their TOTP authenticator app.

Lastly, you can initialize the TOTP challenge.
{% multicode %}
```js
const challenge = await account.createChallenge(
        'totp'                       // factor
    );

// Save the challenge ID to complete the challenge later
const challengeId = challenge.$id;
```

```dart
Future result = account.createChallenge(
factor: 'totp',
);

result
.then((response) {
    print(response);
    // Save the challenge ID to complete the challenge later
    var challengeId = response.$id;
}).catchError((error) {
    print(error.response);
});
```

```swift
let mfaChallenge = try await account.createChallenge(
  factor: "totp"
)
// Save the challenge ID to complete the challenge later
let challengeId = mfaChallenge.id
```

```kotlin
val response = account.createChallenge(
    factor = "totp"
)
// Save the challenge ID to complete the challenge later
val challengeId = response.id
```
{% /multicode %}
{% /tabsitem %}
{% /tabs %}

{% /section %}
{% section #complete-challenge step=6 title="Complete challenge" %}
Once the user receives the challenge code, you can pass the code back to Appwrite to complete the challenge.
{% multicode %}
```js
const response = await account.updateChallenge(
        '<CHALLENGE_ID>',            // challengeId
        '<OTP>'                      // otp
    );
```

```dart
Future result = account.updateChallenge(
    challengeId: '<CHALLENGE_ID>',
    otp: '<OTP>',
);

result
.then((response) {
    print(response);
}).catchError((error) {
    print(error.response);
});
```
```swift
val response = account.updateChallenge(
    challengeId = "<CHALLENGE_ID>",
    otp = "<OTP>"
)
```
```kotlin
let result = try await account.updateChallenge(
  challengeId: "<CHALLENGE_ID>",
  otp: "<OTP>"
)
```
{% /multicode %}
{% /section %}
