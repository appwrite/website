---
layout: article
title: User verification
description: Learn about Appwrite's email and phone verification system, including verification flows and role-based access control.
---

User verification in Appwrite allows you to verify user email addresses and phone numbers. Users don't need to be verified to log in, but you can restrict resource access to verified users only using permissions.

# Email verification {% #email-verification %}

To verify a user's email, first send a verification email with a redirect URL. The verification secrets will be appended as query parameters to the redirect URL:

```client-web
import { Client, Account } from "appwrite";

const client = new Client()
    .setProject('<PROJECT_ID>') // Your project ID

const account = new Account(client);

const promise = account.createVerification('https://example.com/verify');

promise.then(function (response) {
    console.log(response); // Success
}, function (error) {
    console.log(error); // Failure
});
```

After the user clicks the link in the email, they will be redirected to your site with the query parameters `userId` and `secret`. If you're on a mobile platform, you will need to create the appropriate deep link to handle the verification.

Next, implement the verification page that handles the redirect:

```client-web
import { Client, Account } from "appwrite";

const client = new Client()
    .setProject('<PROJECT_ID>'); // Your project ID

const account = new Account(client);

const urlParams = new URLSearchParams(window.location.search);
const secret = urlParams.get('secret');
const userId = urlParams.get('userId');

const promise = account.updateVerification(userId, secret);

promise.then(function (response) {
    console.log(response); // Success
}, function (error) {
    console.log(error); // Failure
});
```

# Phone verification {% #phone-verification %}

To verify a phone number, first ensure the user has a phone number set on their account:

```client-web
const response = await account.updatePhone(
    '+12065550100',  // phone
    'password' // password
);
```

Then initiate verification by calling `createPhoneVerification`:

```client-web
const response = await account.createPhoneVerification();
```

After the user receives the verification code, complete verification by calling `updatePhoneVerification`:

```client-web
const response = await account.updatePhoneVerification(
    '[USER_ID]',  // userId
    '[SECRET]' // secret
);
```

# Role-based access {% #role-based-access %}

You can restrict resource access to verified users only using permissions through the `user([USER_ID], "verified")` role. This role is automatically assigned after successful verification.

# Verification events {% #verification-events %}

The following events are triggered during the verification process:

- `users.*.verification.*` - Triggers on any user's verification token event
- `users.*.verification.*.create` - Triggers when a verification token for a user is created
- `users.*.verification.*.update` - Triggers when a verification token for a user is validated

Each event returns a Token Object.