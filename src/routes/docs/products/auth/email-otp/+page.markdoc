---
layout: article
title: Email OTP
description: Seamless sign in with Email OTP authentication in Appwrite. Learn how to provide simple and secure passwordless user accounts.
---

Email OTP authentication lets users create accounts using their email address and log in using a 6 digit code delivered to their email inbox. This method is similar to [Magic URL login](/docs/products/auth/magic-url), but can provide better user experience in some scenarios.

{% info title="Email OTP vs Magic URL" %}
Email OTP sends email with 6 digit code that user needs to enter into the app, while Magic URL delivers a clickable button or a link to user's inbox. 

#### Benefits of Email OTP
- Doesn't require user to be signed into email inbox on the device
- Doesn't disturb application flow with a redirect
- Doesn't require deep linking when developing PWA or mobile apps

#### Downsides of Email OTP
- Expires quicker
- Requires more inputs from user
{% /info %}

# Send email {% #init %}

Email OTP authentication is done using a two-step authentication process. The authentication request is initiated from the client application and an email message is sent to the user's email inbox. The email will contain a 6-digit number the user can use to log in.

Send an an email to initiate the authentication process. A **new account** will be created for this phone number if it has never been used before.

{% multicode %}

```js
import { Client, Account, ID } from "appwrite";

const client = new Client()
    .setEndpoint('https://cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>');

const account = new Account(client);

const sessionToken = await account.createEmailToken(
    ID.unique(),
    'email@example.com'
);

const userId = sessionToken.userId;
```

```dart
import 'package:appwrite/appwrite.dart';

final client = Client()
    .setEndpoint('https://cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>');

final account = Account(client);

final sessionToken = await account.createEmailToken(
    userId: ID.unique(),
    email: 'email@example.com'
);

final userId = sessionToken.userId;
```

```kotlin
import io.appwrite.Client
import io.appwrite.services.Account
import io.appwrite.ID

val client = Client()
    .setEndpoint("https://cloud.appwrite.io/v1")
    .setProject("<PROJECT_ID>");

val account = Account(client);

val sessionToken = account.createEmailToken(
    userId = ID.unique(),
    email = "email@example.com"
);

val userId = sessionToken.userId;
```

```swift
import Appwrite

let client = Client()
    .setEndpoint("https://cloud.appwrite.io/v1")
    .setProject("<PROJECT_ID>");

let account = Account(client);

let sessionToken = try await account.createEmailToken(
    userId: ID.unique(),
    email: "email@example.com"
);

let userId = sessionToken.userId;
```

```graphql
mutation {
    accountCreateEmailToken(userId: "unique()", email: "email@example.com") {
        _id
        userId
        secret
        expire
    }
}
```

{% /multicode %}

# Login {% #login %}

After initiating the email OTP authentication process, the returned user ID and secret are used to authenticate the user. The secret will be a 6-digit number in the email sent to the user's email inbox.

{% multicode %}

```js
import { Client, Account, ID } from "appwrite";

const client = new Client()
    .setEndpoint('https://cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>');

const account = new Account(client);

const session = await account.createSession(
    userId,
    '[SECRET]'
);
```

```dart
import 'package:appwrite/appwrite.dart';

final client = Client()
    .setEndpoint('https://cloud.appwrite.io/v1')
    .setProject('<PROJECT_ID>');

final account = Account(client);

final session = await account.createSession(
    userId: userId,
    secret: '[SECRET]'
);
```

```kotlin
import io.appwrite.Client
import io.appwrite.services.Account
import io.appwrite.ID

val client = Client()
    .setEndpoint("https://cloud.appwrite.io/v1")
    .setProject("<PROJECT_ID>");

val account = Account(client);

val session = account.createSession(
    userId = userId,
    secret = "[SECRET]"
);
```

```swift
import Appwrite

let client = Client()
    .setEndpoint("https://cloud.appwrite.io/v1")
    .setProject("<PROJECT_ID>");

let account = Account(client);

let session = try await account.createSession(
    userId: userId,
    secret: "[SECRET]"
);
```

```graphql
mutation {
    accountcreateSession(userId: "[USER_ID]", secret: "[SECRET]") {
        _id
        userId
        provider
        expire
    }
}
```

{% /multicode %}

After the secret is verified, a session will be created.

# Security phrase {% #security-phrase %}

A security phrase is a randomly generated phrase provided on sign-in page, as well as inside Email OTP login email. Verifying those phrases match is a prevention for numerous phishing and man-in-the-middle attacks.

By default, security phrases are disabled. To enable a security prhase in Email OTP, enable it in first step of authentication flow.

{% multicode %}
```js
import { Client, Account, ID } from "appwrite";

const client = new Client()
    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint
    .setProject('<PROJECT_ID>');                 // Your project ID

const account = new Account(client);

const promise = account.createEmailToken(ID.unique(), 'email@example.com', true);

promise.then(function (response) {
    console.log(response); // Success
}, function (error) {
    console.log(error); // Failure
});
```

```graphql
mutation {
    accountCreateEmailToken(
        userId: "ID.unique()",
        email: "email@example.com",
        phrase: true
    ) {
        _id
        _createdAt
        userId
        secret
        expire
        phrase
    }
}
```

{% /multicode %}

By enabling security phrase feature, you will recieve `phrase` in the response. You need to display this phrase to the user, and we recommend informing user what this phrase is and how to check it. When security phrase is enabled, email will also include a new section providing user with the security phrase.