---
layout: article
title: OAuth2 login
description: Integrate OAuth2 authentication seamlessly with Appwrite. Learn how to connect your application with third-party OAuth2 providers for secure user login and access.
---

OAuth authentication allows users to log in using accounts from other popular services. This can be convenient for users because they can start using your app without creating a new account. It can also be more secure, because the user has one less password that could become vulnerable.

When using OAuth to authenticate, the authentication request is initiated from the client application. The user is then redirected to an OAuth2 provider to complete the authentication step, and finally, the user is redirected back to your application.

# Configure OAuth2 login {% #configure %}

Before using OAuth2 login, you need to enable and configure an OAuth2 provider.

1. Navigate to your Appwrite project.
2. Navigate to **Auth** > **Settings**.
3. Find and open the OAuth provider.
4. In the OAuth2 settings modal, use the toggle to enable the provider.
5. Create and OAuth2 app on the provider's developer platform.
6. Copy information from your OAuth2 provider's developer platform to fill the **OAuth2 Settings** modal in the Appwrite Console.
7. Configure redirect URL in your OAuth2 provider's developer platform. Set it to URL provided to you by **OAuth2 Settings** modal in Appwrite Console.

# Initialize OAuth2 login {% #init %}

To initialize the OAuth2 login process, use the [Create OAuth2 Session](/docs/references/cloud/client-web/account#createOAuth2Session) endpoint.

{% tabs %}
{% tabsitem #js title="Javascript" %}
```js
import { Client, Account, OAuthProvider } from "appwrite";

const client = new Client()
    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint
    .setProject('<PROJECT_ID>');                 // Your project ID

const account = new Account(client);

// Go to OAuth provider login page
account.createOAuth2Session(OAuthProvider.GitHub, '[LINK_ON_SUCCESS]', '[LINK_ON_FAILURE]');
```

Users will be redirected to the OAuth2 provider's login page to log in. Once complete, your user will be redirected back to your app.

In your web application, you need to finish OAuth authentication using [Create session](/docs/references/cloud/client-web/account#createSession) endpoint. Both user ID and token secret will be provided to you in the URL params.

```js
const urlParams = new URLSearchParams(window.location.search);
const secret = urlParams.get('secret');
const userId = urlParams.get('userId');

await account.createSession(userId, secret);
```

{% /tabsitem %}

{% tabsitem #flutter title="Flutter" %}
```dart
import 'package:appwrite/appwrite.dart';

final client = Client()
    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint
    .setProject('<PROJECT_ID>');               // Your project ID

final account = Account(client);

// Go to OAuth provider login page
await account.createOAuth2Session(provider: OAuthProvider.github);
```

User will be redirected to the OAuth2 provider's login page to log in. Once complete, your user will be redirected back to your app.

You can optionally configure `success` or `failure` redirect links for having custom logic for handling those scenarios.
{% /tabsitem %}

{% tabsitem #android title="Android" %}
For Android, add the following activity inside the `<application>` tag in your AndroidManifest.xml. Replace `<PROJECT_ID>` with your actual Appwrite project ID.

```xml
<!-- Add this inside the `<application>` tag, along side the existing `<activity>` tags -->
<activity android:name="io.appwrite.views.CallbackActivity" android:exported="true">
  <intent-filter android:label="android_web_auth">
    <action android:name="android.intent.action.VIEW" />
    <category android:name="android.intent.category.DEFAULT" />
    <category android:name="android.intent.category.BROWSABLE" />
    <data android:scheme="appwrite-callback-<PROJECT_ID>" />
  </intent-filter>
</activity>
```
```kotlin
import io.appwrite.Client
import io.appwrite.services.Account

val client = Client()
    .setEndpoint("https://cloud.appwrite.io/v1") // Your API Endpoint
    .setProject("<PROJECT_ID>")                  // Your project ID

val account = Account(client)

// Go to OAuth provider login page
account.createOAuth2Session(provider = "github")
```

User will be redirected to the OAuth2 provider's login page to log in. Once complete, your user will be redirected back to your app.

You can optionally configure `success` or `failure` redirect links for having custom logic for handling those scenarios.

{% /tabsitem %}

{% tabsitem #apple title="Apple" %}
For Apple, add the following URL scheme to your `Info.plist`.

```xml
<key>CFBundleURLTypes</key>
<array>
<dict>
    <key>CFBundleTypeRole</key>
    <string>Editor</string>
    <key>CFBundleURLName</key>
    <string>io.appwrite</string>
    <key>CFBundleURLSchemes</key>
    <array>
        <string>appwrite-callback-<PROJECT_ID></string>
    </array>
</dict>
</array>
```
If you're using UIKit, you'll also need to add a hook to your `SceneDelegate.swift` file to ensure cookies work correctly.

```swift
func scene(_ scene: UIScene, openURLContexts URLContexts: Set<UIOpenURLContext>) {
    guard let url = URLContexts.first?.url,
        url.absoluteString.contains("appwrite-callback") else {
        return
    }
    WebAuthComponent.handleIncomingCookie(from: url)
}
```

```swift
import Appwrite

let client = Client()
    .setEndpoint("https://cloud.appwrite.io/v1") // Your API Endpoint
    .setProject("<PROJECT_ID>")                // Your project ID

let account = Account(client)

// Go to OAuth provider login page
try await account.createOAuth2Session(provider: "amazon")
```

User will be redirected to the OAuth2 provider's login page to log in. Once complete, your user will be redirected back to your app.

You can optionally configure `success` or `failure` redirect links for having custom logic for handling those scenarios.

{% /tabsitem %}
{% /tabs %}

# OAuth2 profile {% #profile %}

After authenticating a user through their OAuth2 provider, you can fetch their profile information such as their avatar image or name. To do this you can use the access token from the OAuth2 provider and make API calls to the provider.

After creating an OAuth2 session, you can fetch the session to get information about the provider.

{% multicode %}
```js
import { Client, Account } from "appwrite";

const client = new Client();

const account = new Account(client);

const session = await account.getSession('current');

// Provider information
console.log(session.provider);
console.log(session.providerUid);
console.log(session.providerAccessToken);
```

```dart
import 'package:appwrite/appwrite.dart';

final client = Client()
    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint
    .setProject('<PROJECT_ID>');               // Your project ID

final account = Account(client);

final session = await getSession(
    sessionId : "[SESSION_ID]"
);

// Provider information
print(session.provider);
print(session.providerUid);
print(session.providerAccessToken);
```

```kotlin
import io.appwrite.Client
import io.appwrite.services.Account

val client = Client(context)
    .setEndpoint("https://cloud.appwrite.io/v1") // Your API Endpoint
    .setProject("5df5acd0d48c2") // Your project ID

val account = Account(client)

val response = account.getSession(
    sessionId = "[SESSION_ID]"
)

// Provider information
print(session.provider);
print(session.providerUid);
print(session.providerAccessToken);
```

```swift
import Appwrite

let client = Client()
    .setEndpoint("https://cloud.appwrite.io/v1") // Your API Endpoint
    .setProject("5df5acd0d48c2") // Your project ID

let account = Account(client)

let session = try await account.getSession(
    sessionId: "[SESSION_ID]"
)

// Provider information
print(session.provider);
print(session.providerUid);
print(session.providerAccessToken);
```
{% /multicode %}


An OAuth2 [session](/docs/references/cloud/models/session) will have the following attributes.

| Property                   | Description                                                                                               |
| -------------------------- | --------------------------------------------------------------------------------------------------------- |
| provider                   | The OAuth2 Provider.                                                                                       |
| providerUid                | User ID from the OAuth2 Provider.                                                                         |
| providerAccessToken        | Access token from the OAuth2 provider. Use this to **make requests to the OAuth2 provider** to fetch personal data. |
| providerAccessTokenExpiry  | Check this value to know if an access token is about to expire.                                            |

You can use the `providerAccessToken` to make requests to your OAuth2 provider. Refer to the docs for the OAuth2 provider you're using to learn about making API calls with the access token.

# Refreshing OAuth2 tokens {% #refreshing-tokens %}

OAuth2 sessions expire to protect from security risks. OAuth2 sessions should be refreshed periodically, so access tokens don't expire. Check value of `providerAccessTokenExpiry` to know if the token is expired or is about to expire. Refreshing before every request might cause rate limit problems. You can do this by calling the [Update session](/docs/references/cloud/client-web/account#updateSession) endpoint right before token expiry, or before first request after expiry.

{% multicode %}
```js
const promise = account.updateSession('[SESSION_ID]');

promise.then(function (response) {
    console.log(response); // Success
}, function (error) {
    console.log(error); // Failure
});
```
```dart
import 'package:appwrite/appwrite.dart';

final client = Client()
    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint
    .setProject('5df5acd0d48c2');                // Your project ID

Account account = Account(client);

final result = await account.updateSession(
    sessionId: '[SESSION_ID]'
);
```
```kotlin
import io.appwrite.Client
import io.appwrite.services.Account

val client = Client(context)
    .setEndpoint("https://cloud.appwrite.io/v1") // Your API Endpoint
    .setProject("5df5acd0d48c2")                 // Your project ID

val account = Account(client)

val response = account.updateSession(
    sessionId = "[SESSION_ID]"
);
```
```swift
import Appwrite

let client = Client()
    .setEndpoint("https://cloud.appwrite.io/v1") // Your API Endpoint
    .setProject("5df5acd0d48c2") // Your project ID

let account = Account(client)

let session = try await account.updateSession(
    sessionId: "[SESSION_ID]"
);
```

{% /multicode %}

{% info title="GraphQL" %}
OAuth2 is not available through the GraphQL API. You can use the REST API or any Client SDK instead.
{% /info %}