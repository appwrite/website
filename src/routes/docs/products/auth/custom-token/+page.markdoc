---
layout: article
title: Custom token login
description: Limitless authentication flow in Appwrite. Find out how to implement custom authentication flow or connect to 3rd party authentication providers.
---

Tokens are short-lived secrets created by server that can be exchanged for session by client. You may already be familiar with tokens if you checked out [Magic URL login](/docs/products/auth/magic-url), [Email OTP login](/docs/products/auth/email-otp) or [Phone (SMS) login](/docs/products/auth/phone-sms).

Custom token allows you to use [Server SDK](/docs/sdks#server) to generate tokens for your own implementations. This allows you to code your own authentication methods using Appwrite Functions or your custom backend. You could implement nick&password sign-in, captcha-protected authentication, phone call auth, and much more. Custom tokens also allow you to skip authentication which is useful when you integrate Appwrite with external authenticaion providers such as Auth0, TypingDNA, or any provider trusted by your users.

# Create custom token {% #init %}

Once you have your server endpoint prepared either in Appwrite Function or custom backend, you can use [Create token](/docs/references/cloud/server-node/users#createToken) endpoint of Users API to generate a token.

```js
import { Client, Users } from "node-appwrite";

const client = new Client()
    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint
    .setProject('<PROJECT_ID>');               // Your project ID
    .setKey('<API_KEY>');                    // Your secret API key

const users = new Users(client);

const token = await users.createToken('[USER_ID]');

console.log(token.secret);
```

Token that got created includes a secret which is 6 character long hexadecimal string. You can configure length of the secret and expiry when creating a token.

If you are integrating with external provider or implementented your own, make sure to validate user authenticated properly before generating a token for him.

If you are implementing token-based authentication flow, share the token secret with user over any channel of your choice instead of directly giving it to him in the response.

If the client doesn't know his user ID during authentication, we recommend to directly return user ID to client as part of this step. If nessessary, you may also want to create or find user in your code based on specific defails you are provided in your authentication flow.

# Login {% #login %}

Once the client receives a token secret, we can use it to authenticate the user in the application. Use the [Client SDK's](/docs/sdks#client) [Create session endpoint](/docs/references/cloud/client-web/account#createSession) to exchange the token secret for a valid session, which logs the user.
```js
import { Client, Account } from "appwrite";

const client = new Client()
    .setEndpoint('https://cloud.appwrite.io/v1') // Your API Endpoint
    .setProject('<PROJECT_ID>');               // Your project ID

const account = new Account(client);

await account.createSession('[USER_ID]', '[SECRET]');
```

When the session is successfully created, the session is stored in a persistent manner and you can now do requests as authorized user from the application.