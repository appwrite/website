---
layout: article
title: Webhooks
description: Leverage webhooks in the Appwrite platform for real-time updates. Learn how to configure, manage, and integrate webhooks to keep your applications in sync.
---

Webhooks let you automate tasks and trigger workflows in your own systems when something happens in Appwrite. Think of them as event listeners — when a specific event fires in Appwrite, it sends an HTTP POST request to a URL you choose.

You can use webhooks to purge a CDN cache, send a Slack notification, log an event to your internal systems, or kick off a background job. You decide how to respond to those events.

# Add Your Webhook {% #addWebhook %}

To add a webhook, go to your Appwrite project dashboard:

1. Open your project.
2. Click **Webhooks** from the left-hand navigation.
3. Click **Add Webhook**.
4. Provide a name for your webhook.
5. Choose the events you want this webhook to listen to.
6. Optionally, set Basic HTTP authentication credentials (username and password) to protect your endpoint.

This helps ensure only Appwrite can post to your URL.

# Payload Format {% #payload %}

Every event has its own structured payload that mirrors the corresponding [API response](/docs/advanced/platform/events). This consistency makes it easy to reuse your existing request handlers or data parsers.

For example, if you're listening to the `account.create` event, the payload will match what you'd get from the `GET /account` endpoint.

```json
{
  "event": "account.create",
  "payload": {
    "$id": "user123",
    "email": "user@example.com",
    "name": "John Doe"
  }
}
```

# Headers {% #headers %}

Appwrite includes several HTTP headers in each webhook request to give you more context and help with debugging and verification:

| Header | Description |
|--------|-------------|
| `X-Appwrite-Webhook-Id` | The unique ID of the webhook that triggered the event. |
| `X-Appwrite-Webhook-Events` | A comma-separated list of event names that fired. |
| `X-Appwrite-Webhook-Name` | The name you gave this webhook in your project settings. |
| `X-Appwrite-Webhook-User-Id` | The user ID of the user who triggered the event. Empty if triggered by an API key. |
| `X-Appwrite-Webhook-Project-Id` | The ID of the project where the event occurred. |
| `X-Appwrite-Webhook-Signature` | HMAC-SHA1 signature of the request body, used for verification. |
| `User-Agent` | Always set to `Appwrite-Server`. |

# Verifying Payload Authenticity {% #verification %}

To verify that the request really came from Appwrite, use the `X-Appwrite-Webhook-Signature` header.

Here’s how to do it:

1. Get the **Webhook Secret Key** from your project dashboard.
2. Use the raw request body (exactly as received) and compute an HMAC-SHA1 hash using your webhook's secret key.
3. Compare your generated hash with the value of the `X-Appwrite-Webhook-Signature` header.

In Node.js, this might look like:

```js
const crypto = require('crypto');

function isValidSignature(secret, payload, signature) {
  const hash = crypto.createHmac('sha1', secret).update(payload).digest('hex');
  return hash === signature;
}
```

If they match, the request is legitimate.

For quick testing, you can use tools like [Beeceptor](https://beeceptor.com/) or [Typed Webhook](https://typedwebhook.tools/) to capture webhook requests and inspect payloads in real-time.

# Events {% #events %}

Appwrite fires events for resource changes, including create, update, and delete actions.

You can subscribe to events from various Appwrite services, including:

{% accordion %}
{% accordion_item title="Authentication events" %}
{% partial file="auth-events.md" /%}
{% /accordion_item %}
{% accordion_item title="Databases events" %}
{% partial file="databases-events.md" /%}
{% /accordion_item %}
{% accordion_item title="Storage events" %}
{% partial file="storage-events.md" /%}
{% /accordion_item %}
{% accordion_item title="Functions events" %}
{% partial file="functions-events.md" /%}
{% /accordion_item %}
{% accordion_item title="Messaging events" %}
{% partial file="messaging-events.md" /%}
{% /accordion_item %}
{% /accordion %}

[Learn more about events](/docs/advanced/platform/api-keys)
