---
layout: article
title: REST
description: 
difficulty: beginner
readtime: 10
---

Appwrite supports multiple protocols for accessing the server, including [REST](/docs/apis/rest), [GraphQL](/docs/apis/graphql), and [Realtime](/docs/apis/realtime). The REST API allows you to access your Appwrite server through HTTP requests without the needing an SDK. Each endpoint in the API represents a specific operation on a specific resource.

## Headers {% #headers %}

Appwrite's REST APIs expect certain headers to be included with each request:

{% table %}
* Header
* 
* Description
---
* `X-Appwrite-Project: [PROJECT-ID]`
* required
* The ID of your Appwrite project
---
* `Content-Type: application/json`
* required
* Content type of the HTTP request. Would usually be `application/json`.
---
* `X-Appwrite-Key: [API-KEY]`
* optional
* API key used for server authentication. Your API key is a secret, **do not** use it in client applications.
---
* `X-Appwrite-JWT: [TOKEN]`
* optional
* Token used for JWT authentication, tokens can be generated using the [Create JWT](/docs/products/auth/jwt) method.
---
* `X-Appwrite-Response-Format: [VERSION-NUMBER]`
* optional
* Version number used for backward compatibility. The response will be formatted to be compatible with the provided version number. This helps Appwrite SDKs keep backward compatibility with Appwrite server API version.
---
* `X-Fallback-Cookies: [FALLBACK-COOKIES]`
* optional
* Fallback cookies used in scenarios where browsers do not allow third-party cookies. Often used when there is no Custom Domain set for your Appwrite API.
---
{% /table %}

## Authentication {% #authentication %}

### Client side

You can create account sessions with POST requests to the Account API. Sessions are persisted using secured cookies. You can learn more about session persistence in the Authentication Guide.

The example below shows creating an account session with the Create Account Session with Email endpoint.

```json
POST /v1/account/sessions/email HTTP/1.1
Content-Type: application/json
X-Appwrite-Project: [PROJECT_ID]

{
  "email": "example@email.com",
  "password": "password"
}
```

You can find the cookies used to persist the new session in the response headers.

```json
Set-Cookie: a_session_61e71ec784ab035f7259_legacy=eyJ0...aSJ9; expires=Tue, 19-Dec-2023 21:26:51 GMT; path=/; domain=.cloud.appwrite.io; secure; httponly
Set-Cookie: a_session_61e71ec784ab035f7259=eyJ0...aSJ9; expires=Tue, 19-Dec-2023 21:26:51 GMT; path=/; domain=.cloud.appwrite.io; secure; httponly; samesite=None
```

These cookies are used in subsequent requests to authenticate the user.

```json
GET /v1/account HTTP/1.1
Cookie: a_session_61e71ec784ab035f7259_legacy=eyJ0...aSJ9; a_session_61e71ec784ab035f7259=eyJ0...aSJ9
Content-Type: application/json
X-Appwrite-Project: [PROJECT_ID]
```

### Server side

Server integrations use API keys to authenticate and are typically used for backend applications.

Server APIs are authenticated with API keys instead of account sessions. Simply pass an [API key](/docs/platform/api-keys) in the `X-Appwrite-key: [API-KEY]` header with the appropriate scopes.

```json
GET /v1/databases/{databaseId}/collections/{collectionId}/documents HTTP/1.1
Content-Type: application/json
X-Appwrite-Project: [PROJECT_ID]
X-Appwrite-Key: [API_KEY]
```

### JWT

JWT authentication is frequently used by server applications to act on behalf of a user. Users generate tokens using the [Create JWT](/todo) endpoint. When issuing requests authenticated with a JWT, Appwrite will treat the request like it is from the authenticated user.

```json
GET /v1/account HTTP/1.1
Content-Type: application/json
X-Appwrite-Project: [PROJECT_ID]
X-Appwrite-JWT: [TOKEN]
```

## Files {% #files %}

Appwrite implements resumable, chunked uploads for files larger than 5MB. Chunked uploads send files in chunks of 5MB to reduce memory footprint and increase resilience when handling large files. Appwrite SDKs will automatically handle chunked uploads, but it is possible to implement this with the REST API directly.

Upload endpoints in Appwrite, such as [Create File](todo) and [Create Deployment](todo), are different from other endpoints. These endpoints take multipart form data instead of JSON data. To implement chunked uploads, you will need to implement the following headers. If you wish, this logic is already available in any of the [Appwrite SDKs](/docs/sdks).

{% table %}
* Header
* 
* Description
---
* `X-Appwrite-Project: [PROJECT-ID]`
* required
* The ID of your Appwrite project
---
* `Content-Type: multipart/form-data; boundary=[FORM-BOUNDARY]`
* required
* Contains the content type of the HTTP request and provides a [boundary](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) that is used to parse the form data.
---
* `Content-Range: bytes [BYTE-RANGE]`
* required
* Contains information about which bytes are being transmitted in this chunk, with the format `[FIRST-BYTE]-[LAST-BYTE]/[TOTAL-BYTES]`.
---
* `X-Appwrite-ID: [FILE-ID]`
* required
* Contains ID of the file this chunk belongs to.
---
* `X-Appwrite-Key: [API-KEY]`
* optional
* API key used for server authentication. Your API key is a secret, **do not** use it in client applications.

{% /table %}

## Images {% #images %}

Some use cases do not allow custom headers, such as embedding images from Appwrite in HTML. In these cases, you can provide the Appwrite project ID using the query parameter project.

```HTML
<img src="[ENDPOINT]/v1/storage/buckets/[BUCKET_ID]/files/[FILE_ID]/preview?project=[PROJECT_ID]"/>
```

## Permissions {% #permissions %}

### Roles

## Unique ID {% #unique-id %}

Appwrite's SDKs have a helper `ID.unique()` to generate unique IDs. When using Appwrite without an SDK, pass the string `"unique()"` into the ID parameter.

## Queries {% #queries %}

Appwrite's SDKs provide a `Query` class to generate query strings. When using Appwrite without an SDK, you can template your own strings with the format below.

Query strings are passed to Appwrite using the `queries` parameter. You can attach multiple query strings by including the array parameter multiple times in the query string: `queries[]="..."&queries[]="..."`

{% info title="Best practice" %}
When using greater than, greater than or equal to, less than, or less than or equal to, it is not recommended to pass in multiple values. While the API will accept multiple values and return results with or logic, it's best practice to pass in only one value for performance reasons.

{% /info %}


## Rate limits {% #rate-limits %}

Appwrite's REST APIs are protected by the same rate limit policies, just like when using an SDK. Each API has a different rate limit, which is documented in the References section of each service in the Appwrite documentation.

[Learn more about Rate Limits](/docs/platform/rate-limits).

## Specifications {% #specifications %}

Appwrite provides a full REST API specification in the OpenAPI 3 and Swagger 2 formats every release. These can be accessed through Appwrite's GitHub repository and rendered using a variety of parsers and tools.

[Find the REST API specification for your Appwrite version](https://github.com/appwrite/appwrite/tree/master/app/config/specs).