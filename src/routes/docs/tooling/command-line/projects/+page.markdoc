---
layout: article
title: Deploy project with CLI 2.0
description: Efficiently deploy your Appwrite project using the Command-Line Tool (CLI).
---

After you're logged in, the CLI needs to be initialized with your Appwrite project.

# Pull project {% #pull-project %}

You can pull your Appwrite project's customizable settings using the `pull` command in the folder holding your `appwrite.json` file.

```sh
appwrite pull project
```

# Appwrite.json {% #appwritejson %}

After pulling your project, your `appwrite.json` project should look similar to this.

```
{
    "projectId": "<PROJECT_ID>",
    "projectName": "EchoVerse",
    "projectSettings": {
        "services": {
            "account": true,
            "avatars": true,
            "databases": true,
            "locale": true,
            "health": true,
            "storage": true,
            "teams": true,
            "users": true,
            "functions": true,
            "graphql": true,
            "messaging": true
        },
        "auth": {
            "methods": {
                "jwt": true,
                "phone": true,
                "invites": true,
                "anonymous": true,
                "email-otp": true,
                "magic-url": true,
                "email-password": true
            },
            "security": {
                "duration": 7200,
                "limit": 100,
                "sessionsLimit": 10,
                "passwordHistory": 0,
                "passwordDictionary": false,
                "personalDataCheck": false
            }
        }
    }
}
```

# Push project {% #push-project %}

To push the changes you made inside your `appwrite.json` file, use the `push` command in the folder holding your `appwrite.json` file.

```sh
appwrite push project
```

# Commands {% #commands %}

The project command is for overall project administration. Appwrite database CLI commands generally follow the following syntax:

```sh
appwrite project [COMMAND] [OPTIONS]
```
{% table %}
---
* `getUsage [options]` | `listVariables`
* Get a list of all project variables. These variables will be accessible in all Appwrite Functions at runtime.
---
* `createVariable [options]` 
* Create a new project variable. This variable will be accessible in all Appwrite Functions at runtime.
---
* `getVariable [options]` 
* Get a project variable by its unique ID.
---
* `updateVariable [options]`
* Update project variable by its unique ID. This variable will be accessible in all Appwrite Functions at runtime.
---
* `deleteVariable [options]`
* Delete a project variable by its unique ID.
---
{% /table %}