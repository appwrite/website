---
layout: article
title: Deploy Databases
description:
---

// Create project

```
appwrite init
? How would you like to start? (Use arrow keys)
> Create a new Appwrite project
  Link this directory to an existing Appwrite project
```

```
appwrite init
? How would you like to start? Create a new Appwrite project
? Choose the project organization 25912221200392927
? What would you like to name your project? My Awesome Project
? What ID would you like to have for your project? unique()
✓ Success
```

// Create database

```
appwrite databases create --databaseId "unique()" --name "genre"
```

// pull database
```
appwrite pull collection
? From which database would you like to pull collections? (Press <space> to select, <a> 
to toggle all, <i> to invert selection, and <enter> to proceed)
>( ) songs (6sadfvasdva2323bc0)
 ( ) playlists (12escvqw2120ffd1)
```

```
? From which database would you like to pull collections? songs (64ascaq2edswwc0)  
ℹ Info Found 1 collections
ℹ Info Fetching songs ...
✓ Success 
```

// appwrite.json 
```server-nodejs
{
    "projectId": "25912221200392927,
    "databases": [
        {
            "$id": "5e5ea5c16897e",
            "name": "songs",
            "$createdAt": "2023-07-01T18:35:27.802+00:00",
            "$updatedAt": "2023-08-01T21:41:41.663+00:00",
            "enabled": true
        }
    ],
    "collections": [
        {
            "$id": "25912239163242502",
            "$permissions": [
                "create(\"any\")",
                "read(\"any\")",
                "update(\"any\")",
                "delete(\"any\")"
            ],
            "databaseId": "2591258431319902",
            "name": "songs",
            "enabled": true,
            "documentSecurity": true,
            "attributes": [
                {
                    "key": "name",
                    "type": "string",
                    "status": "available",
                    "error": "",
                    "required": false,
                    "array": false,
                    "size": 100,
                    "default": null
                },
                {
                    "key": "audio",
                    "type": "string",
                    "status": "available",
                    "error": "",
                    "required": false,
                    "array": false,
                    "size": 200,
                    "default": null
                },
                {
                    "key": "genre",
                    "type": "string",
                    "status": "available",
                    "error": "",
                    "required": false,
                    "array": false,
                    "size": 500,
                    "default": null
                },
                {
                    "key": "artist",
                    "type": "string",
                    "status": "available",
                    "error": "",
                    "required": false,
                    "array": false,
                    "size": 500,
                    "default": null
                }
            ],
            "indexes": []
        }
    ]
}
```

```
appwrite push
? Which resources would you like to push? Collections
? Which collections would you like to push? music (25912239163242502 - 25912239163242502)
ℹ Info Checking for databases and collection changes
✓ Success Updated music ( 259122391632425028 ) name
ℹ Info No changes has been detected. Skipping music ( 259122391632425028 )
```

appwrite databases
Usage: index databases [options] [command]

The databases command allows you to create structured collections of documents, query and filter lists of documents.

# List {% #list %}

Below is a list of the available commands in the Appwrite CLI. You can get more information on each command by running `appwrite [COMMAND] --help`.

{% table %}
* Command
* Description
---
* list [options]
* Get a list of all databases from the current Appwrite project. You can use the search parameter to filter your results.
---
* create [options]
* Create a new Database.
---
* getUsage [options] | get [options]     
* Get a database by its unique ID. This endpoint response returns a JSON object with the database metadata.
---
* update [options]
* Update a database by its unique ID.
---
* delete [options]
* Delete a database by its unique ID. Only API keys with databases.write scope can delete a database.
---
* listCollections [options]
*  Get a list of all collections that belong to the provided databaseId. You can use the search parameter to filter your results.
---
* createCollection [options]
* Create a new Collection. Before using this route, you should create a new database resource using either a [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.
---  
* getCollection [options]
* Get a collection by its unique ID. This endpoint response returns a JSON object with the collection metadata.
---
* updateCollection [options]
* Update a collection by its unique ID.
---
* deleteCollection [options]
* Delete a collection by its unique ID. Only users with write permissions have access to delete this resource.
---
* listAttributes [options]
* List attributes in the collection.
---
* createBooleanAttribute [options]
* Create a boolean attribute.
---
* updateBooleanAttribute [options]
* Update a boolean attribute. Changing the 'default' value will not update already existing documents.
---
* createDatetimeAttribute [options]
* Create a date time attribute according to the ISO 8601 standard.
---
* updateDatetimeAttribute [options]
* Update a date time attribute. Changing the 'default' value will not update already existing documents.
---
* createEmailAttribute [options]
* Create an email attribute.
---
* updateEmailAttribute [options]
* Update an email attribute. Changing the 'default' value will not update already existing documents.
---
* createEnumAttribute [options]
* Create an enumeration attribute. The 'elements' param acts as a white-list of accepted values for this attribute.
---
* updateEnumAttribute [options]
* Update an enum attribute. Changing the 'default' value will not update already existing documents.
---  
* createFloatAttribute [options]
* Create a float attribute. Optionally, minimum and maximum values can be provided.
---
* updateFloatAttribute [options]
* Update a float attribute. Changing the 'default' value will not update already existing documents.
---  
* createIntegerAttribute [options]
* Create an integer attribute. Optionally, minimum and maximum values can be provided.
---
* updateIntegerAttribute [options]
* Update an integer attribute. Changing the 'default' value will not update already existing documents.
---
* createIpAttribute [options]            
* Create IP address attribute.
---
* updateIpAttribute [options]
* Update an ip attribute. Changing the 'default' value will not update already existing documents.
---
* createRelationshipAttribute [options]
* Create relationship attribute. [Learn more about relationship attributes](https://appwrite.io/docs/databases-relationships#relationship-attributes).
---
* createStringAttribute [options]
* Create a string attribute.
---
* updateStringAttribute [options]
* Update a string attribute. Changing the 'default' value will not update already existing documents.
---
* createUrlAttribute [options]           
* Create a URL attribute.
---
* updateUrlAttribute [options]          
* Update an url attribute. Changing the 'default' value will not update already existing documents.
---
* getAttribute [options]
* Get attribute by ID.
---
* deleteAttribute [options]    
* Deletes an attribute.
---
* updateRelationshipAttribute [options]  
* Update relationship attribute. [Learn more about relationship attributes](https://appwrite.io/docs/databases-relationships#relationship-attributes).
---
* listDocuments [options]
* Get a list of all the user's documents in a given collection. You can use the query params to filter your results.
---
* createDocument [options]               
* Create a new Document. Before using this route, you should create a new collection resource using either a [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.
---
* getDocument [options]
* Get a document by its unique ID. This endpoint response returns a JSON object with the document data.
---
* updateDocument [options]
* Update a document by its unique ID. Using the patch method you can pass only specific fields that will get updated.
---
* deleteDocument [options]
* Delete a document by its unique ID.
---
* listDocumentLogs [options]
* Get the document activity logs list by its unique ID.
---
* listIndexes [options]
* List indexes in the collection.
---
* createIndex [options]
* Creates an index on the attributes listed. Your index should include all the attributes you will query in a single request. Attributes can be 'key', 'fulltext', and 'unique'.
---
* getIndex [options]
* Get index by ID.
---
* deleteIndex [options]
* Delete an index.
---
* listCollectionLogs [options]
* Get the collection activity logs list by its unique ID.
---
* getCollectionUsage [options] | listLogs [options]
* Get the database activity logs list by its unique ID.
---
* getDatabaseUsage [options] | help [command]
* display help for command
---
  {% /table %}