---
layout: article
title: Deploy databases with CLI 2.0
description: Efficiently deploy your Appwrite database using the Command-Line Tool (CLI).
---

Create and manage your databases using the CLI 2.0 commands. Setup your Appwrite application using CLI commands [here](/docs/tooling/command-line/installation).

# Create database {% #create-database %}

Create an Appwrite database by running the `database` command in the folder holding your `appwrite.json` file.

```sh
appwrite databases create --databaseId "unique()" --name "genre"
```

# Pull database {% #pull-database %}

You can pull your Appwrite database's customizable settings using the `pull` command in the folder holding your `appwrite.json` file.

```sh
appwrite pull collection // currently only way to pull database 
? From which database would you like to pull collections?
```

# Push Database {% #pull-database %}

```sh
appwrite push
? Which resources would you like to push? Collections // currently only way to push database
```

# Appwrite.json {% #Appwritejson %}

An example of what your `appwrite.json` file should look like.

```server-nodejs
{
    "projectId": "25912221200392927,
    "databases": [
        {
            "$id": "5e5ea5c16897e",
            "name": "songs",
            "$createdAt": "2023-07-01T18:35:27.802+00:00",
            "$updatedAt": "2023-08-01T21:41:41.663+00:00",
            "enabled": true
        }
    ],
    "collections": [
        {
            "$id": "25912239163242502",
            "$permissions": [
                "create(\"any\")",
                "read(\"any\")",
                "update(\"any\")",
                "delete(\"any\")"
            ],
            "databaseId": "2591258431319902",
            "name": "songs",
            "enabled": true,
            "documentSecurity": true,
            "attributes": [
                {
                    "key": "name",
                    "type": "string",
                    "status": "available",
                    "error": "",
                    "required": false,
                    "array": false,
                    "size": 100,
                    "default": null
                },
                {
                    "key": "audio",
                    "type": "string",
                    "status": "available",
                    "error": "",
                    "required": false,
                    "array": false,
                    "size": 200,
                    "default": null
                },
                {
                    "key": "genre",
                    "type": "string",
                    "status": "available",
                    "error": "",
                    "required": false,
                    "array": false,
                    "size": 500,
                    "default": null
                },
                {
                    "key": "artist",
                    "type": "string",
                    "status": "available",
                    "error": "",
                    "required": false,
                    "array": false,
                    "size": 500,
                    "default": null
                }
            ],
            "indexes": []
        }
    ]
}
```

# List {% #list %}

The databases command allows you to create structured collections of documents, queries, and filter lists of documents. Appwrite database CLI commands generally follow the following syntax:

```sh
appwrite databases [COMMAND] [OPTIONS]
```

{% table %}
* Command
* Description
---
* list [options]
* Get a list of all databases from the current Appwrite project. You can use the search parameter to filter your results.
---
* create [options]
* Create a new Database.
---
* getUsage [options] | get [options]     
* Get a database by its unique ID. This endpoint response returns a JSON object with the database metadata.
---
* update [options]
* Update a database by its unique ID.
---
* delete [options]
* Delete a database by its unique ID. Only API keys with databases.write scope can delete a database.
---
* getCollectionUsage [options] | listLogs [options]
* Get the database activity logs list by its unique ID.
---
* getDatabaseUsage [options] | help [command]
* display help for command
---
{% /table %}