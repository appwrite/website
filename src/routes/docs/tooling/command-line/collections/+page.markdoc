---
layout: article
title: Deploy collections with CLI 2.0
description: Efficiently deploy your Appwrite collections using the Command-Line Tool (CLI). 
---

Create and manage your collections using the CLI 2.0 commands. Set up your Appwrite application using CLI commands [here](/docs/tooling/command-line/installation).

The Appwrite CLI also helps you deploy your project's databases and collections schema from one project to another.

# Pull collection {% #pull-collection %}

You can pull your Appwrite collection's and database's customizable settings using the `pull` command in the folder holding your `appwrite.json` file.

```sh
appwrite pull collections
```

# Appwrite.json {% #appwritejson %}

After pulling your Appwrite function, your `Appwrite.json` file should look similar to the following:

```
{
    "projectId": "<PROJECT_ID>",
    "databases": [
        {
            "$id": "<DATABASE_ID>",
            "name": "songs",
            "$createdAt": "2023-07-01T18:35:27.802+00:00",
            "$updatedAt": "2023-08-01T21:41:41.663+00:00",
            "enabled": true
        }
    ],
    "collections": [
        {
            "$id": "COLLECTION_ID",
            "$permissions": [
                "create(\"any\")",
                "read(\"any\")",
                "update(\"any\")",
                "delete(\"any\")"
            ],
            "databaseId": "<DATABASE_ID>",
            "name": "music",
            "enabled": true,
            "documentSecurity": false,
            "attributes": [
                {
                    "key": "userID",
                    "type": "string",
                    "status": "available",
                    "error": "",
                    "required": false,
                    "array": false,
                    "size": 100,
                    "default": null
                },
                {
                    "key": "name",
                    "type": "string",
                    "status": "available",
                    "error": "",
                    "required": false,
                    "array": false,
                    "size": 100,
                    "default": null
                },
                {
                    "key": "cloudinaryId",
                    "type": "string",
                    "status": "available",
                    "error": "",
                    "required": false,
                    "array": false,
                    "size": 100,
                    "default": null
                },
                {
                    "key": "user",
                    "type": "string",
                    "status": "available",
                    "error": "",
                    "required": false,
                    "array": false,
                    "size": 100,
                    "default": null
                },
                {
                    "key": "audio",
                    "type": "string",
                    "status": "available",
                    "error": "",
                    "required": false,
                    "array": false,
                    "size": 200,
                    "default": null
                },
                {
                    "key": "genre",
                    "type": "string",
                    "status": "available",
                    "error": "",
                    "required": false,
                    "array": false,
                    "size": 500,
                    "default": null
                },
                {
                    "key": "artist",
                    "type": "string",
                    "status": "available",
                    "error": "",
                    "required": false,
                    "array": false,
                    "size": 500,
                    "default": null
                }
            ],
            "indexes": []
        }
    ]
}
```

# Push collection {% #push-collection %}

To push the changes you made inside your `appwrite.json` file, use the `push` command in the folder holding your `appwrite.json` file.

```sh
appwrite push collections
```

# Commands {% #commands %}

The databases command allows you to create structured collections of documents, queries, and filter lists of documents. Appwrite database CLI commands generally follow the following syntax:

```sh
appwrite databases [COMMAND] [OPTIONS]
```

{% table %}
* Command
* Description
---
* `listCollections [options]`
* Get a list of all collections that belong to the provided databaseId. You can use the search parameter to filter your results.
---
* `createCollection [options]`
* Create a new Collection. Before using this route, you should create a new database resource using either a [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.
---  
* `getCollection [options]`
* Get a collection by its unique ID. This endpoint response returns a JSON object with the collection metadata.
---
* `updateCollection [options]`
* Update a collection by its unique ID.
---
* `deleteCollection [options]`
* Delete a collection by its unique ID. Only users with write permissions have access to delete this resource.
---
* `listAttributes [options]`
* List attributes in the collection.
---
* `createBooleanAttribute [options]`
* Create a boolean attribute.
---
* `updateBooleanAttribute [options]`
* Update a boolean attribute. Changing the 'default' value will not update already existing documents.
---
* `createDatetimeAttribute [options]`
* Create a date time attribute according to the ISO 8601 standard.
---
* `updateDatetimeAttribute [options]`
* Update a date time attribute. Changing the 'default' value will not update already existing documents.
---
* `createEmailAttribute [options]`
* Create an email attribute.
---
* `updateEmailAttribute [options]`
* Update an email attribute. Changing the 'default' value will not update already existing documents.
---
* `createEnumAttribute [options]`
* Create an enumeration attribute. The 'elements' param acts as a white-list of accepted values for this attribute.
---
* `updateEnumAttribute [options]`
* Update an enum attribute. Changing the 'default' value will not update already existing documents.
---  
* `createFloatAttribute [options]`
* Create a float attribute. Optionally, minimum and maximum values can be provided.
---
* `updateFloatAttribute [options]`
* Update a float attribute. Changing the 'default' value will not update already existing documents.
---  
* `createIntegerAttribute [options]`
* Create an integer attribute. Optionally, minimum and maximum values can be provided.
---
* `updateIntegerAttribute [options]`
* Update an integer attribute. Changing the 'default' value will not update already existing documents.
---
* `createIpAttribute [options]`     
* Create IP address attribute.
---
* `updateIpAttribute [options]`
* Update an ip attribute. Changing the 'default' value will not update already existing documents.
---
* `createRelationshipAttribute [options]`
* Create relationship attribute. [Learn more about relationship attributes](https://appwrite.io/docs/databases-relationships#relationship-attributes).
---
* `createStringAttribute [options]`
* Create a string attribute.
---
* `updateStringAttribute [options]`
* Update a string attribute. Changing the 'default' value will not update already existing documents.
---
* `createUrlAttribute [options]`          
* Create a URL attribute.
---
* `updateUrlAttribute [options]`
* Update an url attribute. Changing the 'default' value will not update already existing documents.
---
* `getAttribute [options]`
* Get attribute by ID.
---
* `deleteAttribute [options]` 
* Deletes an attribute.
---
* `updateRelationshipAttribute [options]`  
* Update relationship attribute. [Learn more about relationship attributes](https://appwrite.io/docs/databases-relationships#relationship-attributes).
---
* `listIndexes [options]`
* List indexes in the collection.
---
* `createIndex [options]`
* Creates an index on the attributes listed. Your index should include all the attributes you will query in a single request. Attributes can be 'key', 'fulltext', and 'unique'.
---
* `getIndex [options]`
* Get index by ID.
---
* `deleteIndex [options]`
* Delete an index.
---
* `listCollectionLogs [options]`
* Get the collection activity logs list by its unique ID.
---
{% /table %}
