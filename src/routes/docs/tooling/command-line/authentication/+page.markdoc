---
layout: article
title: Deploy authentication with CLI 2.0
description: Efficiently deploy your Appwrite authentication using the Command-Line Tool (CLI).
---

Create and manage your authentication using the CLI 2.0 commands. Setup your Appwrite application using CLI commands [here](/docs/tooling/command-line/installation).

# Create account {% #create-account %}

You can create an user account inside your database using the `users create` command in the folder holding your `appwrite.json` file.

```sh
appwrite users create --userId "unique()" --name "test" --password "test1234"
```

# Login to your account {% #login-to-your-account %}

You can create a session for your user account inside your database using the `users createSession` command in the folder holding your `appwrite.json` file.

```sh
appwrite users createSession --userId "12u0fu9ue09uf0jfejfefjj3"
```

# Get the current account {% #get-the-current-account %}

You can get the current logged-in user account inside your database using the `users get` command in the folder holding your `appwrite.json` file.

```sh
 appwrite users get --userId '1n0d02309je029fjd199jffj'
```

## Logout {% #logout %}

You can delete a session for your user account inside your database using the `users createSession` command in the folder holding your `appwrite.json` file.

```sh
appwrite users deleteSessions --userId '03jf0993293jfjf930'
```

# List {% #list %}

The users command allows you to manage your project users. Appwrite database CLI commands generally follow the following syntax:

```sh
appwrite users [COMMAND] [OPTIONS]
```

{% table %}
* Command
* Description
---
* list [options]                      
* Get a list of all the project's users. You can use the query params to filter your results.
---
* create [options]                    
* Create a new user.
---
* createArgon2User [options]          
* Create a new user. Password provided must be hashed with the [Argon2](https://en.wikipedia.org/wiki/Argon2) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.
---
* createBcryptUser [options]          
* Create a new user. Password provided must be hashed with the [Bcrypt](https://en.wikipedia.org/wiki/Bcrypt) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.
---
* listIdentities [options]            
* Get identities for all users.
---
* deleteIdentity [options]            
* Delete an identity by its unique ID.
---
* createMD5User [options]             
* Create a new user. Password provided must be hashed with the [MD5](https://en.wikipedia.org/wiki/MD5) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.
---
* createPHPassUser [options]          
* Create a new user. Password provided must be hashed with the [PHPass](https://www.openwall.com/phpass/) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.
---
* createScryptUser [options]          
* Create a new user. Password provided must be hashed with the [Scrypt](https://github.com/Tarsnap/scrypt) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.
---
* createScryptModifiedUser [options]  
* Create a new user. Password provided must be hashed with the [Scrypt Modified](https://gist.github.com/Meldiron/eecf84a0225eccb5a378d45bb27462cc) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.
---
* createSHAUser [options]             
* Create a new user. Password provided must be hashed with the [SHA](https://en.wikipedia.org/wiki/Secure_Hash_Algorithm) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.
---
* getUsage [options] | get [options]                       
* Get a user by its unique ID.
---
* delete [options]                    
* Delete a user by its unique ID, thereby releasing it's ID. Since ID is released and can be reused, all user-related resources like documents or storage files should be deleted before user deletion. If you want to keep ID reserved, use the [updateStatus](https://appwrite.io/docs/server/users#usersUpdateStatus) endpoint instead.
---
* updateEmail [options]               
* Update the user email by its unique ID.
---
* createJWT [options]                 
* Use this endpoint to create a JSON Web Token for user by its unique ID. You can use the resulting JWT to authenticate on behalf of the user. The JWT secret will become invalid if the session it uses gets deleted.
---
* updateLabels [options]             
* Update the user labels by its unique ID. Labels can be used to grant access to resources. While teams are a way for user's to share access to a resource, labels can be defined by the developer to grant access without an invitation. See the [Permissions docs](https://appwrite.io/docs/permissions) for more info.
---
* listLogs [options]                  
* Get the user activity logs list by its unique ID.
---
* listMemberships [options]           
* Get the user membership list by its unique ID.
---
* updateMfa [options]
* Enable or disable MFA on a user account.
---
* deleteMfaAuthenticator [options]
* Delete an authenticator app.
---
* listMfaFactors [options]            
* List the factors available on the account to be used as a MFA challange.
---
* getMfaRecoveryCodes [options]     
* Get recovery codes that can be used as backup for MFA flow by User ID. Before getting codes, they must be generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method.
---
* updateMfaRecoveryCodes [options]   
* Regenerate recovery codes that can be used as backup for MFA flow by User ID. Before regenerating codes, they must be first generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method.
---
* createMfaRecoveryCodes [options]    
* Generate recovery codes used as backup for MFA flow for User ID. Recovery codes can be used as a MFA verification type in [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge) method by client SDK.
---
* updateName [options]                
* Update the user name by its unique ID.
---
* updatePassword [options]            
* Update the user password by its unique ID.  
---
* updatePhone [options]               
* Update the user phone by its unique ID.
---
* getPrefs [options]                  
* Get the user preferences by its unique ID. 
---
* updatePrefs [options]               
* Update the user preferences by its unique ID. The object you pass is stored as is, and replaces any previous value. The maximum allowed prefs size is 64kB and throws error if exceeded.
---
* listSessions [options]              
* Get the user sessions list by its unique ID.  
---
* createSession [options]             
* Creates a session for a user. Returns an immediately usable session object.  If you want to generate a token for a custom authentication flow, use the [POST /users/{userId}/tokens](https://appwrite.io/docs/server/users#createToken) endpoint.
---
* deleteSessions [options]           
* Delete all user's sessions by using the user's unique ID.
---
* deleteSession [options]             
* Delete a user sessions by its unique ID.
---
* updateStatus [options]              
* Update the user status by its unique ID. Use this endpoint as an alternative to deleting a user if you want to keep user's ID reserved.
---
* listTargets [options]               
* List the messaging targets that are associated with a user.
---
* createTarget [options]              
* Create a messaging target.
---
* getTarget [options]                 
* Get a user's push notification target by ID.   
---
* updateTarget [options]              
* Update a messaging target.
---
* deleteTarget [options]              
* Delete a messaging target. request to the [PUT /account/sessions/custom](https://appwrite.io/docs/references/cloud/client-web/account#updateCustomSession) endpoint to complete the login process.
---
* updateEmailVerification [options]   
* Update the user email verification status by its unique ID.
---
* updatePhoneVerification [options]   
* Update the user phone verification status by its unique ID.
---
{% /table %}