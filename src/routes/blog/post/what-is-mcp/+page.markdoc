---
layout: post
title: What exactly is MCP, and why is it trending?
description: Appwrite introduces its own Model Context Protocol (MCP). Learn what it is and why it's becoming a popular solution for AI assistants to interact with real-world tools, and how to install Appwrite's new MCP server.
date: 2025-03-12
cover: /images/blog/what-is-mcp/cover.png
timeToRead: 7
author: ebenezer-don
category: tutorial
---

If you've ever tried using an AI assistant for something practical, like pulling real data from your work files, checking a database, or sending a message, then you've probably hit a frustrating wall.

These AI models are brilliant, but they're also **disconnected** from the tools we actually use.

You ask:

- *“Summarize my latest report.”* → AI doesn't know where your reports are.
- *“Check today's database entries.”* → AI can't see your database.
- *“Post an update on Slack.”* → AI can't touch Slack.

For all their intelligence, AI models are basically **brains with no hands**. They can think, but they can't **interact** with the world outside of what's in their training data.

This is where you start to need **MCP (Model Context Protocol)**.

And no, that name is not very intuitive. You've probably heard it thrown around on social media and in tech circles, but it doesn't make much sense on its own.

**What does "Model Context Protocol" mean?** Let's break it down in a way that actually makes sense.

# So, what's MCP?

Forget the fancy words for a second.

**MCP** is just a way for AI assistants to interact with real-world tools like databases, file systems, APIs, and apps.

Currently, AI assistants can reason, process information, and answer questions, but don't know where anything is, and can't actually do anything outside of its box.

Now imagine you give it a phone with direct lines to your company's database, your Slack account, your email inbox, and your documents.

That's **exactly** what MCP does.

It's the system that allows an AI assistant to:

- **Fetch** real data.
- **Look up** information from live sources.
- **Trigger** actions (like posting messages, running queries, or updating records).

Instead of just *guessing* based on past knowledge, the AI can now **pull actual facts** from the places that matter.

MCP is just the **standardized way** of making this happen. Instead of every AI needing custom integrations for every tool, MCP provides **one universal way** to hook everything together.

MCP was developed by Anthropic and released as an open standard in November 2024, making it a relatively new but rapidly growing solution.

# How does MCP actually work?

Let's say you have an AI assistant running on your computer, and you want it to check your company's database for the latest user signups.

Without MCP:

1. The AI assistant doesn't have direct access to the database.
2. You'd have to manually open the database, find the right table, and read the data yourself.

With MCP:

1. The AI assistant sends a request like *“Get the latest 10 users from the database”* to the MCP server.
2. The **MCP server** translates that into an actual database query and fetches the result.
3. The **MCP server** sends the data back to the AI assistant in a structured way.
4. The AI assistant now “knows” the latest user signups and can use that data to answer you.

From your perspective, the AI **just knew** the answer. But behind the scenes, MCP acted as the middleman, handling all the messy API calls and database queries.

You can skip this part if you're not interested in yet another technical detail, but here's a bit more on how it works: MCP uses a client-server architecture. The AI assistant (called an MCP host) talks to an MCP client, which connects to an MCP server. The server then accesses data sources, like your database or APIs, securely. Communication happens via standard input/output (stdio) for local servers or Server-Sent Events (SSE) for remote servers, though remote support is still in development. For now, MCP servers run locally to limit data access scope, ensuring security.

# Why would one need MCP?

You might be thinking: *“Okay, so AI assistants need a way to talk to external tools. But isn't that just APIs?”*

Good question. The key difference is that **MCP standardizes the way AI models access different tools**.

## Before MCP

If you wanted an AI to work with five different tools (Slack, Google Drive, a database, GitHub, and an internal API), you had to:

- Write custom code for each API.
- Deal with different authentication systems for each one.
- Manually update integrations when API changes happened.

Every AI needed custom connections to every tool it interacted with.

## With MCP

MCP solves this problem by introducing **one universal way** for AI to access tools.

- Instead of writing five different integrations, the AI only needs to know MCP.
- Instead of every AI assistant needing custom code for each tool, MCP servers handle the communication.

This makes AI workflows faster, simpler, and scalable.

Plus, MCP is flexible. You can switch between different AI providers (like Anthropic, OpenAI, or others) without reconfiguring your integrations, because they all use the same MCP standard. This vendor-agnostic approach is a big win for developers and businesses.

# What can MCP actually do in the real world?

MCP is not just another “AI hype”. It's already being used in real tools today.

## 1. AI-assisted coding

Development tools like **Zed, Cursor, and Replit** have integrated MCP into their systems to make it much easier for AI agents to retrieve relevant information, better understand context around a task, and provide more accurate code.

Instead of AI just *guessing* how your project works, it can:

- Read documentation stored in your repo.
- Check recent commits for context.
- Fetch database queries from your backend.

This makes AI agents much more useful for developers, as they can now carry out tasks end-to-end.

## 2. AI assistants that know your business data

Companies can now use MCP to enable internal AI assistants to **pull live sales reports, check inventory, and analyze customer data**.

An employee could just ask:

- *“What were last month's top-selling products?”*
- *“Are we seeing any patterns in customer complaints?”*

And instead of getting **generic answers**, the AI pulls **real company data** and responds with **accurate insights**.

## 3. A real AI personal assistant

Imagine having an AI assistant that actually understands your files, emails, and calendar.

Instead of you manually searching for an old PDF or checking your schedule, you just ask:

- *“Summarize my meeting notes from last week.”*
- *“Find the invoice I received in February.”*

MCP lets AI assistants **fetch real information** without you needing to switch apps or dig through folders.

## 4. Cloud platforms like Appwrite

Appwrite has introduced the **Appwrite MCP server** to allow AI assistants to interact with Appwrite projects directly. With this, you can now **query databases, fetch user lists, and trigger actions** on your Appwrite project using AI assistants.

# More about Appwrite MCP server

Appwrite MCP is an **MCP server** that connects AI assistants to your **Appwrite project**.

It currently supports:

- **Databases**: Query and retrieve database records.
- **Users**: Fetch user lists and details.

## How it works

Here's a simple example of how Appwrite MCP works:

1. **The AI assistant sends a request** via MCP (e.g., *“Get all users from my Appwrite project”*).
2. **The Appwrite MCP server receives the request** and translates it into an Appwrite API call.
3. **The Appwrite API returns the data** to the MCP server.
4. **The MCP server structures the response** in a format the AI can understand.
5. **The AI assistant uses the data** to generate a response.

## How to set it up

An easy way to try out the Appwrite MCP is by using Claude Desktop. Install Claude on your computer if you don't have it already, then navigate to **Settings → Developer** and click on **Edit Config**. This should lead you to your `claude_desktop_config.json` file.

Next, edit your config file and add this:

```json
{
  "mcpServers": {
    "appwrite": {
      "command": "uvx",
      "args": [ "mcp-server-appwrite" ],
      "env": {
        "APPWRITE_PROJECT_ID": "your-project-id",
        "APPWRITE_API_KEY": "your-api-key"
      }
    }
  }
}
```

> You'll need to [install uvx](https://docs.astral.sh/uv/getting-started/installation/) on your computer for the command to work.

Next, opening Claude Desktop should show you a tool icon in the chat input field with a list of the available MCP tools.

![Claude Desktop MCP tool icon](/images/blog/what-is-mcp/claude-mcp-tools.png)

If you get an error that the Appwrite MCP server failed to start, it might be that your computer hasn't recognized the `uvx` command yet. In that case, you can replace the `uvx` string in your config object's `command` property with the direct path to your uv installation. Here's an example for MacOS:

```json
"command": "/Users/username/.local/bin/uvx",
```

With the MCP server successfully started on Claude Desktop, you should now be able to ask Claude to retrieve data or perform action on your Appwrite project.

![Claude Desktop MCP chat](/images/blog/what-is-mcp/claude-mcp-chat.png)

You can also set up the Appwrite MCP server with other AI tools like Cursor and WindSurf. For more examples and specific setup instructions, check out the [MCP documentation](https://appwrite.io/docs/tooling/mcp?doFollow=true).

# **Final thoughts**

MCP changes how AI assistants work. Instead of being limited to general knowledge, they can now access **real data from real systems** in a structured way.

This shift will increase the usefulness of AI in day-to-day workflows. So if you've ever felt that AI models are great at answering questions but useless when it comes to real-world tasks, MCP is one way to bridge that gap.

And because MCP is an **open standard**, it doesn't lock anyone into a single platform or tool. It's something that can evolve and be adopted across different industries. The more systems that integrate MCP, the more natural it becomes to interact with AI as something that can actually get things done.

# Further reading
- [Appwrite MCP documentation](/docs/tooling/mcp?doFollow=true)
- [Anthropic MCP documentation](https://docs.anthropic.com/en/docs/agents-and-tools/mcp)
- [Building a chat app with Appwrite and Google Gemini](/blog/post/build-a-chat-app-with-appwrite-and-gemini?doFollow=true)
