---
layout: post
title: "Budget caps: How to stop unexpected cloud bills before they happen"
description: Learn how to set budget caps in your Appwrite console to avoid unexpected cloud bills.
date: 2025-01-23
cover: /images/blog/budget-caps-stop-unexpected-cloud-bills/cover.png
timeToRead: 3
author: ebenezer-don
category: tutorial
featured: false
---

You might have come across the recent post about a Firebase user who got hit with a $70k bill. This has caused another round of debates about cloud billing practices and who's responsible when things go wrong. These stories keep happening because most cloud providers only offer alerts, not hard stops.

![Firebase bill post](/images/blog/budget-caps-stop-unexpected-cloud-bills/Image1-post.png)

In Appwrite, we believe you should have real control over your cloud spending. And this is why we took a different approach. In this article, we'll learn how Appwrite Cloud prevents this kind of situation, and why budget caps matter when it comes to cloud billing.

# What happened with Firebase?

A Firebase user recently got an alert that changed their day. They owed Google $70k after their app accidentally stored 1 petabyte of data in Google Cloud Storage. The initial bill was $61,200, but it got even worse by the time their developer could step in and downgrade the project, as they had already accumulated around $7k in additional charges.

# The problem with just having alerts

Firebase does have budget alerts, which will send you an email when you hit certain spending thresholds. But there's a fundamental problem with relying only on alerts: they don't actually stop the charges.

Think about what happens if you're:

- Traveling when the alert comes in
- Unable to access your computer right away
- Simply miss the email

By the time you see that alert and can do something about it, you might already be thousands of dollars in debt. That's why we took a different approach with Appwrite.

# How Appwrite's budget caps work

We built budget caps into Appwrite because we believe you should have real control over your cloud spending. And setting a budget cap in your project is quite straightforward.

## 1. Understanding your usage

In your Appwrite console, you can set a budget cap for an organization by opening the **Billing** tab.

![Billing tab in Appwrite console](/images/blog/budget-caps-stop-unexpected-cloud-bills/Image2-billing-tab.png)

Before setting any caps, you can click on **View estimated usage** to get a clear picture of your typical consumption patterns. This helps you set a cap that makes sense for your app.

![Usage statistics](/images/blog/budget-caps-stop-unexpected-cloud-bills/Image3-usage.png)

## 2. Setting your cap

Once you know your usage patterns, go back to the **Billing** tab and scroll down to the **budget cap** section, then toggle the **Enable budget cap** switch. Here you can set your monthly budget limit. With your budget cap set, once you hit the limit, no more charges can go through until you explicitly allow them.

![Budget cap settings](/images/blog/budget-caps-stop-unexpected-cloud-bills/Image4-budget-cap.png)

## 3. Layered protection with alerts

While the hard cap is your ultimate protection, we also give you graduated alerts to help manage your spending proactively. You can set notifications for when you use:

- 25% of your budget
- 50% of your budget
- 75% of your budget
- 100% of your budget

![Billing alerts settings](/images/blog/budget-caps-stop-unexpected-cloud-bills/Image5-billing-alerts.png)

These percentage-based alerts help you track spending patterns and catch unusual activity early. If you notice you're hitting 50% faster than usual, you can investigate before it becomes a problem.

# Handling growth and traffic spikes

One question that often gets asked is how to handle sudden traffic spikes. What if your app gets featured somewhere and usage jumps? The combination of alerts and caps handles this really well:

1. The percentage-based alerts warn you early if usage is climbing unusually fast
2. You have time to review your metrics and understand what's happening
3. If it's legitimate growth, you can adjust your cap before it becomes an issue
4. If it's unexpected behavior, the cap protects you while you investigate

# Building with confidence

Stories about unexpected cloud bills keep popping up, and they all share a common thread; by the time someone notices, it's too late. A simple configuration mistake or unexpected behavior should not generate a five-figure bill overnight. We built budget caps in Appwrite because we believe you should be able to focus on building your app without worrying about surprise bills.

A few minutes spent setting up these safeguards now means you never have to write one of those "How I Got a $70k Cloud Bill" posts. That's the kind of peace of mind every developer deserves.

For more details about our billing features or if you need help setting up your budget caps, check out our [documentation](https://appwrite.io/docs/advanced/platform/pro#budget-cap) or reach out to our team. We're always here to help!

We also made a YouTube video on this topic which you can check out [here](https://youtu.be/WsNTnBWGCQ0).

# More resources

- [Appwrite Billing](https://appwrite.io/docs/advanced/platform/billing?doFollow=true)
- [Don't make this mistake, set budget caps (YouTube)](https://youtu.be/WsNTnBWGCQ0?doFollow=true)
- [How to optimize your Appwrite project for cost and performance](https://appwrite.io/blog/post/how-to-optimize-your-appwrite-project?doFollow=true)
