---
layout: post
title: "Introducing more runtimes to the Appwrite ecosystem: Bun and Dart 3.3"
description: Fast, faster, fastest. These two incredibly fast runtimes go hand in hand with Appwrite, and we're excited to see what can be done when combined.
date: 2024-03-01
cover: /images/blog/bun-and-dart.png
timeToRead: 6
author: vincent-ge
category: engineering
---
Previously, we completely reimagined Functions to be more flexible and innovative yet familiar to developers. Now, Appwrite expands the runtime ecosystem available on Appwrite Cloud with Bun and Dart support.

# Bun, blazing fast and built for web

Bun is an amazingly fast runtime, dependency manager, test runner, and web server for JavaScript with unique features that make it a perfect fit for Appwrite Functions.

Bun is fast, like really fast. The runtime performance, dependency manager, and test runners are noticeably faster than its many Node.js counterparts. This is a topic well discussed in [benchmarks](https://medium.com/deno-the-complete-reference/is-bun-really-much-faster-than-node-js-e5b15942a8e8). 

Dependency resolution can also be much faster on Bun. This is particularly valuable for Appwrite Functions, where automatic deployments are triggered by Git commits. A shorter dependency resolution gives you faster deployment times during development, which can be very noticeable. Try running `bun install` vs `npm install` on your existing projects to see the difference yourself.

Bun also boasts many useful features like TypeScript and JSX out of the box without needing a build step, implements standard Web APIs like fetch, and comes with a test runner. All this reduces build times and dependencies needed.

The philosophy of simple but fast, yet coming with all the tools you need to start building, matches that of Appwrite extremely well.

# Dart 3.0, sound null safety

Dart is one of Appwrite’s [fastest runtimes](https://dev.to/appwrite/take-your-serverless-functions-to-new-speeds-with-appwrite-013-5868) because it is compiled with impressive cold-start performance and millisecond response times when warm. For Flutter developers, you can write your app and Appwrite Functions code in Dart, track them in the same repository, and deploy your app and function together when you PR to your production branch.

For Dart developers, Dart 3 introduces many exciting features like records for structured data, patterns, more verbose OOP concepts, and more. For Appwrite Functions developers, however, sound null safety is a stand-out.

Sound null safety means unless you specify a variable can be null, it will **never be null.** At compile time, not accessing nullable values safely or assigning potentially null values to non-nullable variables will throw errors.

This means you’ll see fewer runtime errors in your Appwrite Functions, especially when Appwrite Functions often integrate with third-party APIs you don’t control or receive user input.

```jsx
The getter 'age' was called on null.
Receiver: null
Tried calling: type
```

## Try the new runtimes

Try the new runtimes on Appwrite Cloud with zero lines of new code using function templates. Appwrite will clone a template repository to your GitHub profile and set up automatic deployments so you can start building with these runtimes immediately.

Visit our documentation to learn more about Bun and Dart, join us on Discord to be part of the discussion, view our blog and YouTube channel, or visit our GitHub repository to see our open-source code.

- [Docs](https://appwrite.io/docs/products/functions/runtimes)
- [Discord](https://appwrite.io/discord)
- [Blog](https://appwrite.io/blog)
- [YouTube](https://www.youtube.com/channel/UCtBJ1v69gm8NgbCju_03Fiw)
- [GitHub](https://github.com/appwrite/appwrite)
